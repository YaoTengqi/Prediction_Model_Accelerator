-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sparse is
generic (
    C_S_AXI_SPARSE_ADDR_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_SPARSE_ADDR_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_SPARSE_DATA_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_SPARSE_DATA_ID_WIDTH : INTEGER := 1;
    C_M_AXI_SPARSE_DATA_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_SPARSE_DATA_DATA_WIDTH : INTEGER := 256;
    C_M_AXI_SPARSE_DATA_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_SPARSE_DATA_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_SPARSE_DATA_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_SPARSE_DATA_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_SPARSE_DATA_USER_VALUE : INTEGER := 0;
    C_M_AXI_SPARSE_DATA_PROT_VALUE : INTEGER := 0;
    C_M_AXI_SPARSE_DATA_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_sparse_addr_AWVALID : IN STD_LOGIC;
    s_axi_sparse_addr_AWREADY : OUT STD_LOGIC;
    s_axi_sparse_addr_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_SPARSE_ADDR_ADDR_WIDTH-1 downto 0);
    s_axi_sparse_addr_WVALID : IN STD_LOGIC;
    s_axi_sparse_addr_WREADY : OUT STD_LOGIC;
    s_axi_sparse_addr_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_SPARSE_ADDR_DATA_WIDTH-1 downto 0);
    s_axi_sparse_addr_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_SPARSE_ADDR_DATA_WIDTH/8-1 downto 0);
    s_axi_sparse_addr_ARVALID : IN STD_LOGIC;
    s_axi_sparse_addr_ARREADY : OUT STD_LOGIC;
    s_axi_sparse_addr_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_SPARSE_ADDR_ADDR_WIDTH-1 downto 0);
    s_axi_sparse_addr_RVALID : OUT STD_LOGIC;
    s_axi_sparse_addr_RREADY : IN STD_LOGIC;
    s_axi_sparse_addr_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_SPARSE_ADDR_DATA_WIDTH-1 downto 0);
    s_axi_sparse_addr_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_sparse_addr_BVALID : OUT STD_LOGIC;
    s_axi_sparse_addr_BREADY : IN STD_LOGIC;
    s_axi_sparse_addr_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    m_axi_sparse_data_AWVALID : OUT STD_LOGIC;
    m_axi_sparse_data_AWREADY : IN STD_LOGIC;
    m_axi_sparse_data_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_SPARSE_DATA_ADDR_WIDTH-1 downto 0);
    m_axi_sparse_data_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_SPARSE_DATA_ID_WIDTH-1 downto 0);
    m_axi_sparse_data_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_sparse_data_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_sparse_data_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_sparse_data_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_sparse_data_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_sparse_data_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_sparse_data_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_sparse_data_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_sparse_data_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_SPARSE_DATA_AWUSER_WIDTH-1 downto 0);
    m_axi_sparse_data_WVALID : OUT STD_LOGIC;
    m_axi_sparse_data_WREADY : IN STD_LOGIC;
    m_axi_sparse_data_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_SPARSE_DATA_DATA_WIDTH-1 downto 0);
    m_axi_sparse_data_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_SPARSE_DATA_DATA_WIDTH/8-1 downto 0);
    m_axi_sparse_data_WLAST : OUT STD_LOGIC;
    m_axi_sparse_data_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_SPARSE_DATA_ID_WIDTH-1 downto 0);
    m_axi_sparse_data_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_SPARSE_DATA_WUSER_WIDTH-1 downto 0);
    m_axi_sparse_data_ARVALID : OUT STD_LOGIC;
    m_axi_sparse_data_ARREADY : IN STD_LOGIC;
    m_axi_sparse_data_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_SPARSE_DATA_ADDR_WIDTH-1 downto 0);
    m_axi_sparse_data_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_SPARSE_DATA_ID_WIDTH-1 downto 0);
    m_axi_sparse_data_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_sparse_data_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_sparse_data_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_sparse_data_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_sparse_data_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_sparse_data_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_sparse_data_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_sparse_data_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_sparse_data_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_SPARSE_DATA_ARUSER_WIDTH-1 downto 0);
    m_axi_sparse_data_RVALID : IN STD_LOGIC;
    m_axi_sparse_data_RREADY : OUT STD_LOGIC;
    m_axi_sparse_data_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_SPARSE_DATA_DATA_WIDTH-1 downto 0);
    m_axi_sparse_data_RLAST : IN STD_LOGIC;
    m_axi_sparse_data_RID : IN STD_LOGIC_VECTOR (C_M_AXI_SPARSE_DATA_ID_WIDTH-1 downto 0);
    m_axi_sparse_data_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_SPARSE_DATA_RUSER_WIDTH-1 downto 0);
    m_axi_sparse_data_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_sparse_data_BVALID : IN STD_LOGIC;
    m_axi_sparse_data_BREADY : OUT STD_LOGIC;
    m_axi_sparse_data_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_sparse_data_BID : IN STD_LOGIC_VECTOR (C_M_AXI_SPARSE_DATA_ID_WIDTH-1 downto 0);
    m_axi_sparse_data_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_SPARSE_DATA_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of sparse is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sparse_sparse,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=31,HLS_SYN_DSP=0,HLS_SYN_FF=4585,HLS_SYN_LUT=6915,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal fm_ram_V_i_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal fm_ram_V_t_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal idx_ram_i_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal idx_ram_t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal count_ram_i_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal count_ram_t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_data_addr1 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_data_addr2 : STD_LOGIC_VECTOR (31 downto 0);
    signal output_data_addr3 : STD_LOGIC_VECTOR (31 downto 0);
    signal am_ROWS : STD_LOGIC_VECTOR (31 downto 0);
    signal am_COLS : STD_LOGIC_VECTOR (31 downto 0);
    signal fm_ROWS : STD_LOGIC_VECTOR (31 downto 0);
    signal fm_COLS : STD_LOGIC_VECTOR (31 downto 0);
    signal inputs : STD_LOGIC_VECTOR (63 downto 0);
    signal outputs : STD_LOGIC_VECTOR (63 downto 0);
    signal sparse_flag : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal sparse_data_AWREADY : STD_LOGIC;
    signal sparse_data_WREADY : STD_LOGIC;
    signal sparse_data_ARREADY : STD_LOGIC;
    signal sparse_data_RVALID : STD_LOGIC;
    signal sparse_data_RDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal sparse_data_RLAST : STD_LOGIC;
    signal sparse_data_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal sparse_data_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal sparse_data_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal sparse_data_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal sparse_data_BVALID : STD_LOGIC;
    signal sparse_data_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal sparse_data_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal sparse_data_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_start_out : STD_LOGIC;
    signal entry_proc_U0_start_write : STD_LOGIC;
    signal entry_proc_U0_output_data_addr3_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc_U0_output_data_addr3_c_write : STD_LOGIC;
    signal entry_proc_U0_outputs_c_din : STD_LOGIC_VECTOR (63 downto 0);
    signal entry_proc_U0_outputs_c_write : STD_LOGIC;
    signal load_ap_uint_256_ap_int_8_32u_U0_ap_start : STD_LOGIC;
    signal load_ap_uint_256_ap_int_8_32u_U0_ap_done : STD_LOGIC;
    signal load_ap_uint_256_ap_int_8_32u_U0_ap_continue : STD_LOGIC;
    signal load_ap_uint_256_ap_int_8_32u_U0_ap_idle : STD_LOGIC;
    signal load_ap_uint_256_ap_int_8_32u_U0_ap_ready : STD_LOGIC;
    signal load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_AWVALID : STD_LOGIC;
    signal load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_WVALID : STD_LOGIC;
    signal load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_WLAST : STD_LOGIC;
    signal load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_ARVALID : STD_LOGIC;
    signal load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_RREADY : STD_LOGIC;
    signal load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_BREADY : STD_LOGIC;
    signal load_ap_uint_256_ap_int_8_32u_U0_idx_ram_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal load_ap_uint_256_ap_int_8_32u_U0_idx_ram_ce0 : STD_LOGIC;
    signal load_ap_uint_256_ap_int_8_32u_U0_idx_ram_we0 : STD_LOGIC;
    signal load_ap_uint_256_ap_int_8_32u_U0_idx_ram_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal load_ap_uint_256_ap_int_8_32u_U0_count_ram_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal load_ap_uint_256_ap_int_8_32u_U0_count_ram_ce0 : STD_LOGIC;
    signal load_ap_uint_256_ap_int_8_32u_U0_count_ram_we0 : STD_LOGIC;
    signal load_ap_uint_256_ap_int_8_32u_U0_count_ram_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal load_ap_uint_256_ap_int_8_32u_U0_fm_ram_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal load_ap_uint_256_ap_int_8_32u_U0_fm_ram_ce0 : STD_LOGIC;
    signal load_ap_uint_256_ap_int_8_32u_U0_fm_ram_we0 : STD_LOGIC;
    signal load_ap_uint_256_ap_int_8_32u_U0_fm_ram_d0 : STD_LOGIC_VECTOR (255 downto 0);
    signal load_ap_uint_256_ap_int_8_32u_U0_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal load_ap_uint_256_ap_int_8_32u_U0_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_fm_COLS_c10_channel : STD_LOGIC;
    signal fm_COLS_c10_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_fm_COLS_c10_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_fm_COLS_c10_channel : STD_LOGIC;
    signal ap_channel_done_am_ROWS_c9_channel : STD_LOGIC;
    signal am_ROWS_c9_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_am_ROWS_c9_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_am_ROWS_c9_channel : STD_LOGIC;
    signal ap_channel_done_fm_ram_V : STD_LOGIC;
    signal load_ap_uint_256_ap_int_8_32u_U0_fm_ram_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_fm_ram_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_fm_ram_V : STD_LOGIC;
    signal ap_channel_done_count_ram : STD_LOGIC;
    signal load_ap_uint_256_ap_int_8_32u_U0_count_ram_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_count_ram : STD_LOGIC := '0';
    signal ap_sync_channel_write_count_ram : STD_LOGIC;
    signal ap_channel_done_idx_ram : STD_LOGIC;
    signal load_ap_uint_256_ap_int_8_32u_U0_idx_ram_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_idx_ram : STD_LOGIC := '0';
    signal ap_sync_channel_write_idx_ram : STD_LOGIC;
    signal mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ap_start : STD_LOGIC;
    signal mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ap_done : STD_LOGIC;
    signal mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ap_continue : STD_LOGIC;
    signal mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ap_idle : STD_LOGIC;
    signal mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ap_ready : STD_LOGIC;
    signal mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_fm_ram_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_fm_ram_ce0 : STD_LOGIC;
    signal mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_idx_ram_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_idx_ram_ce0 : STD_LOGIC;
    signal mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_count_ram_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_count_ram_ce0 : STD_LOGIC;
    signal mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_data_out1_din : STD_LOGIC_VECTOR (255 downto 0);
    signal mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_data_out1_write : STD_LOGIC;
    signal mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_am_ROWS_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_am_ROWS_c_write : STD_LOGIC;
    signal mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_fm_COLS_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_fm_COLS_c_write : STD_LOGIC;
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ap_start : STD_LOGIC;
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ap_done : STD_LOGIC;
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ap_continue : STD_LOGIC;
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ap_idle : STD_LOGIC;
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ap_ready : STD_LOGIC;
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_data_out1_read : STD_LOGIC;
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_AWVALID : STD_LOGIC;
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_WVALID : STD_LOGIC;
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_WLAST : STD_LOGIC;
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_ARVALID : STD_LOGIC;
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_RREADY : STD_LOGIC;
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_BREADY : STD_LOGIC;
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_outputs_read : STD_LOGIC;
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_output_data_addr3_read : STD_LOGIC;
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ROWS_read : STD_LOGIC;
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_COLS_read : STD_LOGIC;
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_sparse_flag : STD_LOGIC_VECTOR (0 downto 0);
    signal store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_sparse_flag_ap_vld : STD_LOGIC;
    signal idx_ram_i_full_n : STD_LOGIC;
    signal idx_ram_t_empty_n : STD_LOGIC;
    signal count_ram_i_full_n : STD_LOGIC;
    signal count_ram_t_empty_n : STD_LOGIC;
    signal fm_ram_V_i_full_n : STD_LOGIC;
    signal fm_ram_V_t_empty_n : STD_LOGIC;
    signal output_data_addr3_c_full_n : STD_LOGIC;
    signal output_data_addr3_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal output_data_addr3_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal output_data_addr3_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal output_data_addr3_c_empty_n : STD_LOGIC;
    signal outputs_c_full_n : STD_LOGIC;
    signal outputs_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal outputs_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal outputs_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal outputs_c_empty_n : STD_LOGIC;
    signal am_ROWS_c9_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal am_ROWS_c9_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal am_ROWS_c9_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal am_ROWS_c9_channel_empty_n : STD_LOGIC;
    signal fm_COLS_c10_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal fm_COLS_c10_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal fm_COLS_c10_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal fm_COLS_c10_channel_empty_n : STD_LOGIC;
    signal data_out_full_n : STD_LOGIC;
    signal data_out_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal data_out_num_data_valid : STD_LOGIC_VECTOR (6 downto 0);
    signal data_out_fifo_cap : STD_LOGIC_VECTOR (6 downto 0);
    signal data_out_empty_n : STD_LOGIC;
    signal am_ROWS_c_full_n : STD_LOGIC;
    signal am_ROWS_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal am_ROWS_c_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal am_ROWS_c_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal am_ROWS_c_empty_n : STD_LOGIC;
    signal fm_COLS_c_full_n : STD_LOGIC;
    signal fm_COLS_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal fm_COLS_c_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal fm_COLS_c_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal fm_COLS_c_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_load_ap_uint_256_ap_int_8_32u_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_load_ap_uint_256_ap_int_8_32u_U0_ap_ready : STD_LOGIC;
    signal start_for_store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_full_n : STD_LOGIC;
    signal start_for_store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sparse_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        output_data_addr3 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_data_addr3_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_data_addr3_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        output_data_addr3_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        output_data_addr3_c_full_n : IN STD_LOGIC;
        output_data_addr3_c_write : OUT STD_LOGIC;
        outputs : IN STD_LOGIC_VECTOR (63 downto 0);
        outputs_c_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        outputs_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        outputs_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        outputs_c_full_n : IN STD_LOGIC;
        outputs_c_write : OUT STD_LOGIC );
    end component;


    component sparse_load_ap_uint_256_ap_int_8_32u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        am_ROWS : IN STD_LOGIC_VECTOR (31 downto 0);
        am_COLS : IN STD_LOGIC_VECTOR (31 downto 0);
        fm_ROWS : IN STD_LOGIC_VECTOR (31 downto 0);
        fm_COLS : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_sparse_data_AWVALID : OUT STD_LOGIC;
        m_axi_sparse_data_AWREADY : IN STD_LOGIC;
        m_axi_sparse_data_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_sparse_data_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sparse_data_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_sparse_data_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_sparse_data_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_sparse_data_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_sparse_data_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_sparse_data_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_sparse_data_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_sparse_data_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_sparse_data_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sparse_data_WVALID : OUT STD_LOGIC;
        m_axi_sparse_data_WREADY : IN STD_LOGIC;
        m_axi_sparse_data_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_sparse_data_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_sparse_data_WLAST : OUT STD_LOGIC;
        m_axi_sparse_data_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sparse_data_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sparse_data_ARVALID : OUT STD_LOGIC;
        m_axi_sparse_data_ARREADY : IN STD_LOGIC;
        m_axi_sparse_data_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_sparse_data_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sparse_data_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_sparse_data_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_sparse_data_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_sparse_data_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_sparse_data_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_sparse_data_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_sparse_data_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_sparse_data_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_sparse_data_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sparse_data_RVALID : IN STD_LOGIC;
        m_axi_sparse_data_RREADY : OUT STD_LOGIC;
        m_axi_sparse_data_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_sparse_data_RLAST : IN STD_LOGIC;
        m_axi_sparse_data_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sparse_data_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_sparse_data_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sparse_data_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_sparse_data_BVALID : IN STD_LOGIC;
        m_axi_sparse_data_BREADY : OUT STD_LOGIC;
        m_axi_sparse_data_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_sparse_data_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sparse_data_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inputs : IN STD_LOGIC_VECTOR (63 downto 0);
        idx_ram_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        idx_ram_ce0 : OUT STD_LOGIC;
        idx_ram_we0 : OUT STD_LOGIC;
        idx_ram_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        count_ram_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        count_ram_ce0 : OUT STD_LOGIC;
        count_ram_we0 : OUT STD_LOGIC;
        count_ram_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        fm_ram_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        fm_ram_ce0 : OUT STD_LOGIC;
        fm_ram_we0 : OUT STD_LOGIC;
        fm_ram_d0 : OUT STD_LOGIC_VECTOR (255 downto 0);
        input_data_addr1 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_data_addr2 : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sparse_mul_ap_uint_256_ap_int_8_ap_int_8_32u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        fm_ram_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        fm_ram_ce0 : OUT STD_LOGIC;
        fm_ram_q0 : IN STD_LOGIC_VECTOR (255 downto 0);
        idx_ram_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        idx_ram_ce0 : OUT STD_LOGIC;
        idx_ram_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        count_ram_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        count_ram_ce0 : OUT STD_LOGIC;
        count_ram_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        data_out1_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        data_out1_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        data_out1_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
        data_out1_full_n : IN STD_LOGIC;
        data_out1_write : OUT STD_LOGIC;
        am_ROWS_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        am_ROWS_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        am_ROWS_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        am_ROWS_c_full_n : IN STD_LOGIC;
        am_ROWS_c_write : OUT STD_LOGIC;
        fm_COLS_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        fm_COLS_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        fm_COLS_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        fm_COLS_c_full_n : IN STD_LOGIC;
        fm_COLS_c_write : OUT STD_LOGIC );
    end component;


    component sparse_store_ap_uint_256_ap_int_8_ap_int_8_32u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_out1_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        data_out1_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        data_out1_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
        data_out1_empty_n : IN STD_LOGIC;
        data_out1_read : OUT STD_LOGIC;
        m_axi_sparse_data_AWVALID : OUT STD_LOGIC;
        m_axi_sparse_data_AWREADY : IN STD_LOGIC;
        m_axi_sparse_data_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_sparse_data_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sparse_data_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_sparse_data_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_sparse_data_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_sparse_data_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_sparse_data_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_sparse_data_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_sparse_data_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_sparse_data_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_sparse_data_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sparse_data_WVALID : OUT STD_LOGIC;
        m_axi_sparse_data_WREADY : IN STD_LOGIC;
        m_axi_sparse_data_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_sparse_data_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_sparse_data_WLAST : OUT STD_LOGIC;
        m_axi_sparse_data_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sparse_data_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sparse_data_ARVALID : OUT STD_LOGIC;
        m_axi_sparse_data_ARREADY : IN STD_LOGIC;
        m_axi_sparse_data_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_sparse_data_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sparse_data_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_sparse_data_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_sparse_data_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_sparse_data_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_sparse_data_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_sparse_data_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_sparse_data_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_sparse_data_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_sparse_data_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sparse_data_RVALID : IN STD_LOGIC;
        m_axi_sparse_data_RREADY : OUT STD_LOGIC;
        m_axi_sparse_data_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_sparse_data_RLAST : IN STD_LOGIC;
        m_axi_sparse_data_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sparse_data_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_sparse_data_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sparse_data_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_sparse_data_BVALID : IN STD_LOGIC;
        m_axi_sparse_data_BREADY : OUT STD_LOGIC;
        m_axi_sparse_data_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_sparse_data_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sparse_data_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        outputs_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        outputs_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        outputs_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        outputs_empty_n : IN STD_LOGIC;
        outputs_read : OUT STD_LOGIC;
        output_data_addr3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        output_data_addr3_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        output_data_addr3_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        output_data_addr3_empty_n : IN STD_LOGIC;
        output_data_addr3_read : OUT STD_LOGIC;
        ROWS_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        ROWS_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        ROWS_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        ROWS_empty_n : IN STD_LOGIC;
        ROWS_read : OUT STD_LOGIC;
        COLS_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        COLS_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        COLS_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        COLS_empty_n : IN STD_LOGIC;
        COLS_read : OUT STD_LOGIC;
        sparse_flag : OUT STD_LOGIC_VECTOR (0 downto 0);
        sparse_flag_ap_vld : OUT STD_LOGIC );
    end component;


    component sparse_fm_ram_V_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (255 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (255 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (255 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (255 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component sparse_idx_ram_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component sparse_count_ram_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component sparse_fifo_w32_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component sparse_fifo_w64_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component sparse_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component sparse_fifo_w256_d64_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (255 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (255 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (6 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (6 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component sparse_start_for_store_ap_uint_256_ap_int_8_ap_int_8_32u_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component sparse_sparse_addr_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        input_data_addr1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_data_addr2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_data_addr3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        am_ROWS : OUT STD_LOGIC_VECTOR (31 downto 0);
        am_COLS : OUT STD_LOGIC_VECTOR (31 downto 0);
        fm_ROWS : OUT STD_LOGIC_VECTOR (31 downto 0);
        fm_COLS : OUT STD_LOGIC_VECTOR (31 downto 0);
        inputs : OUT STD_LOGIC_VECTOR (63 downto 0);
        outputs : OUT STD_LOGIC_VECTOR (63 downto 0);
        sparse_flag : IN STD_LOGIC;
        sparse_flag_ap_vld : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component sparse_sparse_data_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (31 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    fm_ram_V_U : component sparse_fm_ram_V_RAM_AUTO_1R1W
    generic map (
        DataWidth => 256,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => load_ap_uint_256_ap_int_8_32u_U0_fm_ram_address0,
        i_ce0 => load_ap_uint_256_ap_int_8_32u_U0_fm_ram_ce0,
        i_we0 => load_ap_uint_256_ap_int_8_32u_U0_fm_ram_we0,
        i_d0 => load_ap_uint_256_ap_int_8_32u_U0_fm_ram_d0,
        i_q0 => fm_ram_V_i_q0,
        t_address0 => mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_fm_ram_address0,
        t_ce0 => mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_fm_ram_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv256_lc_1,
        t_q0 => fm_ram_V_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => fm_ram_V_i_full_n,
        i_write => ap_channel_done_fm_ram_V,
        t_empty_n => fm_ram_V_t_empty_n,
        t_read => mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ap_ready);

    idx_ram_U : component sparse_idx_ram_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => load_ap_uint_256_ap_int_8_32u_U0_idx_ram_address0,
        i_ce0 => load_ap_uint_256_ap_int_8_32u_U0_idx_ram_ce0,
        i_we0 => load_ap_uint_256_ap_int_8_32u_U0_idx_ram_we0,
        i_d0 => load_ap_uint_256_ap_int_8_32u_U0_idx_ram_d0,
        i_q0 => idx_ram_i_q0,
        t_address0 => mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_idx_ram_address0,
        t_ce0 => mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_idx_ram_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv8_0,
        t_q0 => idx_ram_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => idx_ram_i_full_n,
        i_write => ap_channel_done_idx_ram,
        t_empty_n => idx_ram_t_empty_n,
        t_read => mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ap_ready);

    count_ram_U : component sparse_count_ram_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => load_ap_uint_256_ap_int_8_32u_U0_count_ram_address0,
        i_ce0 => load_ap_uint_256_ap_int_8_32u_U0_count_ram_ce0,
        i_we0 => load_ap_uint_256_ap_int_8_32u_U0_count_ram_we0,
        i_d0 => load_ap_uint_256_ap_int_8_32u_U0_count_ram_d0,
        i_q0 => count_ram_i_q0,
        t_address0 => mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_count_ram_address0,
        t_ce0 => mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_count_ram_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv8_0,
        t_q0 => count_ram_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => count_ram_i_full_n,
        i_write => ap_channel_done_count_ram,
        t_empty_n => count_ram_t_empty_n,
        t_read => mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ap_ready);

    sparse_addr_s_axi_U : component sparse_sparse_addr_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_SPARSE_ADDR_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_SPARSE_ADDR_DATA_WIDTH)
    port map (
        AWVALID => s_axi_sparse_addr_AWVALID,
        AWREADY => s_axi_sparse_addr_AWREADY,
        AWADDR => s_axi_sparse_addr_AWADDR,
        WVALID => s_axi_sparse_addr_WVALID,
        WREADY => s_axi_sparse_addr_WREADY,
        WDATA => s_axi_sparse_addr_WDATA,
        WSTRB => s_axi_sparse_addr_WSTRB,
        ARVALID => s_axi_sparse_addr_ARVALID,
        ARREADY => s_axi_sparse_addr_ARREADY,
        ARADDR => s_axi_sparse_addr_ARADDR,
        RVALID => s_axi_sparse_addr_RVALID,
        RREADY => s_axi_sparse_addr_RREADY,
        RDATA => s_axi_sparse_addr_RDATA,
        RRESP => s_axi_sparse_addr_RRESP,
        BVALID => s_axi_sparse_addr_BVALID,
        BREADY => s_axi_sparse_addr_BREADY,
        BRESP => s_axi_sparse_addr_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        input_data_addr1 => input_data_addr1,
        input_data_addr2 => input_data_addr2,
        output_data_addr3 => output_data_addr3,
        am_ROWS => am_ROWS,
        am_COLS => am_COLS,
        fm_ROWS => fm_ROWS,
        fm_COLS => fm_COLS,
        inputs => inputs,
        outputs => outputs,
        sparse_flag => sparse_flag,
        sparse_flag_ap_vld => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_sparse_flag_ap_vld,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    sparse_data_m_axi_U : component sparse_sparse_data_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 37,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_SPARSE_DATA_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_SPARSE_DATA_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_SPARSE_DATA_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_SPARSE_DATA_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_SPARSE_DATA_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_SPARSE_DATA_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_SPARSE_DATA_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_SPARSE_DATA_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_SPARSE_DATA_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_SPARSE_DATA_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_SPARSE_DATA_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 256,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_sparse_data_AWVALID,
        AWREADY => m_axi_sparse_data_AWREADY,
        AWADDR => m_axi_sparse_data_AWADDR,
        AWID => m_axi_sparse_data_AWID,
        AWLEN => m_axi_sparse_data_AWLEN,
        AWSIZE => m_axi_sparse_data_AWSIZE,
        AWBURST => m_axi_sparse_data_AWBURST,
        AWLOCK => m_axi_sparse_data_AWLOCK,
        AWCACHE => m_axi_sparse_data_AWCACHE,
        AWPROT => m_axi_sparse_data_AWPROT,
        AWQOS => m_axi_sparse_data_AWQOS,
        AWREGION => m_axi_sparse_data_AWREGION,
        AWUSER => m_axi_sparse_data_AWUSER,
        WVALID => m_axi_sparse_data_WVALID,
        WREADY => m_axi_sparse_data_WREADY,
        WDATA => m_axi_sparse_data_WDATA,
        WSTRB => m_axi_sparse_data_WSTRB,
        WLAST => m_axi_sparse_data_WLAST,
        WID => m_axi_sparse_data_WID,
        WUSER => m_axi_sparse_data_WUSER,
        ARVALID => m_axi_sparse_data_ARVALID,
        ARREADY => m_axi_sparse_data_ARREADY,
        ARADDR => m_axi_sparse_data_ARADDR,
        ARID => m_axi_sparse_data_ARID,
        ARLEN => m_axi_sparse_data_ARLEN,
        ARSIZE => m_axi_sparse_data_ARSIZE,
        ARBURST => m_axi_sparse_data_ARBURST,
        ARLOCK => m_axi_sparse_data_ARLOCK,
        ARCACHE => m_axi_sparse_data_ARCACHE,
        ARPROT => m_axi_sparse_data_ARPROT,
        ARQOS => m_axi_sparse_data_ARQOS,
        ARREGION => m_axi_sparse_data_ARREGION,
        ARUSER => m_axi_sparse_data_ARUSER,
        RVALID => m_axi_sparse_data_RVALID,
        RREADY => m_axi_sparse_data_RREADY,
        RDATA => m_axi_sparse_data_RDATA,
        RLAST => m_axi_sparse_data_RLAST,
        RID => m_axi_sparse_data_RID,
        RUSER => m_axi_sparse_data_RUSER,
        RRESP => m_axi_sparse_data_RRESP,
        BVALID => m_axi_sparse_data_BVALID,
        BREADY => m_axi_sparse_data_BREADY,
        BRESP => m_axi_sparse_data_BRESP,
        BID => m_axi_sparse_data_BID,
        BUSER => m_axi_sparse_data_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_ARVALID,
        I_ARREADY => sparse_data_ARREADY,
        I_ARADDR => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_ARADDR,
        I_ARLEN => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_ARLEN,
        I_RVALID => sparse_data_RVALID,
        I_RREADY => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_RREADY,
        I_RDATA => sparse_data_RDATA,
        I_RFIFONUM => sparse_data_RFIFONUM,
        I_AWVALID => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_AWVALID,
        I_AWREADY => sparse_data_AWREADY,
        I_AWADDR => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_AWADDR,
        I_AWLEN => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_AWLEN,
        I_WVALID => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_WVALID,
        I_WREADY => sparse_data_WREADY,
        I_WDATA => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_WDATA,
        I_WSTRB => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_WSTRB,
        I_BVALID => sparse_data_BVALID,
        I_BREADY => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_BREADY);

    entry_proc_U0 : component sparse_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => entry_proc_U0_ap_start,
        start_full_n => start_for_store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_full_n,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        start_out => entry_proc_U0_start_out,
        start_write => entry_proc_U0_start_write,
        output_data_addr3 => output_data_addr3,
        output_data_addr3_c_din => entry_proc_U0_output_data_addr3_c_din,
        output_data_addr3_c_num_data_valid => output_data_addr3_c_num_data_valid,
        output_data_addr3_c_fifo_cap => output_data_addr3_c_fifo_cap,
        output_data_addr3_c_full_n => output_data_addr3_c_full_n,
        output_data_addr3_c_write => entry_proc_U0_output_data_addr3_c_write,
        outputs => outputs,
        outputs_c_din => entry_proc_U0_outputs_c_din,
        outputs_c_num_data_valid => outputs_c_num_data_valid,
        outputs_c_fifo_cap => outputs_c_fifo_cap,
        outputs_c_full_n => outputs_c_full_n,
        outputs_c_write => entry_proc_U0_outputs_c_write);

    load_ap_uint_256_ap_int_8_32u_U0 : component sparse_load_ap_uint_256_ap_int_8_32u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => load_ap_uint_256_ap_int_8_32u_U0_ap_start,
        ap_done => load_ap_uint_256_ap_int_8_32u_U0_ap_done,
        ap_continue => load_ap_uint_256_ap_int_8_32u_U0_ap_continue,
        ap_idle => load_ap_uint_256_ap_int_8_32u_U0_ap_idle,
        ap_ready => load_ap_uint_256_ap_int_8_32u_U0_ap_ready,
        am_ROWS => am_ROWS,
        am_COLS => am_COLS,
        fm_ROWS => fm_ROWS,
        fm_COLS => fm_COLS,
        m_axi_sparse_data_AWVALID => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_AWVALID,
        m_axi_sparse_data_AWREADY => ap_const_logic_0,
        m_axi_sparse_data_AWADDR => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_AWADDR,
        m_axi_sparse_data_AWID => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_AWID,
        m_axi_sparse_data_AWLEN => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_AWLEN,
        m_axi_sparse_data_AWSIZE => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_AWSIZE,
        m_axi_sparse_data_AWBURST => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_AWBURST,
        m_axi_sparse_data_AWLOCK => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_AWLOCK,
        m_axi_sparse_data_AWCACHE => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_AWCACHE,
        m_axi_sparse_data_AWPROT => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_AWPROT,
        m_axi_sparse_data_AWQOS => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_AWQOS,
        m_axi_sparse_data_AWREGION => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_AWREGION,
        m_axi_sparse_data_AWUSER => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_AWUSER,
        m_axi_sparse_data_WVALID => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_WVALID,
        m_axi_sparse_data_WREADY => ap_const_logic_0,
        m_axi_sparse_data_WDATA => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_WDATA,
        m_axi_sparse_data_WSTRB => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_WSTRB,
        m_axi_sparse_data_WLAST => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_WLAST,
        m_axi_sparse_data_WID => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_WID,
        m_axi_sparse_data_WUSER => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_WUSER,
        m_axi_sparse_data_ARVALID => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_ARVALID,
        m_axi_sparse_data_ARREADY => sparse_data_ARREADY,
        m_axi_sparse_data_ARADDR => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_ARADDR,
        m_axi_sparse_data_ARID => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_ARID,
        m_axi_sparse_data_ARLEN => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_ARLEN,
        m_axi_sparse_data_ARSIZE => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_ARSIZE,
        m_axi_sparse_data_ARBURST => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_ARBURST,
        m_axi_sparse_data_ARLOCK => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_ARLOCK,
        m_axi_sparse_data_ARCACHE => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_ARCACHE,
        m_axi_sparse_data_ARPROT => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_ARPROT,
        m_axi_sparse_data_ARQOS => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_ARQOS,
        m_axi_sparse_data_ARREGION => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_ARREGION,
        m_axi_sparse_data_ARUSER => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_ARUSER,
        m_axi_sparse_data_RVALID => sparse_data_RVALID,
        m_axi_sparse_data_RREADY => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_RREADY,
        m_axi_sparse_data_RDATA => sparse_data_RDATA,
        m_axi_sparse_data_RLAST => sparse_data_RLAST,
        m_axi_sparse_data_RID => sparse_data_RID,
        m_axi_sparse_data_RFIFONUM => sparse_data_RFIFONUM,
        m_axi_sparse_data_RUSER => sparse_data_RUSER,
        m_axi_sparse_data_RRESP => sparse_data_RRESP,
        m_axi_sparse_data_BVALID => ap_const_logic_0,
        m_axi_sparse_data_BREADY => load_ap_uint_256_ap_int_8_32u_U0_m_axi_sparse_data_BREADY,
        m_axi_sparse_data_BRESP => ap_const_lv2_0,
        m_axi_sparse_data_BID => ap_const_lv1_0,
        m_axi_sparse_data_BUSER => ap_const_lv1_0,
        inputs => inputs,
        idx_ram_address0 => load_ap_uint_256_ap_int_8_32u_U0_idx_ram_address0,
        idx_ram_ce0 => load_ap_uint_256_ap_int_8_32u_U0_idx_ram_ce0,
        idx_ram_we0 => load_ap_uint_256_ap_int_8_32u_U0_idx_ram_we0,
        idx_ram_d0 => load_ap_uint_256_ap_int_8_32u_U0_idx_ram_d0,
        count_ram_address0 => load_ap_uint_256_ap_int_8_32u_U0_count_ram_address0,
        count_ram_ce0 => load_ap_uint_256_ap_int_8_32u_U0_count_ram_ce0,
        count_ram_we0 => load_ap_uint_256_ap_int_8_32u_U0_count_ram_we0,
        count_ram_d0 => load_ap_uint_256_ap_int_8_32u_U0_count_ram_d0,
        fm_ram_address0 => load_ap_uint_256_ap_int_8_32u_U0_fm_ram_address0,
        fm_ram_ce0 => load_ap_uint_256_ap_int_8_32u_U0_fm_ram_ce0,
        fm_ram_we0 => load_ap_uint_256_ap_int_8_32u_U0_fm_ram_we0,
        fm_ram_d0 => load_ap_uint_256_ap_int_8_32u_U0_fm_ram_d0,
        input_data_addr1 => input_data_addr1,
        input_data_addr2 => input_data_addr2,
        ap_return_0 => load_ap_uint_256_ap_int_8_32u_U0_ap_return_0,
        ap_return_1 => load_ap_uint_256_ap_int_8_32u_U0_ap_return_1);

    mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0 : component sparse_mul_ap_uint_256_ap_int_8_ap_int_8_32u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ap_start,
        ap_done => mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ap_done,
        ap_continue => mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ap_continue,
        ap_idle => mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ap_idle,
        ap_ready => mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ap_ready,
        p_read => am_ROWS_c9_channel_dout,
        p_read1 => fm_COLS_c10_channel_dout,
        fm_ram_address0 => mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_fm_ram_address0,
        fm_ram_ce0 => mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_fm_ram_ce0,
        fm_ram_q0 => fm_ram_V_t_q0,
        idx_ram_address0 => mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_idx_ram_address0,
        idx_ram_ce0 => mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_idx_ram_ce0,
        idx_ram_q0 => idx_ram_t_q0,
        count_ram_address0 => mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_count_ram_address0,
        count_ram_ce0 => mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_count_ram_ce0,
        count_ram_q0 => count_ram_t_q0,
        data_out1_din => mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_data_out1_din,
        data_out1_num_data_valid => data_out_num_data_valid,
        data_out1_fifo_cap => data_out_fifo_cap,
        data_out1_full_n => data_out_full_n,
        data_out1_write => mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_data_out1_write,
        am_ROWS_c_din => mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_am_ROWS_c_din,
        am_ROWS_c_num_data_valid => am_ROWS_c_num_data_valid,
        am_ROWS_c_fifo_cap => am_ROWS_c_fifo_cap,
        am_ROWS_c_full_n => am_ROWS_c_full_n,
        am_ROWS_c_write => mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_am_ROWS_c_write,
        fm_COLS_c_din => mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_fm_COLS_c_din,
        fm_COLS_c_num_data_valid => fm_COLS_c_num_data_valid,
        fm_COLS_c_fifo_cap => fm_COLS_c_fifo_cap,
        fm_COLS_c_full_n => fm_COLS_c_full_n,
        fm_COLS_c_write => mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_fm_COLS_c_write);

    store_ap_uint_256_ap_int_8_ap_int_8_32u_U0 : component sparse_store_ap_uint_256_ap_int_8_ap_int_8_32u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ap_start,
        ap_done => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ap_done,
        ap_continue => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ap_continue,
        ap_idle => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ap_idle,
        ap_ready => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ap_ready,
        data_out1_dout => data_out_dout,
        data_out1_num_data_valid => data_out_num_data_valid,
        data_out1_fifo_cap => data_out_fifo_cap,
        data_out1_empty_n => data_out_empty_n,
        data_out1_read => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_data_out1_read,
        m_axi_sparse_data_AWVALID => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_AWVALID,
        m_axi_sparse_data_AWREADY => sparse_data_AWREADY,
        m_axi_sparse_data_AWADDR => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_AWADDR,
        m_axi_sparse_data_AWID => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_AWID,
        m_axi_sparse_data_AWLEN => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_AWLEN,
        m_axi_sparse_data_AWSIZE => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_AWSIZE,
        m_axi_sparse_data_AWBURST => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_AWBURST,
        m_axi_sparse_data_AWLOCK => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_AWLOCK,
        m_axi_sparse_data_AWCACHE => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_AWCACHE,
        m_axi_sparse_data_AWPROT => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_AWPROT,
        m_axi_sparse_data_AWQOS => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_AWQOS,
        m_axi_sparse_data_AWREGION => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_AWREGION,
        m_axi_sparse_data_AWUSER => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_AWUSER,
        m_axi_sparse_data_WVALID => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_WVALID,
        m_axi_sparse_data_WREADY => sparse_data_WREADY,
        m_axi_sparse_data_WDATA => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_WDATA,
        m_axi_sparse_data_WSTRB => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_WSTRB,
        m_axi_sparse_data_WLAST => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_WLAST,
        m_axi_sparse_data_WID => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_WID,
        m_axi_sparse_data_WUSER => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_WUSER,
        m_axi_sparse_data_ARVALID => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_ARVALID,
        m_axi_sparse_data_ARREADY => ap_const_logic_0,
        m_axi_sparse_data_ARADDR => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_ARADDR,
        m_axi_sparse_data_ARID => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_ARID,
        m_axi_sparse_data_ARLEN => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_ARLEN,
        m_axi_sparse_data_ARSIZE => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_ARSIZE,
        m_axi_sparse_data_ARBURST => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_ARBURST,
        m_axi_sparse_data_ARLOCK => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_ARLOCK,
        m_axi_sparse_data_ARCACHE => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_ARCACHE,
        m_axi_sparse_data_ARPROT => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_ARPROT,
        m_axi_sparse_data_ARQOS => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_ARQOS,
        m_axi_sparse_data_ARREGION => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_ARREGION,
        m_axi_sparse_data_ARUSER => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_ARUSER,
        m_axi_sparse_data_RVALID => ap_const_logic_0,
        m_axi_sparse_data_RREADY => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_RREADY,
        m_axi_sparse_data_RDATA => ap_const_lv256_lc_1,
        m_axi_sparse_data_RLAST => ap_const_logic_0,
        m_axi_sparse_data_RID => ap_const_lv1_0,
        m_axi_sparse_data_RFIFONUM => ap_const_lv9_0,
        m_axi_sparse_data_RUSER => ap_const_lv1_0,
        m_axi_sparse_data_RRESP => ap_const_lv2_0,
        m_axi_sparse_data_BVALID => sparse_data_BVALID,
        m_axi_sparse_data_BREADY => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_m_axi_sparse_data_BREADY,
        m_axi_sparse_data_BRESP => sparse_data_BRESP,
        m_axi_sparse_data_BID => sparse_data_BID,
        m_axi_sparse_data_BUSER => sparse_data_BUSER,
        outputs_dout => outputs_c_dout,
        outputs_num_data_valid => outputs_c_num_data_valid,
        outputs_fifo_cap => outputs_c_fifo_cap,
        outputs_empty_n => outputs_c_empty_n,
        outputs_read => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_outputs_read,
        output_data_addr3_dout => output_data_addr3_c_dout,
        output_data_addr3_num_data_valid => output_data_addr3_c_num_data_valid,
        output_data_addr3_fifo_cap => output_data_addr3_c_fifo_cap,
        output_data_addr3_empty_n => output_data_addr3_c_empty_n,
        output_data_addr3_read => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_output_data_addr3_read,
        ROWS_dout => am_ROWS_c_dout,
        ROWS_num_data_valid => am_ROWS_c_num_data_valid,
        ROWS_fifo_cap => am_ROWS_c_fifo_cap,
        ROWS_empty_n => am_ROWS_c_empty_n,
        ROWS_read => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ROWS_read,
        COLS_dout => fm_COLS_c_dout,
        COLS_num_data_valid => fm_COLS_c_num_data_valid,
        COLS_fifo_cap => fm_COLS_c_fifo_cap,
        COLS_empty_n => fm_COLS_c_empty_n,
        COLS_read => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_COLS_read,
        sparse_flag => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_sparse_flag,
        sparse_flag_ap_vld => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_sparse_flag_ap_vld);

    output_data_addr3_c_U : component sparse_fifo_w32_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_output_data_addr3_c_din,
        if_full_n => output_data_addr3_c_full_n,
        if_write => entry_proc_U0_output_data_addr3_c_write,
        if_dout => output_data_addr3_c_dout,
        if_num_data_valid => output_data_addr3_c_num_data_valid,
        if_fifo_cap => output_data_addr3_c_fifo_cap,
        if_empty_n => output_data_addr3_c_empty_n,
        if_read => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_output_data_addr3_read);

    outputs_c_U : component sparse_fifo_w64_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_outputs_c_din,
        if_full_n => outputs_c_full_n,
        if_write => entry_proc_U0_outputs_c_write,
        if_dout => outputs_c_dout,
        if_num_data_valid => outputs_c_num_data_valid,
        if_fifo_cap => outputs_c_fifo_cap,
        if_empty_n => outputs_c_empty_n,
        if_read => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_outputs_read);

    am_ROWS_c9_channel_U : component sparse_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_ap_uint_256_ap_int_8_32u_U0_ap_return_0,
        if_full_n => am_ROWS_c9_channel_full_n,
        if_write => ap_channel_done_am_ROWS_c9_channel,
        if_dout => am_ROWS_c9_channel_dout,
        if_num_data_valid => am_ROWS_c9_channel_num_data_valid,
        if_fifo_cap => am_ROWS_c9_channel_fifo_cap,
        if_empty_n => am_ROWS_c9_channel_empty_n,
        if_read => mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ap_ready);

    fm_COLS_c10_channel_U : component sparse_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_ap_uint_256_ap_int_8_32u_U0_ap_return_1,
        if_full_n => fm_COLS_c10_channel_full_n,
        if_write => ap_channel_done_fm_COLS_c10_channel,
        if_dout => fm_COLS_c10_channel_dout,
        if_num_data_valid => fm_COLS_c10_channel_num_data_valid,
        if_fifo_cap => fm_COLS_c10_channel_fifo_cap,
        if_empty_n => fm_COLS_c10_channel_empty_n,
        if_read => mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ap_ready);

    data_out_U : component sparse_fifo_w256_d64_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_data_out1_din,
        if_full_n => data_out_full_n,
        if_write => mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_data_out1_write,
        if_dout => data_out_dout,
        if_num_data_valid => data_out_num_data_valid,
        if_fifo_cap => data_out_fifo_cap,
        if_empty_n => data_out_empty_n,
        if_read => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_data_out1_read);

    am_ROWS_c_U : component sparse_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_am_ROWS_c_din,
        if_full_n => am_ROWS_c_full_n,
        if_write => mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_am_ROWS_c_write,
        if_dout => am_ROWS_c_dout,
        if_num_data_valid => am_ROWS_c_num_data_valid,
        if_fifo_cap => am_ROWS_c_fifo_cap,
        if_empty_n => am_ROWS_c_empty_n,
        if_read => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ROWS_read);

    fm_COLS_c_U : component sparse_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_fm_COLS_c_din,
        if_full_n => fm_COLS_c_full_n,
        if_write => mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_fm_COLS_c_write,
        if_dout => fm_COLS_c_dout,
        if_num_data_valid => fm_COLS_c_num_data_valid,
        if_fifo_cap => fm_COLS_c_fifo_cap,
        if_empty_n => fm_COLS_c_empty_n,
        if_read => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_COLS_read);

    start_for_store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_U : component sparse_start_for_store_ap_uint_256_ap_int_8_ap_int_8_32u_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_din,
        if_full_n => start_for_store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_full_n,
        if_write => entry_proc_U0_start_write,
        if_dout => start_for_store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_dout,
        if_empty_n => start_for_store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_empty_n,
        if_read => store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ap_ready);





    ap_sync_reg_channel_write_am_ROWS_c9_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_am_ROWS_c9_channel <= ap_const_logic_0;
            else
                if (((load_ap_uint_256_ap_int_8_32u_U0_ap_done and load_ap_uint_256_ap_int_8_32u_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_am_ROWS_c9_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_am_ROWS_c9_channel <= ap_sync_channel_write_am_ROWS_c9_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_count_ram_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_count_ram <= ap_const_logic_0;
            else
                if (((load_ap_uint_256_ap_int_8_32u_U0_ap_done and load_ap_uint_256_ap_int_8_32u_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_count_ram <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_count_ram <= ap_sync_channel_write_count_ram;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_fm_COLS_c10_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_fm_COLS_c10_channel <= ap_const_logic_0;
            else
                if (((load_ap_uint_256_ap_int_8_32u_U0_ap_done and load_ap_uint_256_ap_int_8_32u_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_fm_COLS_c10_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_fm_COLS_c10_channel <= ap_sync_channel_write_fm_COLS_c10_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_fm_ram_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_fm_ram_V <= ap_const_logic_0;
            else
                if (((load_ap_uint_256_ap_int_8_32u_U0_ap_done and load_ap_uint_256_ap_int_8_32u_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_fm_ram_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_fm_ram_V <= ap_sync_channel_write_fm_ram_V;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_idx_ram_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_idx_ram <= ap_const_logic_0;
            else
                if (((load_ap_uint_256_ap_int_8_32u_U0_ap_done and load_ap_uint_256_ap_int_8_32u_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_idx_ram <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_idx_ram <= ap_sync_channel_write_idx_ram;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_entry_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_load_ap_uint_256_ap_int_8_32u_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_load_ap_uint_256_ap_int_8_32u_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_load_ap_uint_256_ap_int_8_32u_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_load_ap_uint_256_ap_int_8_32u_U0_ap_ready <= ap_sync_load_ap_uint_256_ap_int_8_32u_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    ap_channel_done_am_ROWS_c9_channel <= (load_ap_uint_256_ap_int_8_32u_U0_ap_done and (ap_sync_reg_channel_write_am_ROWS_c9_channel xor ap_const_logic_1));
    ap_channel_done_count_ram <= (load_ap_uint_256_ap_int_8_32u_U0_ap_done and (ap_sync_reg_channel_write_count_ram xor ap_const_logic_1));
    ap_channel_done_fm_COLS_c10_channel <= (load_ap_uint_256_ap_int_8_32u_U0_ap_done and (ap_sync_reg_channel_write_fm_COLS_c10_channel xor ap_const_logic_1));
    ap_channel_done_fm_ram_V <= (load_ap_uint_256_ap_int_8_32u_U0_ap_done and (ap_sync_reg_channel_write_fm_ram_V xor ap_const_logic_1));
    ap_channel_done_idx_ram <= (load_ap_uint_256_ap_int_8_32u_U0_ap_done and (ap_sync_reg_channel_write_idx_ram xor ap_const_logic_1));
    ap_done <= store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ap_done;
    ap_idle <= (store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ap_idle and mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ap_idle and load_ap_uint_256_ap_int_8_32u_U0_ap_idle and (fm_COLS_c10_channel_empty_n xor ap_const_logic_1) and (fm_ram_V_t_empty_n xor ap_const_logic_1) and (count_ram_t_empty_n xor ap_const_logic_1) and (idx_ram_t_empty_n xor ap_const_logic_1) and (ap_const_logic_1 xor am_ROWS_c9_channel_empty_n) and entry_proc_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_channel_write_am_ROWS_c9_channel <= ((ap_channel_done_am_ROWS_c9_channel and am_ROWS_c9_channel_full_n) or ap_sync_reg_channel_write_am_ROWS_c9_channel);
    ap_sync_channel_write_count_ram <= ((load_ap_uint_256_ap_int_8_32u_U0_count_ram_full_n and ap_channel_done_count_ram) or ap_sync_reg_channel_write_count_ram);
    ap_sync_channel_write_fm_COLS_c10_channel <= ((fm_COLS_c10_channel_full_n and ap_channel_done_fm_COLS_c10_channel) or ap_sync_reg_channel_write_fm_COLS_c10_channel);
    ap_sync_channel_write_fm_ram_V <= ((load_ap_uint_256_ap_int_8_32u_U0_fm_ram_full_n and ap_channel_done_fm_ram_V) or ap_sync_reg_channel_write_fm_ram_V);
    ap_sync_channel_write_idx_ram <= ((load_ap_uint_256_ap_int_8_32u_U0_idx_ram_full_n and ap_channel_done_idx_ram) or ap_sync_reg_channel_write_idx_ram);
    ap_sync_entry_proc_U0_ap_ready <= (entry_proc_U0_ap_ready or ap_sync_reg_entry_proc_U0_ap_ready);
    ap_sync_load_ap_uint_256_ap_int_8_32u_U0_ap_ready <= (load_ap_uint_256_ap_int_8_32u_U0_ap_ready or ap_sync_reg_load_ap_uint_256_ap_int_8_32u_U0_ap_ready);
    ap_sync_ready <= (ap_sync_load_ap_uint_256_ap_int_8_32u_U0_ap_ready and ap_sync_entry_proc_U0_ap_ready);
    entry_proc_U0_ap_continue <= ap_const_logic_1;
    entry_proc_U0_ap_start <= ((ap_sync_reg_entry_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    load_ap_uint_256_ap_int_8_32u_U0_ap_continue <= (ap_sync_channel_write_idx_ram and ap_sync_channel_write_fm_ram_V and ap_sync_channel_write_fm_COLS_c10_channel and ap_sync_channel_write_count_ram and ap_sync_channel_write_am_ROWS_c9_channel);
    load_ap_uint_256_ap_int_8_32u_U0_ap_start <= ((ap_sync_reg_load_ap_uint_256_ap_int_8_32u_U0_ap_ready xor ap_const_logic_1) and ap_start);
    load_ap_uint_256_ap_int_8_32u_U0_count_ram_full_n <= count_ram_i_full_n;
    load_ap_uint_256_ap_int_8_32u_U0_fm_ram_full_n <= fm_ram_V_i_full_n;
    load_ap_uint_256_ap_int_8_32u_U0_idx_ram_full_n <= idx_ram_i_full_n;
    mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ap_continue <= ap_const_logic_1;
    mul_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ap_start <= (idx_ram_t_empty_n and fm_ram_V_t_empty_n and fm_COLS_c10_channel_empty_n and count_ram_t_empty_n and am_ROWS_c9_channel_empty_n);
    sparse_data_BID <= ap_const_lv1_0;
    sparse_data_BRESP <= ap_const_lv2_0;
    sparse_data_BUSER <= ap_const_lv1_0;
    sparse_data_RID <= ap_const_lv1_0;
    sparse_data_RLAST <= ap_const_logic_0;
    sparse_data_RRESP <= ap_const_lv2_0;
    sparse_data_RUSER <= ap_const_lv1_0;
    sparse_flag <= store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_sparse_flag(0);
    start_for_store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_din <= (0=>ap_const_logic_1, others=>'-');
    store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ap_continue <= ap_const_logic_1;
    store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_ap_start <= start_for_store_ap_uint_256_ap_int_8_ap_int_8_32u_U0_empty_n;
end behav;
