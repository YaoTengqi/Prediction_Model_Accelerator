-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sparse_quant_ap_uint_256_ap_int_32_ap_int_8_32u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_out1_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
    data_out1_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
    data_out1_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
    data_out1_empty_n : IN STD_LOGIC;
    data_out1_read : OUT STD_LOGIC;
    fm_ROWS_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    fm_ROWS_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    fm_ROWS_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    fm_ROWS_empty_n : IN STD_LOGIC;
    fm_ROWS_read : OUT STD_LOGIC;
    fm_COLS_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    fm_COLS_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    fm_COLS_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    fm_COLS_empty_n : IN STD_LOGIC;
    fm_COLS_read : OUT STD_LOGIC;
    quant_out2_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    quant_out2_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    quant_out2_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    quant_out2_full_n : IN STD_LOGIC;
    quant_out2_write : OUT STD_LOGIC;
    quant_shift_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    quant_shift_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    quant_shift_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    quant_shift_empty_n : IN STD_LOGIC;
    quant_shift_read : OUT STD_LOGIC;
    quant_mul_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    quant_mul_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    quant_mul_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    quant_mul_empty_n : IN STD_LOGIC;
    quant_mul_read : OUT STD_LOGIC;
    fm_ROWS_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    fm_ROWS_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    fm_ROWS_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    fm_ROWS_c_full_n : IN STD_LOGIC;
    fm_ROWS_c_write : OUT STD_LOGIC;
    fm_COLS_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    fm_COLS_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    fm_COLS_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    fm_COLS_c_full_n : IN STD_LOGIC;
    fm_COLS_c_write : OUT STD_LOGIC );
end;


architecture behav of sparse_quant_ap_uint_256_ap_int_32_ap_int_8_32u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv33_1FFFFFFFF : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fm_ROWS_blk_n : STD_LOGIC;
    signal fm_COLS_blk_n : STD_LOGIC;
    signal quant_shift_blk_n : STD_LOGIC;
    signal quant_mul_blk_n : STD_LOGIC;
    signal fm_ROWS_c_blk_n : STD_LOGIC;
    signal fm_COLS_c_blk_n : STD_LOGIC;
    signal quant_mul_read_reg_184 : STD_LOGIC_VECTOR (31 downto 0);
    signal div_cast_reg_189 : STD_LOGIC_VECTOR (26 downto 0);
    signal left_shift_fu_136_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal left_shift_reg_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal total_right_shift_fu_150_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal total_right_shift_reg_200 : STD_LOGIC_VECTOR (31 downto 0);
    signal pos_rounding_value_fu_172_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal pos_rounding_value_reg_205 : STD_LOGIC_VECTOR (63 downto 0);
    signal cmp12_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp12_reg_210 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_ap_start : STD_LOGIC;
    signal grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_ap_done : STD_LOGIC;
    signal grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_ap_idle : STD_LOGIC;
    signal grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_ap_ready : STD_LOGIC;
    signal grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_data_out1_read : STD_LOGIC;
    signal grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_quant_out2_din : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_quant_out2_write : STD_LOGIC;
    signal grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal mul_fu_108_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmp6_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_fu_130_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal quant_shift_op_fu_144_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal total_right_shift_cast_fu_158_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub15_fu_162_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub15_cast_fu_168_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sparse_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_out1_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
        data_out1_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
        data_out1_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
        data_out1_empty_n : IN STD_LOGIC;
        data_out1_read : OUT STD_LOGIC;
        quant_out2_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        quant_out2_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        quant_out2_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        quant_out2_full_n : IN STD_LOGIC;
        quant_out2_write : OUT STD_LOGIC;
        div_cast : IN STD_LOGIC_VECTOR (26 downto 0);
        sh_prom : IN STD_LOGIC_VECTOR (31 downto 0);
        cmp12 : IN STD_LOGIC_VECTOR (0 downto 0);
        conv : IN STD_LOGIC_VECTOR (31 downto 0);
        pos_rounding_value : IN STD_LOGIC_VECTOR (63 downto 0);
        sh_prom18 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sparse_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94 : component sparse_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_ap_start,
        ap_done => grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_ap_done,
        ap_idle => grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_ap_idle,
        ap_ready => grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_ap_ready,
        data_out1_dout => data_out1_dout,
        data_out1_num_data_valid => ap_const_lv7_0,
        data_out1_fifo_cap => ap_const_lv7_0,
        data_out1_empty_n => data_out1_empty_n,
        data_out1_read => grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_data_out1_read,
        quant_out2_din => grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_quant_out2_din,
        quant_out2_num_data_valid => ap_const_lv2_0,
        quant_out2_fifo_cap => ap_const_lv2_0,
        quant_out2_full_n => quant_out2_full_n,
        quant_out2_write => grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_quant_out2_write,
        div_cast => div_cast_reg_189,
        sh_prom => left_shift_reg_194,
        cmp12 => cmp12_reg_210,
        conv => quant_mul_read_reg_184,
        pos_rounding_value => pos_rounding_value_reg_205,
        sh_prom18 => total_right_shift_reg_200);

    mul_32s_32s_32_1_1_U80 : component sparse_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => fm_COLS_dout,
        din1 => fm_ROWS_dout,
        dout => mul_fu_108_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_ap_done = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_ap_ready = ap_const_logic_1)) then 
                    grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                cmp12_reg_210 <= cmp12_fu_178_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                div_cast_reg_189 <= mul_fu_108_p2(31 downto 5);
                left_shift_reg_194 <= left_shift_fu_136_p3;
                pos_rounding_value_reg_205 <= pos_rounding_value_fu_172_p2;
                quant_mul_read_reg_184 <= quant_mul_dout;
                total_right_shift_reg_200 <= total_right_shift_fu_150_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, fm_ROWS_empty_n, fm_COLS_empty_n, quant_shift_empty_n, quant_mul_empty_n, fm_ROWS_c_full_n, fm_COLS_c_full_n, grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (fm_COLS_c_full_n = ap_const_logic_0) or (fm_ROWS_c_full_n = ap_const_logic_0) or (quant_mul_empty_n = ap_const_logic_0) or (quant_shift_empty_n = ap_const_logic_0) or (fm_COLS_empty_n = ap_const_logic_0) or (fm_ROWS_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, fm_ROWS_empty_n, fm_COLS_empty_n, quant_shift_empty_n, quant_mul_empty_n, fm_ROWS_c_full_n, fm_COLS_c_full_n)
    begin
        if (((ap_start = ap_const_logic_0) or (fm_COLS_c_full_n = ap_const_logic_0) or (fm_ROWS_c_full_n = ap_const_logic_0) or (quant_mul_empty_n = ap_const_logic_0) or (quant_shift_empty_n = ap_const_logic_0) or (fm_COLS_empty_n = ap_const_logic_0) or (fm_ROWS_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_ap_done)
    begin
        if ((grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, fm_ROWS_empty_n, fm_COLS_empty_n, quant_shift_empty_n, quant_mul_empty_n, fm_ROWS_c_full_n, fm_COLS_c_full_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (fm_COLS_c_full_n = ap_const_logic_0) or (fm_ROWS_c_full_n = ap_const_logic_0) or (quant_mul_empty_n = ap_const_logic_0) or (quant_shift_empty_n = ap_const_logic_0) or (fm_COLS_empty_n = ap_const_logic_0) or (fm_ROWS_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_ap_done, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_ap_done, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cmp12_fu_178_p2 <= "1" when (signed(left_shift_reg_194) > signed(ap_const_lv32_0)) else "0";
    cmp6_fu_124_p2 <= "1" when (signed(quant_shift_dout) > signed(ap_const_lv32_0)) else "0";

    data_out1_read_assign_proc : process(grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_data_out1_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            data_out1_read <= grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_data_out1_read;
        else 
            data_out1_read <= ap_const_logic_0;
        end if; 
    end process;


    fm_COLS_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, fm_COLS_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            fm_COLS_blk_n <= fm_COLS_empty_n;
        else 
            fm_COLS_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fm_COLS_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, fm_COLS_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            fm_COLS_c_blk_n <= fm_COLS_c_full_n;
        else 
            fm_COLS_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fm_COLS_c_din <= fm_COLS_dout;

    fm_COLS_c_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, fm_ROWS_empty_n, fm_COLS_empty_n, quant_shift_empty_n, quant_mul_empty_n, fm_ROWS_c_full_n, fm_COLS_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (fm_COLS_c_full_n = ap_const_logic_0) or (fm_ROWS_c_full_n = ap_const_logic_0) or (quant_mul_empty_n = ap_const_logic_0) or (quant_shift_empty_n = ap_const_logic_0) or (fm_COLS_empty_n = ap_const_logic_0) or (fm_ROWS_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            fm_COLS_c_write <= ap_const_logic_1;
        else 
            fm_COLS_c_write <= ap_const_logic_0;
        end if; 
    end process;


    fm_COLS_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, fm_ROWS_empty_n, fm_COLS_empty_n, quant_shift_empty_n, quant_mul_empty_n, fm_ROWS_c_full_n, fm_COLS_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (fm_COLS_c_full_n = ap_const_logic_0) or (fm_ROWS_c_full_n = ap_const_logic_0) or (quant_mul_empty_n = ap_const_logic_0) or (quant_shift_empty_n = ap_const_logic_0) or (fm_COLS_empty_n = ap_const_logic_0) or (fm_ROWS_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            fm_COLS_read <= ap_const_logic_1;
        else 
            fm_COLS_read <= ap_const_logic_0;
        end if; 
    end process;


    fm_ROWS_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, fm_ROWS_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            fm_ROWS_blk_n <= fm_ROWS_empty_n;
        else 
            fm_ROWS_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fm_ROWS_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, fm_ROWS_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            fm_ROWS_c_blk_n <= fm_ROWS_c_full_n;
        else 
            fm_ROWS_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fm_ROWS_c_din <= fm_ROWS_dout;

    fm_ROWS_c_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, fm_ROWS_empty_n, fm_COLS_empty_n, quant_shift_empty_n, quant_mul_empty_n, fm_ROWS_c_full_n, fm_COLS_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (fm_COLS_c_full_n = ap_const_logic_0) or (fm_ROWS_c_full_n = ap_const_logic_0) or (quant_mul_empty_n = ap_const_logic_0) or (quant_shift_empty_n = ap_const_logic_0) or (fm_COLS_empty_n = ap_const_logic_0) or (fm_ROWS_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            fm_ROWS_c_write <= ap_const_logic_1;
        else 
            fm_ROWS_c_write <= ap_const_logic_0;
        end if; 
    end process;


    fm_ROWS_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, fm_ROWS_empty_n, fm_COLS_empty_n, quant_shift_empty_n, quant_mul_empty_n, fm_ROWS_c_full_n, fm_COLS_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (fm_COLS_c_full_n = ap_const_logic_0) or (fm_ROWS_c_full_n = ap_const_logic_0) or (quant_mul_empty_n = ap_const_logic_0) or (quant_shift_empty_n = ap_const_logic_0) or (fm_COLS_empty_n = ap_const_logic_0) or (fm_ROWS_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            fm_ROWS_read <= ap_const_logic_1;
        else 
            fm_ROWS_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_ap_start <= grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_ap_start_reg;
    left_shift_fu_136_p3 <= 
        ap_const_lv32_0 when (cmp6_fu_124_p2(0) = '1') else 
        sub_fu_130_p2;
    pos_rounding_value_fu_172_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_1),to_integer(unsigned('0' & sub15_cast_fu_168_p1(31-1 downto 0)))));

    quant_mul_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, quant_mul_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            quant_mul_blk_n <= quant_mul_empty_n;
        else 
            quant_mul_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    quant_mul_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, fm_ROWS_empty_n, fm_COLS_empty_n, quant_shift_empty_n, quant_mul_empty_n, fm_ROWS_c_full_n, fm_COLS_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (fm_COLS_c_full_n = ap_const_logic_0) or (fm_ROWS_c_full_n = ap_const_logic_0) or (quant_mul_empty_n = ap_const_logic_0) or (quant_shift_empty_n = ap_const_logic_0) or (fm_COLS_empty_n = ap_const_logic_0) or (fm_ROWS_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            quant_mul_read <= ap_const_logic_1;
        else 
            quant_mul_read <= ap_const_logic_0;
        end if; 
    end process;

    quant_out2_din <= grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_quant_out2_din;

    quant_out2_write_assign_proc : process(grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_quant_out2_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            quant_out2_write <= grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_113_1_fu_94_quant_out2_write;
        else 
            quant_out2_write <= ap_const_logic_0;
        end if; 
    end process;


    quant_shift_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, quant_shift_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            quant_shift_blk_n <= quant_shift_empty_n;
        else 
            quant_shift_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    quant_shift_op_fu_144_p2 <= std_logic_vector(unsigned(quant_shift_dout) + unsigned(ap_const_lv32_1F));

    quant_shift_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, fm_ROWS_empty_n, fm_COLS_empty_n, quant_shift_empty_n, quant_mul_empty_n, fm_ROWS_c_full_n, fm_COLS_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (fm_COLS_c_full_n = ap_const_logic_0) or (fm_ROWS_c_full_n = ap_const_logic_0) or (quant_mul_empty_n = ap_const_logic_0) or (quant_shift_empty_n = ap_const_logic_0) or (fm_COLS_empty_n = ap_const_logic_0) or (fm_ROWS_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            quant_shift_read <= ap_const_logic_1;
        else 
            quant_shift_read <= ap_const_logic_0;
        end if; 
    end process;

        sub15_cast_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub15_fu_162_p2),64));

    sub15_fu_162_p2 <= std_logic_vector(signed(total_right_shift_cast_fu_158_p1) + signed(ap_const_lv33_1FFFFFFFF));
    sub_fu_130_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(quant_shift_dout));
        total_right_shift_cast_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(total_right_shift_fu_150_p3),33));

    total_right_shift_fu_150_p3 <= 
        quant_shift_op_fu_144_p2 when (cmp6_fu_124_p2(0) = '1') else 
        ap_const_lv32_1F;
end behav;
