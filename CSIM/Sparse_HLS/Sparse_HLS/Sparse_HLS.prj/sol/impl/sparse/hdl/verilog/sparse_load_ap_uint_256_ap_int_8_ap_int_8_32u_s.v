// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sparse_load_ap_uint_256_ap_int_8_ap_int_8_32u_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        am_ROWS,
        am_COLS,
        fm_ROWS,
        fm_COLS,
        m_axi_sparse_data_AWVALID,
        m_axi_sparse_data_AWREADY,
        m_axi_sparse_data_AWADDR,
        m_axi_sparse_data_AWID,
        m_axi_sparse_data_AWLEN,
        m_axi_sparse_data_AWSIZE,
        m_axi_sparse_data_AWBURST,
        m_axi_sparse_data_AWLOCK,
        m_axi_sparse_data_AWCACHE,
        m_axi_sparse_data_AWPROT,
        m_axi_sparse_data_AWQOS,
        m_axi_sparse_data_AWREGION,
        m_axi_sparse_data_AWUSER,
        m_axi_sparse_data_WVALID,
        m_axi_sparse_data_WREADY,
        m_axi_sparse_data_WDATA,
        m_axi_sparse_data_WSTRB,
        m_axi_sparse_data_WLAST,
        m_axi_sparse_data_WID,
        m_axi_sparse_data_WUSER,
        m_axi_sparse_data_ARVALID,
        m_axi_sparse_data_ARREADY,
        m_axi_sparse_data_ARADDR,
        m_axi_sparse_data_ARID,
        m_axi_sparse_data_ARLEN,
        m_axi_sparse_data_ARSIZE,
        m_axi_sparse_data_ARBURST,
        m_axi_sparse_data_ARLOCK,
        m_axi_sparse_data_ARCACHE,
        m_axi_sparse_data_ARPROT,
        m_axi_sparse_data_ARQOS,
        m_axi_sparse_data_ARREGION,
        m_axi_sparse_data_ARUSER,
        m_axi_sparse_data_RVALID,
        m_axi_sparse_data_RREADY,
        m_axi_sparse_data_RDATA,
        m_axi_sparse_data_RLAST,
        m_axi_sparse_data_RID,
        m_axi_sparse_data_RFIFONUM,
        m_axi_sparse_data_RUSER,
        m_axi_sparse_data_RRESP,
        m_axi_sparse_data_BVALID,
        m_axi_sparse_data_BREADY,
        m_axi_sparse_data_BRESP,
        m_axi_sparse_data_BID,
        m_axi_sparse_data_BUSER,
        inputs,
        idx_stream_din,
        idx_stream_num_data_valid,
        idx_stream_fifo_cap,
        idx_stream_full_n,
        idx_stream_write,
        count_stream_din,
        count_stream_num_data_valid,
        count_stream_fifo_cap,
        count_stream_full_n,
        count_stream_write,
        fm_stream_din,
        fm_stream_num_data_valid,
        fm_stream_fifo_cap,
        fm_stream_full_n,
        fm_stream_write,
        p_read,
        p_read1,
        am_ROWS_c_din,
        am_ROWS_c_num_data_valid,
        am_ROWS_c_fifo_cap,
        am_ROWS_c_full_n,
        am_ROWS_c_write,
        fm_ROWS_c14_din,
        fm_ROWS_c14_num_data_valid,
        fm_ROWS_c14_fifo_cap,
        fm_ROWS_c14_full_n,
        fm_ROWS_c14_write,
        fm_COLS_c16_din,
        fm_COLS_c16_num_data_valid,
        fm_COLS_c16_fifo_cap,
        fm_COLS_c16_full_n,
        fm_COLS_c16_write
);

parameter    ap_ST_fsm_state1 = 93'd1;
parameter    ap_ST_fsm_state2 = 93'd2;
parameter    ap_ST_fsm_state3 = 93'd4;
parameter    ap_ST_fsm_state4 = 93'd8;
parameter    ap_ST_fsm_state5 = 93'd16;
parameter    ap_ST_fsm_state6 = 93'd32;
parameter    ap_ST_fsm_state7 = 93'd64;
parameter    ap_ST_fsm_state8 = 93'd128;
parameter    ap_ST_fsm_state9 = 93'd256;
parameter    ap_ST_fsm_state10 = 93'd512;
parameter    ap_ST_fsm_state11 = 93'd1024;
parameter    ap_ST_fsm_state12 = 93'd2048;
parameter    ap_ST_fsm_state13 = 93'd4096;
parameter    ap_ST_fsm_state14 = 93'd8192;
parameter    ap_ST_fsm_state15 = 93'd16384;
parameter    ap_ST_fsm_state16 = 93'd32768;
parameter    ap_ST_fsm_state17 = 93'd65536;
parameter    ap_ST_fsm_state18 = 93'd131072;
parameter    ap_ST_fsm_state19 = 93'd262144;
parameter    ap_ST_fsm_state20 = 93'd524288;
parameter    ap_ST_fsm_state21 = 93'd1048576;
parameter    ap_ST_fsm_state22 = 93'd2097152;
parameter    ap_ST_fsm_state23 = 93'd4194304;
parameter    ap_ST_fsm_state24 = 93'd8388608;
parameter    ap_ST_fsm_state25 = 93'd16777216;
parameter    ap_ST_fsm_state26 = 93'd33554432;
parameter    ap_ST_fsm_state27 = 93'd67108864;
parameter    ap_ST_fsm_state28 = 93'd134217728;
parameter    ap_ST_fsm_state29 = 93'd268435456;
parameter    ap_ST_fsm_state30 = 93'd536870912;
parameter    ap_ST_fsm_state31 = 93'd1073741824;
parameter    ap_ST_fsm_state32 = 93'd2147483648;
parameter    ap_ST_fsm_state33 = 93'd4294967296;
parameter    ap_ST_fsm_state34 = 93'd8589934592;
parameter    ap_ST_fsm_state35 = 93'd17179869184;
parameter    ap_ST_fsm_state36 = 93'd34359738368;
parameter    ap_ST_fsm_state37 = 93'd68719476736;
parameter    ap_ST_fsm_state38 = 93'd137438953472;
parameter    ap_ST_fsm_state39 = 93'd274877906944;
parameter    ap_ST_fsm_state40 = 93'd549755813888;
parameter    ap_ST_fsm_state41 = 93'd1099511627776;
parameter    ap_ST_fsm_state42 = 93'd2199023255552;
parameter    ap_ST_fsm_state43 = 93'd4398046511104;
parameter    ap_ST_fsm_state44 = 93'd8796093022208;
parameter    ap_ST_fsm_state45 = 93'd17592186044416;
parameter    ap_ST_fsm_state46 = 93'd35184372088832;
parameter    ap_ST_fsm_state47 = 93'd70368744177664;
parameter    ap_ST_fsm_state48 = 93'd140737488355328;
parameter    ap_ST_fsm_state49 = 93'd281474976710656;
parameter    ap_ST_fsm_state50 = 93'd562949953421312;
parameter    ap_ST_fsm_state51 = 93'd1125899906842624;
parameter    ap_ST_fsm_state52 = 93'd2251799813685248;
parameter    ap_ST_fsm_state53 = 93'd4503599627370496;
parameter    ap_ST_fsm_state54 = 93'd9007199254740992;
parameter    ap_ST_fsm_state55 = 93'd18014398509481984;
parameter    ap_ST_fsm_state56 = 93'd36028797018963968;
parameter    ap_ST_fsm_state57 = 93'd72057594037927936;
parameter    ap_ST_fsm_state58 = 93'd144115188075855872;
parameter    ap_ST_fsm_state59 = 93'd288230376151711744;
parameter    ap_ST_fsm_state60 = 93'd576460752303423488;
parameter    ap_ST_fsm_state61 = 93'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 93'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 93'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 93'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 93'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 93'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 93'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 93'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 93'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 93'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 93'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 93'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 93'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 93'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 93'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 93'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 93'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 93'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 93'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 93'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 93'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 93'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 93'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 93'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 93'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 93'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 93'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 93'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 93'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 93'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 93'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 93'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 93'd4951760157141521099596496896;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] am_ROWS;
input  [31:0] am_COLS;
input  [31:0] fm_ROWS;
input  [31:0] fm_COLS;
output   m_axi_sparse_data_AWVALID;
input   m_axi_sparse_data_AWREADY;
output  [63:0] m_axi_sparse_data_AWADDR;
output  [0:0] m_axi_sparse_data_AWID;
output  [31:0] m_axi_sparse_data_AWLEN;
output  [2:0] m_axi_sparse_data_AWSIZE;
output  [1:0] m_axi_sparse_data_AWBURST;
output  [1:0] m_axi_sparse_data_AWLOCK;
output  [3:0] m_axi_sparse_data_AWCACHE;
output  [2:0] m_axi_sparse_data_AWPROT;
output  [3:0] m_axi_sparse_data_AWQOS;
output  [3:0] m_axi_sparse_data_AWREGION;
output  [0:0] m_axi_sparse_data_AWUSER;
output   m_axi_sparse_data_WVALID;
input   m_axi_sparse_data_WREADY;
output  [255:0] m_axi_sparse_data_WDATA;
output  [31:0] m_axi_sparse_data_WSTRB;
output   m_axi_sparse_data_WLAST;
output  [0:0] m_axi_sparse_data_WID;
output  [0:0] m_axi_sparse_data_WUSER;
output   m_axi_sparse_data_ARVALID;
input   m_axi_sparse_data_ARREADY;
output  [63:0] m_axi_sparse_data_ARADDR;
output  [0:0] m_axi_sparse_data_ARID;
output  [31:0] m_axi_sparse_data_ARLEN;
output  [2:0] m_axi_sparse_data_ARSIZE;
output  [1:0] m_axi_sparse_data_ARBURST;
output  [1:0] m_axi_sparse_data_ARLOCK;
output  [3:0] m_axi_sparse_data_ARCACHE;
output  [2:0] m_axi_sparse_data_ARPROT;
output  [3:0] m_axi_sparse_data_ARQOS;
output  [3:0] m_axi_sparse_data_ARREGION;
output  [0:0] m_axi_sparse_data_ARUSER;
input   m_axi_sparse_data_RVALID;
output   m_axi_sparse_data_RREADY;
input  [255:0] m_axi_sparse_data_RDATA;
input   m_axi_sparse_data_RLAST;
input  [0:0] m_axi_sparse_data_RID;
input  [8:0] m_axi_sparse_data_RFIFONUM;
input  [0:0] m_axi_sparse_data_RUSER;
input  [1:0] m_axi_sparse_data_RRESP;
input   m_axi_sparse_data_BVALID;
output   m_axi_sparse_data_BREADY;
input  [1:0] m_axi_sparse_data_BRESP;
input  [0:0] m_axi_sparse_data_BID;
input  [0:0] m_axi_sparse_data_BUSER;
input  [63:0] inputs;
output  [7:0] idx_stream_din;
input  [7:0] idx_stream_num_data_valid;
input  [7:0] idx_stream_fifo_cap;
input   idx_stream_full_n;
output   idx_stream_write;
output  [7:0] count_stream_din;
input  [6:0] count_stream_num_data_valid;
input  [6:0] count_stream_fifo_cap;
input   count_stream_full_n;
output   count_stream_write;
output  [255:0] fm_stream_din;
input  [7:0] fm_stream_num_data_valid;
input  [7:0] fm_stream_fifo_cap;
input   fm_stream_full_n;
output   fm_stream_write;
input  [26:0] p_read;
input  [26:0] p_read1;
output  [31:0] am_ROWS_c_din;
input  [1:0] am_ROWS_c_num_data_valid;
input  [1:0] am_ROWS_c_fifo_cap;
input   am_ROWS_c_full_n;
output   am_ROWS_c_write;
output  [31:0] fm_ROWS_c14_din;
input  [2:0] fm_ROWS_c14_num_data_valid;
input  [2:0] fm_ROWS_c14_fifo_cap;
input   fm_ROWS_c14_full_n;
output   fm_ROWS_c14_write;
output  [31:0] fm_COLS_c16_din;
input  [1:0] fm_COLS_c16_num_data_valid;
input  [1:0] fm_COLS_c16_fifo_cap;
input   fm_COLS_c16_full_n;
output   fm_COLS_c16_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg m_axi_sparse_data_ARVALID;
reg[63:0] m_axi_sparse_data_ARADDR;
reg[31:0] m_axi_sparse_data_ARLEN;
reg m_axi_sparse_data_RREADY;
reg idx_stream_write;
reg count_stream_write;
reg fm_stream_write;
reg am_ROWS_c_write;
reg fm_ROWS_c14_write;
reg fm_COLS_c16_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [92:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    sparse_data_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    sparse_data_blk_n_R;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state82;
reg    idx_stream_blk_n;
wire    ap_CS_fsm_state91;
reg    count_stream_blk_n;
wire    ap_CS_fsm_state93;
reg    fm_stream_blk_n;
reg    am_ROWS_c_blk_n;
reg    fm_ROWS_c14_blk_n;
reg    fm_COLS_c16_blk_n;
reg   [26:0] fm_loop_num_reg_1287;
reg   [58:0] trunc_ln4_reg_1293;
wire   [31:0] zext_ln21_fu_599_p1;
wire    ap_CS_fsm_state39;
wire   [26:0] am_loop_num_fu_618_p4;
reg   [26:0] am_loop_num_reg_1319;
wire   [31:0] zext_ln22_fu_628_p1;
reg   [31:0] zext_ln22_reg_1324;
wire   [63:0] zext_ln28_1_fu_635_p1;
reg   [63:0] zext_ln28_1_reg_1329;
wire    ap_CS_fsm_state40;
reg   [58:0] trunc_ln5_reg_1344;
wire   [0:0] icmp_ln28_fu_639_p2;
reg   [255:0] sparse_data_addr_read_reg_1349;
wire   [63:0] zext_ln32_1_fu_699_p1;
reg   [63:0] zext_ln32_1_reg_1360;
wire    ap_CS_fsm_state81;
wire   [0:0] icmp_ln36_fu_719_p2;
reg   [0:0] icmp_ln36_reg_1368;
wire   [0:0] icmp_ln32_fu_703_p2;
reg   [255:0] sparse_data_addr_1_read_reg_1386;
wire   [63:0] zext_ln36_fu_737_p1;
reg   [63:0] zext_ln36_reg_1391;
wire    ap_CS_fsm_state84;
wire   [31:0] add_ln49_fu_747_p2;
reg   [31:0] add_ln49_reg_1399;
wire   [0:0] icmp_ln36_1_fu_742_p2;
reg   [26:0] trunc_ln6_reg_1416;
wire   [7:0] l_val_V_fu_767_p1;
reg   [7:0] l_val_V_reg_1421;
wire    ap_CS_fsm_state85;
reg   [7:0] l_val_V_95_reg_1426;
reg   [7:0] l_val_V_96_reg_1431;
reg   [7:0] l_val_V_97_reg_1436;
reg   [7:0] l_val_V_98_reg_1441;
reg   [7:0] l_val_V_99_reg_1446;
reg   [7:0] l_val_V_100_reg_1451;
reg   [7:0] l_val_V_101_reg_1456;
reg   [7:0] l_val_V_102_reg_1461;
reg   [7:0] l_val_V_103_reg_1466;
reg   [7:0] l_val_V_104_reg_1471;
reg   [7:0] l_val_V_105_reg_1476;
reg   [7:0] l_val_V_106_reg_1481;
reg   [7:0] l_val_V_107_reg_1486;
reg   [7:0] l_val_V_108_reg_1491;
reg   [7:0] l_val_V_109_reg_1496;
reg   [7:0] l_val_V_110_reg_1501;
reg   [7:0] l_val_V_111_reg_1506;
reg   [7:0] l_val_V_112_reg_1511;
reg   [7:0] l_val_V_113_reg_1516;
reg   [7:0] l_val_V_114_reg_1521;
reg   [7:0] l_val_V_115_reg_1526;
reg   [7:0] l_val_V_116_reg_1531;
reg   [7:0] l_val_V_117_reg_1536;
reg   [7:0] l_val_V_118_reg_1541;
reg   [7:0] l_val_V_119_reg_1546;
reg   [7:0] l_val_V_120_reg_1551;
reg   [7:0] l_val_V_121_reg_1556;
reg   [7:0] l_val_V_122_reg_1561;
reg   [7:0] l_val_V_123_reg_1566;
reg   [7:0] l_val_V_124_reg_1571;
reg   [7:0] l_val_V_125_reg_1576;
wire   [31:0] add_ln41_fu_1086_p2;
reg   [31:0] add_ln41_reg_1584;
wire    ap_CS_fsm_state86;
wire   [31:0] count_2_fu_1140_p2;
wire   [0:0] icmp_ln41_fu_1081_p2;
wire   [0:0] icmp_ln1023_fu_1134_p2;
wire   [26:0] block_4_fu_1184_p2;
reg   [26:0] block_4_reg_1600;
wire    ap_CS_fsm_state88;
wire   [8:0] mul72_i_fu_1194_p3;
reg   [8:0] mul72_i_reg_1605;
wire   [0:0] icmp_ln52_fu_1179_p2;
wire   [30:0] add_ln54_fu_1217_p2;
reg   [30:0] add_ln54_reg_1613;
wire    ap_CS_fsm_state89;
wire   [0:0] icmp_ln54_fu_1211_p2;
wire   [7:0] idx_ram_q0;
reg   [7:0] col_1_reg_1623;
wire    ap_CS_fsm_state90;
wire   [30:0] add_ln60_fu_1252_p2;
reg   [30:0] add_ln60_reg_1636;
wire    ap_CS_fsm_state92;
wire   [0:0] icmp_ln60_fu_1246_p2;
reg   [5:0] am_ram_V_address0;
reg    am_ram_V_ce0;
reg    am_ram_V_we0;
wire   [255:0] am_ram_V_q0;
reg   [8:0] fm_ram_V_address0;
reg    fm_ram_V_ce0;
reg    fm_ram_V_we0;
wire   [255:0] fm_ram_V_q0;
reg   [6:0] idx_ram_address0;
reg    idx_ram_ce0;
reg    idx_ram_we0;
wire   [7:0] idx_ram_d0;
reg   [4:0] count_ram_address0;
reg    count_ram_ce0;
reg    count_ram_we0;
wire   [7:0] count_ram_d0;
wire   [7:0] count_ram_q0;
reg   [31:0] idx_num_0_lcssa_i_reg_465;
reg   [31:0] count_num_0_lcssa_i_reg_477;
reg   [31:0] col_reg_489;
wire    ap_CS_fsm_state87;
reg   [31:0] count_reg_500;
reg   [31:0] count_3_reg_512;
reg   [30:0] i_2_reg_524;
reg    ap_block_state91;
reg   [30:0] j_1_reg_535;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state83;
wire   [63:0] zext_ln46_fu_1157_p1;
wire   [63:0] zext_ln54_fu_1202_p1;
wire   [63:0] zext_ln57_fu_1232_p1;
wire   [63:0] zext_ln60_fu_1237_p1;
wire  signed [63:0] sext_ln28_fu_603_p1;
wire  signed [63:0] sext_ln32_fu_686_p1;
reg   [26:0] i_fu_242;
wire   [26:0] add_ln28_1_fu_644_p2;
reg    ap_block_state1;
reg   [26:0] j_fu_262;
wire   [26:0] add_ln32_1_fu_708_p2;
reg   [31:0] row_fu_266;
reg   [31:0] idx_num_fu_270;
wire   [31:0] idx_num_2_fu_1151_p2;
reg   [26:0] block_fu_274;
wire   [31:0] mul_ln21_fu_550_p2;
wire   [31:0] shl_ln_fu_566_p3;
wire   [63:0] zext_ln28_fu_574_p1;
wire   [63:0] add_ln28_fu_578_p2;
wire   [31:0] mul_ln22_fu_613_p2;
wire   [31:0] shl_ln1_fu_655_p3;
wire   [63:0] zext_ln32_fu_662_p1;
wire   [63:0] add_ln32_fu_666_p2;
wire  signed [31:0] icmp_ln36_fu_719_p0;
wire  signed [31:0] icmp_ln36_1_fu_742_p1;
wire  signed [31:0] trunc_ln6_fu_753_p1;
wire  signed [31:0] icmp_ln41_fu_1081_p1;
wire   [4:0] tmp_i_fu_1096_p33;
wire   [7:0] tmp_i_fu_1096_p34;
wire   [3:0] empty_67_fu_1190_p1;
wire   [31:0] zext_ln54_1_fu_1207_p1;
wire   [8:0] zext_ln55_fu_1223_p1;
wire   [8:0] add_ln57_fu_1227_p2;
wire   [31:0] zext_ln60_1_fu_1242_p1;
reg   [92:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
reg    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
reg    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
wire    ap_ST_fsm_state74_blk;
wire    ap_ST_fsm_state75_blk;
wire    ap_ST_fsm_state76_blk;
wire    ap_ST_fsm_state77_blk;
wire    ap_ST_fsm_state78_blk;
wire    ap_ST_fsm_state79_blk;
wire    ap_ST_fsm_state80_blk;
wire    ap_ST_fsm_state81_blk;
reg    ap_ST_fsm_state82_blk;
wire    ap_ST_fsm_state83_blk;
wire    ap_ST_fsm_state84_blk;
wire    ap_ST_fsm_state85_blk;
wire    ap_ST_fsm_state86_blk;
wire    ap_ST_fsm_state87_blk;
wire    ap_ST_fsm_state88_blk;
wire    ap_ST_fsm_state89_blk;
wire    ap_ST_fsm_state90_blk;
reg    ap_ST_fsm_state91_blk;
wire    ap_ST_fsm_state92_blk;
reg    ap_ST_fsm_state93_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 93'd1;
end

sparse_load_ap_uint_256_ap_int_8_ap_int_8_32u_s_am_ram_V_RAM_AUTO_1R1W #(
    .DataWidth( 256 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
am_ram_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(am_ram_V_address0),
    .ce0(am_ram_V_ce0),
    .we0(am_ram_V_we0),
    .d0(sparse_data_addr_1_read_reg_1386),
    .q0(am_ram_V_q0)
);

sparse_load_ap_uint_256_ap_int_8_ap_int_8_32u_s_fm_ram_V_RAM_AUTO_1R1W #(
    .DataWidth( 256 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
fm_ram_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fm_ram_V_address0),
    .ce0(fm_ram_V_ce0),
    .we0(fm_ram_V_we0),
    .d0(sparse_data_addr_read_reg_1349),
    .q0(fm_ram_V_q0)
);

sparse_load_ap_uint_256_ap_int_8_ap_int_8_32u_s_idx_ram_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
idx_ram_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(idx_ram_address0),
    .ce0(idx_ram_ce0),
    .we0(idx_ram_we0),
    .d0(idx_ram_d0),
    .q0(idx_ram_q0)
);

sparse_load_ap_uint_256_ap_int_8_ap_int_8_32u_s_count_ram_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
count_ram_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(count_ram_address0),
    .ce0(count_ram_ce0),
    .we0(count_ram_we0),
    .d0(count_ram_d0),
    .q0(count_ram_q0)
);

sparse_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U10(
    .din0(fm_COLS),
    .din1(fm_ROWS),
    .dout(mul_ln21_fu_550_p2)
);

sparse_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U11(
    .din0(am_COLS),
    .din1(am_ROWS),
    .dout(mul_ln22_fu_613_p2)
);

sparse_mux_325_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 8 ))
mux_325_8_1_1_U12(
    .din0(l_val_V_reg_1421),
    .din1(l_val_V_95_reg_1426),
    .din2(l_val_V_96_reg_1431),
    .din3(l_val_V_97_reg_1436),
    .din4(l_val_V_98_reg_1441),
    .din5(l_val_V_99_reg_1446),
    .din6(l_val_V_100_reg_1451),
    .din7(l_val_V_101_reg_1456),
    .din8(l_val_V_102_reg_1461),
    .din9(l_val_V_103_reg_1466),
    .din10(l_val_V_104_reg_1471),
    .din11(l_val_V_105_reg_1476),
    .din12(l_val_V_106_reg_1481),
    .din13(l_val_V_107_reg_1486),
    .din14(l_val_V_108_reg_1491),
    .din15(l_val_V_109_reg_1496),
    .din16(l_val_V_110_reg_1501),
    .din17(l_val_V_111_reg_1506),
    .din18(l_val_V_112_reg_1511),
    .din19(l_val_V_113_reg_1516),
    .din20(l_val_V_114_reg_1521),
    .din21(l_val_V_115_reg_1526),
    .din22(l_val_V_116_reg_1531),
    .din23(l_val_V_117_reg_1536),
    .din24(l_val_V_118_reg_1541),
    .din25(l_val_V_119_reg_1546),
    .din26(l_val_V_120_reg_1551),
    .din27(l_val_V_121_reg_1556),
    .din28(l_val_V_122_reg_1561),
    .din29(l_val_V_123_reg_1566),
    .din30(l_val_V_124_reg_1571),
    .din31(l_val_V_125_reg_1576),
    .din32(tmp_i_fu_1096_p33),
    .dout(tmp_i_fu_1096_p34)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln52_fu_1179_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state88))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state84) & ((icmp_ln36_1_fu_742_p2 == 1'd1) | (icmp_ln36_reg_1368 == 1'd1)))) begin
        block_fu_274 <= 27'd0;
    end else if (((icmp_ln60_fu_1246_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state92))) begin
        block_fu_274 <= block_4_reg_1600;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        col_reg_489 <= add_ln41_reg_1584;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        col_reg_489 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_fu_1081_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state86))) begin
        if ((icmp_ln1023_fu_1134_p2 == 1'd1)) begin
            count_3_reg_512 <= count_reg_500;
        end else if ((icmp_ln1023_fu_1134_p2 == 1'd0)) begin
            count_3_reg_512 <= count_2_fu_1140_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_1_fu_742_p2 == 1'd1) & (icmp_ln36_reg_1368 == 1'd0) & (1'b1 == ap_CS_fsm_state84))) begin
        count_num_0_lcssa_i_reg_477 <= am_ROWS;
    end else if (((icmp_ln32_fu_703_p2 == 1'd1) & (icmp_ln36_fu_719_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state81))) begin
        count_num_0_lcssa_i_reg_477 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        count_reg_500 <= count_3_reg_512;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        count_reg_500 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((fm_stream_full_n == 1'b0) | (idx_stream_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state91))) begin
        i_2_reg_524 <= add_ln54_reg_1613;
    end else if (((icmp_ln52_fu_1179_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state88))) begin
        i_2_reg_524 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (1'b0 == am_ROWS_c_full_n) | (fm_COLS_c16_full_n == 1'b0) | (fm_ROWS_c14_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_242 <= 27'd0;
    end else if (((icmp_ln28_fu_639_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state40))) begin
        i_fu_242 <= add_ln28_1_fu_644_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_1_fu_742_p2 == 1'd1) & (icmp_ln36_reg_1368 == 1'd0) & (1'b1 == ap_CS_fsm_state84))) begin
        idx_num_0_lcssa_i_reg_465 <= idx_num_fu_270;
    end else if (((icmp_ln32_fu_703_p2 == 1'd1) & (icmp_ln36_fu_719_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state81))) begin
        idx_num_0_lcssa_i_reg_465 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_703_p2 == 1'd1) & (icmp_ln36_fu_719_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state81))) begin
        idx_num_fu_270 <= 32'd0;
    end else if (((icmp_ln1023_fu_1134_p2 == 1'd0) & (icmp_ln41_fu_1081_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state86))) begin
        idx_num_fu_270 <= idx_num_2_fu_1151_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_fu_1211_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state89))) begin
        j_1_reg_535 <= 31'd0;
    end else if (((count_stream_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state93))) begin
        j_1_reg_535 <= add_ln60_reg_1636;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_fu_639_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40))) begin
        j_fu_262 <= 27'd0;
    end else if (((icmp_ln32_fu_703_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state81))) begin
        j_fu_262 <= add_ln32_1_fu_708_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_703_p2 == 1'd1) & (icmp_ln36_fu_719_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state81))) begin
        row_fu_266 <= 32'd0;
    end else if (((icmp_ln41_fu_1081_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state86))) begin
        row_fu_266 <= add_ln49_reg_1399;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        add_ln41_reg_1584 <= add_ln41_fu_1086_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_reg_1368 == 1'd0) & (1'b1 == ap_CS_fsm_state84))) begin
        add_ln49_reg_1399 <= add_ln49_fu_747_p2;
        zext_ln36_reg_1391[31 : 0] <= zext_ln36_fu_737_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        add_ln54_reg_1613 <= add_ln54_fu_1217_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state92)) begin
        add_ln60_reg_1636 <= add_ln60_fu_1252_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        am_loop_num_reg_1319 <= {{mul_ln22_fu_613_p2[31:5]}};
        zext_ln22_reg_1324[26 : 0] <= zext_ln22_fu_628_p1[26 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        block_4_reg_1600 <= block_4_fu_1184_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        col_1_reg_1623 <= idx_ram_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        fm_loop_num_reg_1287 <= {{mul_ln21_fu_550_p2[31:5]}};
        trunc_ln4_reg_1293 <= {{add_ln28_fu_578_p2[63:5]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln32_fu_703_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state81))) begin
        icmp_ln36_reg_1368 <= icmp_ln36_fu_719_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        l_val_V_100_reg_1451 <= {{am_ram_V_q0[55:48]}};
        l_val_V_101_reg_1456 <= {{am_ram_V_q0[63:56]}};
        l_val_V_102_reg_1461 <= {{am_ram_V_q0[71:64]}};
        l_val_V_103_reg_1466 <= {{am_ram_V_q0[79:72]}};
        l_val_V_104_reg_1471 <= {{am_ram_V_q0[87:80]}};
        l_val_V_105_reg_1476 <= {{am_ram_V_q0[95:88]}};
        l_val_V_106_reg_1481 <= {{am_ram_V_q0[103:96]}};
        l_val_V_107_reg_1486 <= {{am_ram_V_q0[111:104]}};
        l_val_V_108_reg_1491 <= {{am_ram_V_q0[119:112]}};
        l_val_V_109_reg_1496 <= {{am_ram_V_q0[127:120]}};
        l_val_V_110_reg_1501 <= {{am_ram_V_q0[135:128]}};
        l_val_V_111_reg_1506 <= {{am_ram_V_q0[143:136]}};
        l_val_V_112_reg_1511 <= {{am_ram_V_q0[151:144]}};
        l_val_V_113_reg_1516 <= {{am_ram_V_q0[159:152]}};
        l_val_V_114_reg_1521 <= {{am_ram_V_q0[167:160]}};
        l_val_V_115_reg_1526 <= {{am_ram_V_q0[175:168]}};
        l_val_V_116_reg_1531 <= {{am_ram_V_q0[183:176]}};
        l_val_V_117_reg_1536 <= {{am_ram_V_q0[191:184]}};
        l_val_V_118_reg_1541 <= {{am_ram_V_q0[199:192]}};
        l_val_V_119_reg_1546 <= {{am_ram_V_q0[207:200]}};
        l_val_V_120_reg_1551 <= {{am_ram_V_q0[215:208]}};
        l_val_V_121_reg_1556 <= {{am_ram_V_q0[223:216]}};
        l_val_V_122_reg_1561 <= {{am_ram_V_q0[231:224]}};
        l_val_V_123_reg_1566 <= {{am_ram_V_q0[239:232]}};
        l_val_V_124_reg_1571 <= {{am_ram_V_q0[247:240]}};
        l_val_V_125_reg_1576 <= {{am_ram_V_q0[255:248]}};
        l_val_V_95_reg_1426 <= {{am_ram_V_q0[15:8]}};
        l_val_V_96_reg_1431 <= {{am_ram_V_q0[23:16]}};
        l_val_V_97_reg_1436 <= {{am_ram_V_q0[31:24]}};
        l_val_V_98_reg_1441 <= {{am_ram_V_q0[39:32]}};
        l_val_V_99_reg_1446 <= {{am_ram_V_q0[47:40]}};
        l_val_V_reg_1421 <= l_val_V_fu_767_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln52_fu_1179_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state88))) begin
        mul72_i_reg_1605[8 : 5] <= mul72_i_fu_1194_p3[8 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        sparse_data_addr_1_read_reg_1386 <= m_axi_sparse_data_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        sparse_data_addr_read_reg_1349 <= m_axi_sparse_data_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_fu_639_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40))) begin
        trunc_ln5_reg_1344 <= {{add_ln32_fu_666_p2[63:5]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state84) & ((icmp_ln36_1_fu_742_p2 == 1'd1) | (icmp_ln36_reg_1368 == 1'd1)))) begin
        trunc_ln6_reg_1416 <= {{trunc_ln6_fu_753_p1[31:5]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        zext_ln28_1_reg_1329[26 : 0] <= zext_ln28_1_fu_635_p1[26 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        zext_ln32_1_reg_1360[26 : 0] <= zext_ln32_1_fu_699_p1[26 : 0];
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        am_ROWS_c_blk_n = am_ROWS_c_full_n;
    end else begin
        am_ROWS_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (1'b0 == am_ROWS_c_full_n) | (fm_COLS_c16_full_n == 1'b0) | (fm_ROWS_c14_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        am_ROWS_c_write = 1'b1;
    end else begin
        am_ROWS_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        am_ram_V_address0 = zext_ln36_fu_737_p1;
    end else if ((1'b1 == ap_CS_fsm_state83)) begin
        am_ram_V_address0 = zext_ln32_1_reg_1360;
    end else begin
        am_ram_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state84))) begin
        am_ram_V_ce0 = 1'b1;
    end else begin
        am_ram_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        am_ram_V_we0 = 1'b1;
    end else begin
        am_ram_V_we0 = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if (((real_start == 1'b0) | (1'b0 == am_ROWS_c_full_n) | (fm_COLS_c16_full_n == 1'b0) | (fm_ROWS_c14_full_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

always @ (*) begin
    if ((m_axi_sparse_data_ARREADY == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

always @ (*) begin
    if ((m_axi_sparse_data_RVALID == 1'b0)) begin
        ap_ST_fsm_state41_blk = 1'b1;
    end else begin
        ap_ST_fsm_state41_blk = 1'b0;
    end
end

assign ap_ST_fsm_state42_blk = 1'b0;

always @ (*) begin
    if ((m_axi_sparse_data_ARREADY == 1'b0)) begin
        ap_ST_fsm_state43_blk = 1'b1;
    end else begin
        ap_ST_fsm_state43_blk = 1'b0;
    end
end

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

assign ap_ST_fsm_state72_blk = 1'b0;

assign ap_ST_fsm_state73_blk = 1'b0;

assign ap_ST_fsm_state74_blk = 1'b0;

assign ap_ST_fsm_state75_blk = 1'b0;

assign ap_ST_fsm_state76_blk = 1'b0;

assign ap_ST_fsm_state77_blk = 1'b0;

assign ap_ST_fsm_state78_blk = 1'b0;

assign ap_ST_fsm_state79_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state80_blk = 1'b0;

assign ap_ST_fsm_state81_blk = 1'b0;

always @ (*) begin
    if ((m_axi_sparse_data_RVALID == 1'b0)) begin
        ap_ST_fsm_state82_blk = 1'b1;
    end else begin
        ap_ST_fsm_state82_blk = 1'b0;
    end
end

assign ap_ST_fsm_state83_blk = 1'b0;

assign ap_ST_fsm_state84_blk = 1'b0;

assign ap_ST_fsm_state85_blk = 1'b0;

assign ap_ST_fsm_state86_blk = 1'b0;

assign ap_ST_fsm_state87_blk = 1'b0;

assign ap_ST_fsm_state88_blk = 1'b0;

assign ap_ST_fsm_state89_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state90_blk = 1'b0;

always @ (*) begin
    if (((fm_stream_full_n == 1'b0) | (idx_stream_full_n == 1'b0))) begin
        ap_ST_fsm_state91_blk = 1'b1;
    end else begin
        ap_ST_fsm_state91_blk = 1'b0;
    end
end

assign ap_ST_fsm_state92_blk = 1'b0;

always @ (*) begin
    if ((count_stream_full_n == 1'b0)) begin
        ap_ST_fsm_state93_blk = 1'b1;
    end else begin
        ap_ST_fsm_state93_blk = 1'b0;
    end
end

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln52_fu_1179_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state88))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state92)) begin
        count_ram_address0 = zext_ln60_fu_1237_p1;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        count_ram_address0 = zext_ln36_reg_1391;
    end else begin
        count_ram_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state86))) begin
        count_ram_ce0 = 1'b1;
    end else begin
        count_ram_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_fu_1081_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state86))) begin
        count_ram_we0 = 1'b1;
    end else begin
        count_ram_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        count_stream_blk_n = count_stream_full_n;
    end else begin
        count_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((count_stream_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state93))) begin
        count_stream_write = 1'b1;
    end else begin
        count_stream_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        fm_COLS_c16_blk_n = fm_COLS_c16_full_n;
    end else begin
        fm_COLS_c16_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (1'b0 == am_ROWS_c_full_n) | (fm_COLS_c16_full_n == 1'b0) | (fm_ROWS_c14_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        fm_COLS_c16_write = 1'b1;
    end else begin
        fm_COLS_c16_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        fm_ROWS_c14_blk_n = fm_ROWS_c14_full_n;
    end else begin
        fm_ROWS_c14_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (1'b0 == am_ROWS_c_full_n) | (fm_COLS_c16_full_n == 1'b0) | (fm_ROWS_c14_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        fm_ROWS_c14_write = 1'b1;
    end else begin
        fm_ROWS_c14_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state90)) begin
        fm_ram_V_address0 = zext_ln57_fu_1232_p1;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        fm_ram_V_address0 = zext_ln28_1_reg_1329;
    end else begin
        fm_ram_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state90))) begin
        fm_ram_V_ce0 = 1'b1;
    end else begin
        fm_ram_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        fm_ram_V_we0 = 1'b1;
    end else begin
        fm_ram_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        fm_stream_blk_n = fm_stream_full_n;
    end else begin
        fm_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((fm_stream_full_n == 1'b0) | (idx_stream_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state91))) begin
        fm_stream_write = 1'b1;
    end else begin
        fm_stream_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        idx_ram_address0 = zext_ln54_fu_1202_p1;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        idx_ram_address0 = zext_ln46_fu_1157_p1;
    end else begin
        idx_ram_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state86))) begin
        idx_ram_ce0 = 1'b1;
    end else begin
        idx_ram_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1023_fu_1134_p2 == 1'd0) & (icmp_ln41_fu_1081_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state86))) begin
        idx_ram_we0 = 1'b1;
    end else begin
        idx_ram_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state91)) begin
        idx_stream_blk_n = idx_stream_full_n;
    end else begin
        idx_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((fm_stream_full_n == 1'b0) | (idx_stream_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state91))) begin
        idx_stream_write = 1'b1;
    end else begin
        idx_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln52_fu_1179_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state88))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_sparse_data_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state43)) begin
            m_axi_sparse_data_ARADDR = sext_ln32_fu_686_p1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            m_axi_sparse_data_ARADDR = sext_ln28_fu_603_p1;
        end else begin
            m_axi_sparse_data_ARADDR = 'bx;
        end
    end else begin
        m_axi_sparse_data_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((m_axi_sparse_data_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state43)) begin
            m_axi_sparse_data_ARLEN = zext_ln22_reg_1324;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            m_axi_sparse_data_ARLEN = zext_ln21_fu_599_p1;
        end else begin
            m_axi_sparse_data_ARLEN = 'bx;
        end
    end else begin
        m_axi_sparse_data_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state43) & (m_axi_sparse_data_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & (m_axi_sparse_data_ARREADY == 1'b1)))) begin
        m_axi_sparse_data_ARVALID = 1'b1;
    end else begin
        m_axi_sparse_data_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state82) & (m_axi_sparse_data_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state41) & (m_axi_sparse_data_RVALID == 1'b1)))) begin
        m_axi_sparse_data_RREADY = 1'b1;
    end else begin
        m_axi_sparse_data_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state2))) begin
        sparse_data_blk_n_AR = m_axi_sparse_data_ARREADY;
    end else begin
        sparse_data_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state41))) begin
        sparse_data_blk_n_R = m_axi_sparse_data_RVALID;
    end else begin
        sparse_data_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (1'b0 == am_ROWS_c_full_n) | (fm_COLS_c16_full_n == 1'b0) | (fm_ROWS_c14_full_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (m_axi_sparse_data_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            if (((icmp_ln28_fu_639_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state41 : begin
            if (((1'b1 == ap_CS_fsm_state41) & (m_axi_sparse_data_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state43 : begin
            if (((1'b1 == ap_CS_fsm_state43) & (m_axi_sparse_data_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            if (((icmp_ln32_fu_703_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state81))) begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end
        end
        ap_ST_fsm_state82 : begin
            if (((1'b1 == ap_CS_fsm_state82) & (m_axi_sparse_data_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state84 : begin
            if (((1'b1 == ap_CS_fsm_state84) & ((icmp_ln36_1_fu_742_p2 == 1'd1) | (icmp_ln36_reg_1368 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            if (((icmp_ln41_fu_1081_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state86))) begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state88 : begin
            if (((icmp_ln52_fu_1179_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state88))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end
        end
        ap_ST_fsm_state89 : begin
            if (((icmp_ln54_fu_1211_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state89))) begin
                ap_NS_fsm = ap_ST_fsm_state92;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state90;
            end
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            if ((~((fm_stream_full_n == 1'b0) | (idx_stream_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state91))) begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state91;
            end
        end
        ap_ST_fsm_state92 : begin
            if (((icmp_ln60_fu_1246_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state92))) begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state93;
            end
        end
        ap_ST_fsm_state93 : begin
            if (((count_stream_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state93))) begin
                ap_NS_fsm = ap_ST_fsm_state92;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state93;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln28_1_fu_644_p2 = (i_fu_242 + 27'd1);

assign add_ln28_fu_578_p2 = (zext_ln28_fu_574_p1 + inputs);

assign add_ln32_1_fu_708_p2 = (j_fu_262 + 27'd1);

assign add_ln32_fu_666_p2 = (zext_ln32_fu_662_p1 + inputs);

assign add_ln41_fu_1086_p2 = (col_reg_489 + 32'd1);

assign add_ln49_fu_747_p2 = (row_fu_266 + 32'd1);

assign add_ln54_fu_1217_p2 = (i_2_reg_524 + 31'd1);

assign add_ln57_fu_1227_p2 = (mul72_i_reg_1605 + zext_ln55_fu_1223_p1);

assign add_ln60_fu_1252_p2 = (j_1_reg_535 + 31'd1);

assign am_ROWS_c_din = am_ROWS;

assign am_loop_num_fu_618_p4 = {{mul_ln22_fu_613_p2[31:5]}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (1'b0 == am_ROWS_c_full_n) | (fm_COLS_c16_full_n == 1'b0) | (fm_ROWS_c14_full_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state91 = ((fm_stream_full_n == 1'b0) | (idx_stream_full_n == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign block_4_fu_1184_p2 = (block_fu_274 + 27'd1);

assign count_2_fu_1140_p2 = (count_reg_500 + 32'd1);

assign count_ram_d0 = count_reg_500[7:0];

assign count_stream_din = count_ram_q0;

assign empty_67_fu_1190_p1 = block_fu_274[3:0];

assign fm_COLS_c16_din = fm_COLS;

assign fm_ROWS_c14_din = fm_ROWS;

assign fm_stream_din = fm_ram_V_q0;

assign icmp_ln1023_fu_1134_p2 = ((tmp_i_fu_1096_p34 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_639_p2 = ((i_fu_242 == fm_loop_num_reg_1287) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_703_p2 = ((j_fu_262 == am_loop_num_reg_1319) ? 1'b1 : 1'b0);

assign icmp_ln36_1_fu_742_p1 = am_ROWS;

assign icmp_ln36_1_fu_742_p2 = ((row_fu_266 == icmp_ln36_1_fu_742_p1) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_719_p0 = am_ROWS;

assign icmp_ln36_fu_719_p2 = ((icmp_ln36_fu_719_p0 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_1081_p1 = am_COLS;

assign icmp_ln41_fu_1081_p2 = ((col_reg_489 == icmp_ln41_fu_1081_p1) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_1179_p2 = ((block_fu_274 == trunc_ln6_reg_1416) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_1211_p2 = (($signed(zext_ln54_1_fu_1207_p1) < $signed(idx_num_0_lcssa_i_reg_465)) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_1246_p2 = (($signed(zext_ln60_1_fu_1242_p1) < $signed(count_num_0_lcssa_i_reg_477)) ? 1'b1 : 1'b0);

assign idx_num_2_fu_1151_p2 = (idx_num_fu_270 + 32'd1);

assign idx_ram_d0 = col_reg_489[7:0];

assign idx_stream_din = col_1_reg_1623;

assign l_val_V_fu_767_p1 = am_ram_V_q0[7:0];

assign m_axi_sparse_data_ARBURST = 2'd0;

assign m_axi_sparse_data_ARCACHE = 4'd0;

assign m_axi_sparse_data_ARID = 1'd0;

assign m_axi_sparse_data_ARLOCK = 2'd0;

assign m_axi_sparse_data_ARPROT = 3'd0;

assign m_axi_sparse_data_ARQOS = 4'd0;

assign m_axi_sparse_data_ARREGION = 4'd0;

assign m_axi_sparse_data_ARSIZE = 3'd0;

assign m_axi_sparse_data_ARUSER = 1'd0;

assign m_axi_sparse_data_AWADDR = 64'd0;

assign m_axi_sparse_data_AWBURST = 2'd0;

assign m_axi_sparse_data_AWCACHE = 4'd0;

assign m_axi_sparse_data_AWID = 1'd0;

assign m_axi_sparse_data_AWLEN = 32'd0;

assign m_axi_sparse_data_AWLOCK = 2'd0;

assign m_axi_sparse_data_AWPROT = 3'd0;

assign m_axi_sparse_data_AWQOS = 4'd0;

assign m_axi_sparse_data_AWREGION = 4'd0;

assign m_axi_sparse_data_AWSIZE = 3'd0;

assign m_axi_sparse_data_AWUSER = 1'd0;

assign m_axi_sparse_data_AWVALID = 1'b0;

assign m_axi_sparse_data_BREADY = 1'b0;

assign m_axi_sparse_data_WDATA = 256'd0;

assign m_axi_sparse_data_WID = 1'd0;

assign m_axi_sparse_data_WLAST = 1'b0;

assign m_axi_sparse_data_WSTRB = 32'd0;

assign m_axi_sparse_data_WUSER = 1'd0;

assign m_axi_sparse_data_WVALID = 1'b0;

assign mul72_i_fu_1194_p3 = {{empty_67_fu_1190_p1}, {5'd0}};

assign sext_ln28_fu_603_p1 = $signed(trunc_ln4_reg_1293);

assign sext_ln32_fu_686_p1 = $signed(trunc_ln5_reg_1344);

assign shl_ln1_fu_655_p3 = {{p_read1}, {5'd0}};

assign shl_ln_fu_566_p3 = {{p_read}, {5'd0}};

assign start_out = real_start;

assign tmp_i_fu_1096_p33 = col_reg_489[4:0];

assign trunc_ln6_fu_753_p1 = fm_COLS;

assign zext_ln21_fu_599_p1 = fm_loop_num_reg_1287;

assign zext_ln22_fu_628_p1 = am_loop_num_fu_618_p4;

assign zext_ln28_1_fu_635_p1 = i_fu_242;

assign zext_ln28_fu_574_p1 = shl_ln_fu_566_p3;

assign zext_ln32_1_fu_699_p1 = j_fu_262;

assign zext_ln32_fu_662_p1 = shl_ln1_fu_655_p3;

assign zext_ln36_fu_737_p1 = row_fu_266;

assign zext_ln46_fu_1157_p1 = idx_num_fu_270;

assign zext_ln54_1_fu_1207_p1 = i_2_reg_524;

assign zext_ln54_fu_1202_p1 = i_2_reg_524;

assign zext_ln55_fu_1223_p1 = idx_ram_q0;

assign zext_ln57_fu_1232_p1 = add_ln57_fu_1227_p2;

assign zext_ln60_1_fu_1242_p1 = j_1_reg_535;

assign zext_ln60_fu_1237_p1 = j_1_reg_535;

always @ (posedge ap_clk) begin
    zext_ln22_reg_1324[31:27] <= 5'b00000;
    zext_ln28_1_reg_1329[63:27] <= 37'b0000000000000000000000000000000000000;
    zext_ln32_1_reg_1360[63:27] <= 37'b0000000000000000000000000000000000000;
    zext_ln36_reg_1391[63:32] <= 32'b00000000000000000000000000000000;
    mul72_i_reg_1605[4:0] <= 5'b00000;
end

endmodule //sparse_load_ap_uint_256_ap_int_8_ap_int_8_32u_s
