-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sparse_store_ap_uint_256_ap_int_8_ap_int_8_32u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    quant_out2_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    quant_out2_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    quant_out2_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    quant_out2_empty_n : IN STD_LOGIC;
    quant_out2_read : OUT STD_LOGIC;
    m_axi_sparse_data_AWVALID : OUT STD_LOGIC;
    m_axi_sparse_data_AWREADY : IN STD_LOGIC;
    m_axi_sparse_data_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_sparse_data_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_sparse_data_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_sparse_data_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_sparse_data_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_sparse_data_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_sparse_data_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_sparse_data_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_sparse_data_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_sparse_data_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_sparse_data_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_sparse_data_WVALID : OUT STD_LOGIC;
    m_axi_sparse_data_WREADY : IN STD_LOGIC;
    m_axi_sparse_data_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    m_axi_sparse_data_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_sparse_data_WLAST : OUT STD_LOGIC;
    m_axi_sparse_data_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_sparse_data_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_sparse_data_ARVALID : OUT STD_LOGIC;
    m_axi_sparse_data_ARREADY : IN STD_LOGIC;
    m_axi_sparse_data_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_sparse_data_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_sparse_data_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_sparse_data_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_sparse_data_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_sparse_data_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_sparse_data_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_sparse_data_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_sparse_data_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_sparse_data_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_sparse_data_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_sparse_data_RVALID : IN STD_LOGIC;
    m_axi_sparse_data_RREADY : OUT STD_LOGIC;
    m_axi_sparse_data_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    m_axi_sparse_data_RLAST : IN STD_LOGIC;
    m_axi_sparse_data_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_sparse_data_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_sparse_data_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_sparse_data_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_sparse_data_BVALID : IN STD_LOGIC;
    m_axi_sparse_data_BREADY : OUT STD_LOGIC;
    m_axi_sparse_data_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_sparse_data_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_sparse_data_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    outputs_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    outputs_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    outputs_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    outputs_empty_n : IN STD_LOGIC;
    outputs_read : OUT STD_LOGIC;
    output_data_addr3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    output_data_addr3_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    output_data_addr3_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    output_data_addr3_empty_n : IN STD_LOGIC;
    output_data_addr3_read : OUT STD_LOGIC;
    ROWS_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ROWS_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    ROWS_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    ROWS_empty_n : IN STD_LOGIC;
    ROWS_read : OUT STD_LOGIC;
    COLS_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    COLS_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    COLS_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    COLS_empty_n : IN STD_LOGIC;
    COLS_read : OUT STD_LOGIC;
    sparse_flag : OUT STD_LOGIC_VECTOR (0 downto 0);
    sparse_flag_ap_vld : OUT STD_LOGIC );
end;


architecture behav of sparse_store_ap_uint_256_ap_int_8_ap_int_8_32u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (39 downto 0) := "0000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (39 downto 0) := "0000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (39 downto 0) := "0000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (39 downto 0) := "0000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (39 downto 0) := "0000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (39 downto 0) := "0000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (39 downto 0) := "0001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (39 downto 0) := "0010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (39 downto 0) := "0100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (39 downto 0) := "1000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sparse_data_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sparse_data_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal icmp_ln140_reg_215 : STD_LOGIC_VECTOR (0 downto 0);
    signal outputs_blk_n : STD_LOGIC;
    signal output_data_addr3_blk_n : STD_LOGIC;
    signal ROWS_blk_n : STD_LOGIC;
    signal COLS_blk_n : STD_LOGIC;
    signal loop_num_fu_140_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal loop_num_reg_203 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln137_fu_150_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln137_reg_210 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln140_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1_reg_219 : STD_LOGIC_VECTOR (58 downto 0);
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_ap_start : STD_LOGIC;
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_ap_done : STD_LOGIC;
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_ap_idle : STD_LOGIC;
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_ap_ready : STD_LOGIC;
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_quant_out2_read : STD_LOGIC;
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWVALID : STD_LOGIC;
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_WVALID : STD_LOGIC;
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_WLAST : STD_LOGIC;
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_ARVALID : STD_LOGIC;
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_RREADY : STD_LOGIC;
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_BREADY : STD_LOGIC;
    signal ap_phi_mux_count_0_lcssa_phi_fu_117_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal count_0_lcssa_reg_113 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_block_state40 : BOOLEAN;
    signal ap_block_state1 : BOOLEAN;
    signal grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sext_ln140_fu_188_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sparse_flag_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal icmp_ln147_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln137_fu_134_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_160_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal zext_ln140_fu_168_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln140_fu_172_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sparse_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        quant_out2_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        quant_out2_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        quant_out2_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        quant_out2_empty_n : IN STD_LOGIC;
        quant_out2_read : OUT STD_LOGIC;
        m_axi_sparse_data_AWVALID : OUT STD_LOGIC;
        m_axi_sparse_data_AWREADY : IN STD_LOGIC;
        m_axi_sparse_data_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_sparse_data_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sparse_data_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_sparse_data_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_sparse_data_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_sparse_data_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_sparse_data_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_sparse_data_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_sparse_data_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_sparse_data_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_sparse_data_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sparse_data_WVALID : OUT STD_LOGIC;
        m_axi_sparse_data_WREADY : IN STD_LOGIC;
        m_axi_sparse_data_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_sparse_data_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_sparse_data_WLAST : OUT STD_LOGIC;
        m_axi_sparse_data_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sparse_data_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sparse_data_ARVALID : OUT STD_LOGIC;
        m_axi_sparse_data_ARREADY : IN STD_LOGIC;
        m_axi_sparse_data_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_sparse_data_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sparse_data_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_sparse_data_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_sparse_data_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_sparse_data_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_sparse_data_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_sparse_data_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_sparse_data_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_sparse_data_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_sparse_data_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sparse_data_RVALID : IN STD_LOGIC;
        m_axi_sparse_data_RREADY : OUT STD_LOGIC;
        m_axi_sparse_data_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_sparse_data_RLAST : IN STD_LOGIC;
        m_axi_sparse_data_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sparse_data_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_sparse_data_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sparse_data_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_sparse_data_BVALID : IN STD_LOGIC;
        m_axi_sparse_data_BREADY : OUT STD_LOGIC;
        m_axi_sparse_data_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_sparse_data_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_sparse_data_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln140 : IN STD_LOGIC_VECTOR (58 downto 0);
        loop_num : IN STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component sparse_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124 : component sparse_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_ap_start,
        ap_done => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_ap_done,
        ap_idle => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_ap_idle,
        ap_ready => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_ap_ready,
        quant_out2_dout => quant_out2_dout,
        quant_out2_num_data_valid => ap_const_lv2_0,
        quant_out2_fifo_cap => ap_const_lv2_0,
        quant_out2_empty_n => quant_out2_empty_n,
        quant_out2_read => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_quant_out2_read,
        m_axi_sparse_data_AWVALID => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWVALID,
        m_axi_sparse_data_AWREADY => m_axi_sparse_data_AWREADY,
        m_axi_sparse_data_AWADDR => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWADDR,
        m_axi_sparse_data_AWID => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWID,
        m_axi_sparse_data_AWLEN => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWLEN,
        m_axi_sparse_data_AWSIZE => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWSIZE,
        m_axi_sparse_data_AWBURST => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWBURST,
        m_axi_sparse_data_AWLOCK => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWLOCK,
        m_axi_sparse_data_AWCACHE => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWCACHE,
        m_axi_sparse_data_AWPROT => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWPROT,
        m_axi_sparse_data_AWQOS => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWQOS,
        m_axi_sparse_data_AWREGION => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWREGION,
        m_axi_sparse_data_AWUSER => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWUSER,
        m_axi_sparse_data_WVALID => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_WVALID,
        m_axi_sparse_data_WREADY => m_axi_sparse_data_WREADY,
        m_axi_sparse_data_WDATA => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_WDATA,
        m_axi_sparse_data_WSTRB => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_WSTRB,
        m_axi_sparse_data_WLAST => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_WLAST,
        m_axi_sparse_data_WID => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_WID,
        m_axi_sparse_data_WUSER => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_WUSER,
        m_axi_sparse_data_ARVALID => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_ARVALID,
        m_axi_sparse_data_ARREADY => ap_const_logic_0,
        m_axi_sparse_data_ARADDR => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_ARADDR,
        m_axi_sparse_data_ARID => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_ARID,
        m_axi_sparse_data_ARLEN => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_ARLEN,
        m_axi_sparse_data_ARSIZE => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_ARSIZE,
        m_axi_sparse_data_ARBURST => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_ARBURST,
        m_axi_sparse_data_ARLOCK => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_ARLOCK,
        m_axi_sparse_data_ARCACHE => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_ARCACHE,
        m_axi_sparse_data_ARPROT => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_ARPROT,
        m_axi_sparse_data_ARQOS => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_ARQOS,
        m_axi_sparse_data_ARREGION => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_ARREGION,
        m_axi_sparse_data_ARUSER => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_ARUSER,
        m_axi_sparse_data_RVALID => ap_const_logic_0,
        m_axi_sparse_data_RREADY => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_RREADY,
        m_axi_sparse_data_RDATA => ap_const_lv256_lc_1,
        m_axi_sparse_data_RLAST => ap_const_logic_0,
        m_axi_sparse_data_RID => ap_const_lv1_0,
        m_axi_sparse_data_RFIFONUM => ap_const_lv9_0,
        m_axi_sparse_data_RUSER => ap_const_lv1_0,
        m_axi_sparse_data_RRESP => ap_const_lv2_0,
        m_axi_sparse_data_BVALID => m_axi_sparse_data_BVALID,
        m_axi_sparse_data_BREADY => grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_BREADY,
        m_axi_sparse_data_BRESP => m_axi_sparse_data_BRESP,
        m_axi_sparse_data_BID => m_axi_sparse_data_BID,
        m_axi_sparse_data_BUSER => m_axi_sparse_data_BUSER,
        sext_ln140 => trunc_ln1_reg_219,
        loop_num => loop_num_reg_203);

    mul_32s_32s_32_1_1_U91 : component sparse_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => COLS_dout,
        din1 => ROWS_dout,
        dout => mul_ln137_fu_134_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((icmp_ln140_reg_215 = ap_const_lv1_0) and (m_axi_sparse_data_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_ap_ready = ap_const_logic_1)) then 
                    grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    sparse_flag_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                sparse_flag_preg <= ap_const_lv1_0;
            else
                if ((not(((icmp_ln140_reg_215 = ap_const_lv1_0) and (m_axi_sparse_data_BVALID = ap_const_logic_0))) and (icmp_ln147_fu_198_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                    sparse_flag_preg <= ap_const_lv1_1;
                end if; 
            end if;
        end if;
    end process;


    count_0_lcssa_reg_113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = COLS_empty_n) or (ap_const_logic_0 = ROWS_empty_n) or (output_data_addr3_empty_n = ap_const_logic_0) or (outputs_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln140_fu_154_p2 = ap_const_lv1_1))) then 
                count_0_lcssa_reg_113 <= ap_const_lv27_0;
            elsif ((not(((icmp_ln140_reg_215 = ap_const_lv1_0) and (m_axi_sparse_data_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state40) and (icmp_ln140_reg_215 = ap_const_lv1_0))) then 
                count_0_lcssa_reg_113 <= loop_num_reg_203;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln140_reg_215 <= icmp_ln140_fu_154_p2;
                loop_num_reg_203 <= mul_ln137_fu_134_p2(31 downto 5);
                    zext_ln137_reg_210(26 downto 0) <= zext_ln137_fu_150_p1(26 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln140_fu_154_p2 = ap_const_lv1_0))) then
                trunc_ln1_reg_219 <= add_ln140_fu_172_p2(63 downto 5);
            end if;
        end if;
    end process;
    zext_ln137_reg_210(31 downto 27) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, m_axi_sparse_data_AWREADY, m_axi_sparse_data_BVALID, outputs_empty_n, output_data_addr3_empty_n, ROWS_empty_n, COLS_empty_n, ap_CS_fsm_state2, ap_CS_fsm_state40, icmp_ln140_reg_215, icmp_ln140_fu_154_p2, grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_ap_done, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = COLS_empty_n) or (ap_const_logic_0 = ROWS_empty_n) or (output_data_addr3_empty_n = ap_const_logic_0) or (outputs_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln140_fu_154_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = COLS_empty_n) or (ap_const_logic_0 = ROWS_empty_n) or (output_data_addr3_empty_n = ap_const_logic_0) or (outputs_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln140_fu_154_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((m_axi_sparse_data_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                if ((not(((icmp_ln140_reg_215 = ap_const_lv1_0) and (m_axi_sparse_data_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    COLS_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, COLS_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            COLS_blk_n <= COLS_empty_n;
        else 
            COLS_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    COLS_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, outputs_empty_n, output_data_addr3_empty_n, ROWS_empty_n, COLS_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = COLS_empty_n) or (ap_const_logic_0 = ROWS_empty_n) or (output_data_addr3_empty_n = ap_const_logic_0) or (outputs_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            COLS_read <= ap_const_logic_1;
        else 
            COLS_read <= ap_const_logic_0;
        end if; 
    end process;


    ROWS_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ROWS_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ROWS_blk_n <= ROWS_empty_n;
        else 
            ROWS_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ROWS_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, outputs_empty_n, output_data_addr3_empty_n, ROWS_empty_n, COLS_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = COLS_empty_n) or (ap_const_logic_0 = ROWS_empty_n) or (output_data_addr3_empty_n = ap_const_logic_0) or (outputs_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ROWS_read <= ap_const_logic_1;
        else 
            ROWS_read <= ap_const_logic_0;
        end if; 
    end process;

    add_ln140_fu_172_p2 <= std_logic_vector(unsigned(outputs_dout) + unsigned(zext_ln140_fu_168_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, outputs_empty_n, output_data_addr3_empty_n, ROWS_empty_n, COLS_empty_n)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = COLS_empty_n) or (ap_const_logic_0 = ROWS_empty_n) or (output_data_addr3_empty_n = ap_const_logic_0) or (outputs_empty_n = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;

    ap_ST_fsm_state2_blk_assign_proc : process(m_axi_sparse_data_AWREADY)
    begin
        if ((m_axi_sparse_data_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state40_blk_assign_proc : process(m_axi_sparse_data_BVALID, icmp_ln140_reg_215)
    begin
        if (((icmp_ln140_reg_215 = ap_const_lv1_0) and (m_axi_sparse_data_BVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state40_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state40_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_ap_done)
    begin
        if ((grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, outputs_empty_n, output_data_addr3_empty_n, ROWS_empty_n, COLS_empty_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = COLS_empty_n) or (ap_const_logic_0 = ROWS_empty_n) or (output_data_addr3_empty_n = ap_const_logic_0) or (outputs_empty_n = ap_const_logic_0));
    end process;


    ap_block_state40_assign_proc : process(m_axi_sparse_data_BVALID, icmp_ln140_reg_215)
    begin
                ap_block_state40 <= ((icmp_ln140_reg_215 = ap_const_lv1_0) and (m_axi_sparse_data_BVALID = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, m_axi_sparse_data_BVALID, ap_CS_fsm_state40, icmp_ln140_reg_215)
    begin
        if ((not(((icmp_ln140_reg_215 = ap_const_lv1_0) and (m_axi_sparse_data_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_count_0_lcssa_phi_fu_117_p4_assign_proc : process(ap_CS_fsm_state40, icmp_ln140_reg_215, loop_num_reg_203, count_0_lcssa_reg_113)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) and (icmp_ln140_reg_215 = ap_const_lv1_0))) then 
            ap_phi_mux_count_0_lcssa_phi_fu_117_p4 <= loop_num_reg_203;
        else 
            ap_phi_mux_count_0_lcssa_phi_fu_117_p4 <= count_0_lcssa_reg_113;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_sparse_data_BVALID, ap_CS_fsm_state40, icmp_ln140_reg_215)
    begin
        if ((not(((icmp_ln140_reg_215 = ap_const_lv1_0) and (m_axi_sparse_data_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_ap_start <= grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_ap_start_reg;
    icmp_ln140_fu_154_p2 <= "1" when (loop_num_fu_140_p4 = ap_const_lv27_0) else "0";
    icmp_ln147_fu_198_p2 <= "1" when (ap_phi_mux_count_0_lcssa_phi_fu_117_p4 = loop_num_reg_203) else "0";
    loop_num_fu_140_p4 <= mul_ln137_fu_134_p2(31 downto 5);
    m_axi_sparse_data_ARADDR <= ap_const_lv64_0;
    m_axi_sparse_data_ARBURST <= ap_const_lv2_0;
    m_axi_sparse_data_ARCACHE <= ap_const_lv4_0;
    m_axi_sparse_data_ARID <= ap_const_lv1_0;
    m_axi_sparse_data_ARLEN <= ap_const_lv32_0;
    m_axi_sparse_data_ARLOCK <= ap_const_lv2_0;
    m_axi_sparse_data_ARPROT <= ap_const_lv3_0;
    m_axi_sparse_data_ARQOS <= ap_const_lv4_0;
    m_axi_sparse_data_ARREGION <= ap_const_lv4_0;
    m_axi_sparse_data_ARSIZE <= ap_const_lv3_0;
    m_axi_sparse_data_ARUSER <= ap_const_lv1_0;
    m_axi_sparse_data_ARVALID <= ap_const_logic_0;

    m_axi_sparse_data_AWADDR_assign_proc : process(m_axi_sparse_data_AWREADY, ap_CS_fsm_state2, grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWADDR, ap_CS_fsm_state3, ap_CS_fsm_state4, sext_ln140_fu_188_p1)
    begin
        if (((m_axi_sparse_data_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_sparse_data_AWADDR <= sext_ln140_fu_188_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_sparse_data_AWADDR <= grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWADDR;
        else 
            m_axi_sparse_data_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_sparse_data_AWBURST_assign_proc : process(grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWBURST, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_sparse_data_AWBURST <= grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWBURST;
        else 
            m_axi_sparse_data_AWBURST <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_sparse_data_AWCACHE_assign_proc : process(grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWCACHE, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_sparse_data_AWCACHE <= grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWCACHE;
        else 
            m_axi_sparse_data_AWCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_sparse_data_AWID_assign_proc : process(grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWID, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_sparse_data_AWID <= grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWID;
        else 
            m_axi_sparse_data_AWID <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_sparse_data_AWLEN_assign_proc : process(m_axi_sparse_data_AWREADY, ap_CS_fsm_state2, zext_ln137_reg_210, grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWLEN, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((m_axi_sparse_data_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_sparse_data_AWLEN <= zext_ln137_reg_210;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_sparse_data_AWLEN <= grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWLEN;
        else 
            m_axi_sparse_data_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_sparse_data_AWLOCK_assign_proc : process(grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWLOCK, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_sparse_data_AWLOCK <= grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWLOCK;
        else 
            m_axi_sparse_data_AWLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_sparse_data_AWPROT_assign_proc : process(grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWPROT, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_sparse_data_AWPROT <= grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWPROT;
        else 
            m_axi_sparse_data_AWPROT <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_sparse_data_AWQOS_assign_proc : process(grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWQOS, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_sparse_data_AWQOS <= grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWQOS;
        else 
            m_axi_sparse_data_AWQOS <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_sparse_data_AWREGION_assign_proc : process(grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWREGION, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_sparse_data_AWREGION <= grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWREGION;
        else 
            m_axi_sparse_data_AWREGION <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_sparse_data_AWSIZE_assign_proc : process(grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWSIZE, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_sparse_data_AWSIZE <= grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWSIZE;
        else 
            m_axi_sparse_data_AWSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_sparse_data_AWUSER_assign_proc : process(grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWUSER, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_sparse_data_AWUSER <= grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWUSER;
        else 
            m_axi_sparse_data_AWUSER <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_sparse_data_AWVALID_assign_proc : process(m_axi_sparse_data_AWREADY, ap_CS_fsm_state2, grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWVALID, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((m_axi_sparse_data_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_sparse_data_AWVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_sparse_data_AWVALID <= grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_AWVALID;
        else 
            m_axi_sparse_data_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_sparse_data_BREADY_assign_proc : process(m_axi_sparse_data_BVALID, ap_CS_fsm_state40, icmp_ln140_reg_215, grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_BREADY, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((not(((icmp_ln140_reg_215 = ap_const_lv1_0) and (m_axi_sparse_data_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state40) and (icmp_ln140_reg_215 = ap_const_lv1_0))) then 
            m_axi_sparse_data_BREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_sparse_data_BREADY <= grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_BREADY;
        else 
            m_axi_sparse_data_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_sparse_data_RREADY <= ap_const_logic_0;
    m_axi_sparse_data_WDATA <= grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_WDATA;
    m_axi_sparse_data_WID <= grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_WID;
    m_axi_sparse_data_WLAST <= grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_WLAST;
    m_axi_sparse_data_WSTRB <= grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_WSTRB;
    m_axi_sparse_data_WUSER <= grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_WUSER;

    m_axi_sparse_data_WVALID_assign_proc : process(grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_WVALID, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_sparse_data_WVALID <= grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_m_axi_sparse_data_WVALID;
        else 
            m_axi_sparse_data_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    output_data_addr3_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, output_data_addr3_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            output_data_addr3_blk_n <= output_data_addr3_empty_n;
        else 
            output_data_addr3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    output_data_addr3_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, outputs_empty_n, output_data_addr3_empty_n, ROWS_empty_n, COLS_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = COLS_empty_n) or (ap_const_logic_0 = ROWS_empty_n) or (output_data_addr3_empty_n = ap_const_logic_0) or (outputs_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            output_data_addr3_read <= ap_const_logic_1;
        else 
            output_data_addr3_read <= ap_const_logic_0;
        end if; 
    end process;


    outputs_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, outputs_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            outputs_blk_n <= outputs_empty_n;
        else 
            outputs_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    outputs_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, outputs_empty_n, output_data_addr3_empty_n, ROWS_empty_n, COLS_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (ap_const_logic_0 = COLS_empty_n) or (ap_const_logic_0 = ROWS_empty_n) or (output_data_addr3_empty_n = ap_const_logic_0) or (outputs_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            outputs_read <= ap_const_logic_1;
        else 
            outputs_read <= ap_const_logic_0;
        end if; 
    end process;


    quant_out2_read_assign_proc : process(grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_quant_out2_read, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            quant_out2_read <= grp_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_140_1_fu_124_quant_out2_read;
        else 
            quant_out2_read <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln140_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_reg_219),64));

    shl_ln_fu_160_p3 <= (output_data_addr3_dout & ap_const_lv5_0);

    sparse_data_blk_n_AW_assign_proc : process(m_axi_sparse_data_AWREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sparse_data_blk_n_AW <= m_axi_sparse_data_AWREADY;
        else 
            sparse_data_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    sparse_data_blk_n_B_assign_proc : process(m_axi_sparse_data_BVALID, ap_CS_fsm_state40, icmp_ln140_reg_215)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) and (icmp_ln140_reg_215 = ap_const_lv1_0))) then 
            sparse_data_blk_n_B <= m_axi_sparse_data_BVALID;
        else 
            sparse_data_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    sparse_flag_assign_proc : process(m_axi_sparse_data_BVALID, ap_CS_fsm_state40, icmp_ln140_reg_215, sparse_flag_preg, icmp_ln147_fu_198_p2)
    begin
        if ((not(((icmp_ln140_reg_215 = ap_const_lv1_0) and (m_axi_sparse_data_BVALID = ap_const_logic_0))) and (icmp_ln147_fu_198_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            sparse_flag <= ap_const_lv1_1;
        else 
            sparse_flag <= sparse_flag_preg;
        end if; 
    end process;


    sparse_flag_ap_vld_assign_proc : process(m_axi_sparse_data_BVALID, ap_CS_fsm_state40, icmp_ln140_reg_215, icmp_ln147_fu_198_p2)
    begin
        if ((not(((icmp_ln140_reg_215 = ap_const_lv1_0) and (m_axi_sparse_data_BVALID = ap_const_logic_0))) and (icmp_ln147_fu_198_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            sparse_flag_ap_vld <= ap_const_logic_1;
        else 
            sparse_flag_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln137_fu_150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_num_fu_140_p4),32));
    zext_ln140_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_160_p3),64));
end behav;
