// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sparse_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_out1_dout,
        data_out1_num_data_valid,
        data_out1_fifo_cap,
        data_out1_empty_n,
        data_out1_read,
        quant_out2_din,
        quant_out2_num_data_valid,
        quant_out2_fifo_cap,
        quant_out2_full_n,
        quant_out2_write,
        div_cast,
        left_shift,
        cmp12,
        conv13,
        pos_rounding_value,
        total_right_shift
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [1023:0] data_out1_dout;
input  [6:0] data_out1_num_data_valid;
input  [6:0] data_out1_fifo_cap;
input   data_out1_empty_n;
output   data_out1_read;
output  [255:0] quant_out2_din;
input  [1:0] quant_out2_num_data_valid;
input  [1:0] quant_out2_fifo_cap;
input   quant_out2_full_n;
output   quant_out2_write;
input  [26:0] div_cast;
input  [31:0] left_shift;
input  [0:0] cmp12;
input  [15:0] conv13;
input  [31:0] pos_rounding_value;
input  [31:0] total_right_shift;

reg ap_idle;
reg data_out1_read;
reg quant_out2_write;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln100_fu_245_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    data_out1_blk_n;
wire    ap_block_pp0_stage0;
reg    quant_out2_blk_n;
reg    ap_block_pp0_stage0_11001;
wire  signed [31:0] conv13_cast_fu_233_p1;
reg  signed [31:0] conv13_cast_reg_1760;
wire   [31:0] mul_ln110_fu_588_p2;
reg   [31:0] mul_ln110_reg_1800;
wire   [31:0] mul_ln110_1_fu_605_p2;
reg   [31:0] mul_ln110_1_reg_1805;
wire   [31:0] mul_ln110_2_fu_622_p2;
reg   [31:0] mul_ln110_2_reg_1810;
wire   [31:0] mul_ln110_3_fu_639_p2;
reg   [31:0] mul_ln110_3_reg_1815;
wire   [31:0] mul_ln110_4_fu_656_p2;
reg   [31:0] mul_ln110_4_reg_1820;
wire   [31:0] mul_ln110_5_fu_673_p2;
reg   [31:0] mul_ln110_5_reg_1825;
wire   [31:0] mul_ln110_6_fu_690_p2;
reg   [31:0] mul_ln110_6_reg_1830;
wire   [31:0] mul_ln110_7_fu_707_p2;
reg   [31:0] mul_ln110_7_reg_1835;
wire   [31:0] mul_ln110_8_fu_724_p2;
reg   [31:0] mul_ln110_8_reg_1840;
wire   [31:0] mul_ln110_9_fu_741_p2;
reg   [31:0] mul_ln110_9_reg_1845;
wire   [31:0] mul_ln110_10_fu_758_p2;
reg   [31:0] mul_ln110_10_reg_1850;
wire   [31:0] mul_ln110_11_fu_775_p2;
reg   [31:0] mul_ln110_11_reg_1855;
wire   [31:0] mul_ln110_12_fu_792_p2;
reg   [31:0] mul_ln110_12_reg_1860;
wire   [31:0] mul_ln110_13_fu_809_p2;
reg   [31:0] mul_ln110_13_reg_1865;
wire   [31:0] mul_ln110_14_fu_826_p2;
reg   [31:0] mul_ln110_14_reg_1870;
wire   [31:0] mul_ln110_15_fu_843_p2;
reg   [31:0] mul_ln110_15_reg_1875;
wire   [31:0] mul_ln110_16_fu_860_p2;
reg   [31:0] mul_ln110_16_reg_1880;
wire   [31:0] mul_ln110_17_fu_877_p2;
reg   [31:0] mul_ln110_17_reg_1885;
wire   [31:0] mul_ln110_18_fu_894_p2;
reg   [31:0] mul_ln110_18_reg_1890;
wire   [31:0] mul_ln110_19_fu_911_p2;
reg   [31:0] mul_ln110_19_reg_1895;
wire   [31:0] mul_ln110_20_fu_928_p2;
reg   [31:0] mul_ln110_20_reg_1900;
wire   [31:0] mul_ln110_21_fu_945_p2;
reg   [31:0] mul_ln110_21_reg_1905;
wire   [31:0] mul_ln110_22_fu_962_p2;
reg   [31:0] mul_ln110_22_reg_1910;
wire   [31:0] mul_ln110_23_fu_979_p2;
reg   [31:0] mul_ln110_23_reg_1915;
wire   [31:0] mul_ln110_24_fu_996_p2;
reg   [31:0] mul_ln110_24_reg_1920;
wire   [31:0] mul_ln110_25_fu_1013_p2;
reg   [31:0] mul_ln110_25_reg_1925;
wire   [31:0] mul_ln110_26_fu_1030_p2;
reg   [31:0] mul_ln110_26_reg_1930;
wire   [31:0] mul_ln110_27_fu_1047_p2;
reg   [31:0] mul_ln110_27_reg_1935;
wire   [31:0] mul_ln110_28_fu_1064_p2;
reg   [31:0] mul_ln110_28_reg_1940;
wire   [31:0] mul_ln110_29_fu_1081_p2;
reg   [31:0] mul_ln110_29_reg_1945;
wire   [31:0] mul_ln110_30_fu_1098_p2;
reg   [31:0] mul_ln110_30_reg_1950;
wire   [31:0] mul_ln110_31_fu_1115_p2;
reg   [31:0] mul_ln110_31_reg_1955;
reg   [26:0] i_fu_180;
wire   [26:0] i_3_fu_251_p2;
wire    ap_loop_init;
reg   [26:0] ap_sig_allocacmp_i_2;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] l_val_V_fu_262_p1;
wire   [31:0] shl_ln108_fu_576_p2;
wire  signed [31:0] mul_ln110_fu_588_p0;
wire  signed [15:0] mul_ln110_fu_588_p1;
wire   [31:0] l_val_V_1_fu_266_p4;
wire   [31:0] shl_ln108_1_fu_593_p2;
wire  signed [31:0] mul_ln110_1_fu_605_p0;
wire  signed [15:0] mul_ln110_1_fu_605_p1;
wire   [31:0] l_val_V_2_fu_276_p4;
wire   [31:0] shl_ln108_2_fu_610_p2;
wire  signed [31:0] mul_ln110_2_fu_622_p0;
wire  signed [15:0] mul_ln110_2_fu_622_p1;
wire   [31:0] l_val_V_3_fu_286_p4;
wire   [31:0] shl_ln108_3_fu_627_p2;
wire  signed [31:0] mul_ln110_3_fu_639_p0;
wire  signed [15:0] mul_ln110_3_fu_639_p1;
wire   [31:0] l_val_V_4_fu_296_p4;
wire   [31:0] shl_ln108_4_fu_644_p2;
wire  signed [31:0] mul_ln110_4_fu_656_p0;
wire  signed [15:0] mul_ln110_4_fu_656_p1;
wire   [31:0] l_val_V_5_fu_306_p4;
wire   [31:0] shl_ln108_5_fu_661_p2;
wire  signed [31:0] mul_ln110_5_fu_673_p0;
wire  signed [15:0] mul_ln110_5_fu_673_p1;
wire   [31:0] l_val_V_6_fu_316_p4;
wire   [31:0] shl_ln108_6_fu_678_p2;
wire  signed [31:0] mul_ln110_6_fu_690_p0;
wire  signed [15:0] mul_ln110_6_fu_690_p1;
wire   [31:0] l_val_V_7_fu_326_p4;
wire   [31:0] shl_ln108_7_fu_695_p2;
wire  signed [31:0] mul_ln110_7_fu_707_p0;
wire  signed [15:0] mul_ln110_7_fu_707_p1;
wire   [31:0] l_val_V_8_fu_336_p4;
wire   [31:0] shl_ln108_8_fu_712_p2;
wire  signed [31:0] mul_ln110_8_fu_724_p0;
wire  signed [15:0] mul_ln110_8_fu_724_p1;
wire   [31:0] l_val_V_9_fu_346_p4;
wire   [31:0] shl_ln108_9_fu_729_p2;
wire  signed [31:0] mul_ln110_9_fu_741_p0;
wire  signed [15:0] mul_ln110_9_fu_741_p1;
wire   [31:0] l_val_V_10_fu_356_p4;
wire   [31:0] shl_ln108_10_fu_746_p2;
wire  signed [31:0] mul_ln110_10_fu_758_p0;
wire  signed [15:0] mul_ln110_10_fu_758_p1;
wire   [31:0] l_val_V_11_fu_366_p4;
wire   [31:0] shl_ln108_11_fu_763_p2;
wire  signed [31:0] mul_ln110_11_fu_775_p0;
wire  signed [15:0] mul_ln110_11_fu_775_p1;
wire   [31:0] l_val_V_12_fu_376_p4;
wire   [31:0] shl_ln108_12_fu_780_p2;
wire  signed [31:0] mul_ln110_12_fu_792_p0;
wire  signed [15:0] mul_ln110_12_fu_792_p1;
wire   [31:0] l_val_V_13_fu_386_p4;
wire   [31:0] shl_ln108_13_fu_797_p2;
wire  signed [31:0] mul_ln110_13_fu_809_p0;
wire  signed [15:0] mul_ln110_13_fu_809_p1;
wire   [31:0] l_val_V_14_fu_396_p4;
wire   [31:0] shl_ln108_14_fu_814_p2;
wire  signed [31:0] mul_ln110_14_fu_826_p0;
wire  signed [15:0] mul_ln110_14_fu_826_p1;
wire   [31:0] l_val_V_15_fu_406_p4;
wire   [31:0] shl_ln108_15_fu_831_p2;
wire  signed [31:0] mul_ln110_15_fu_843_p0;
wire  signed [15:0] mul_ln110_15_fu_843_p1;
wire   [31:0] l_val_V_16_fu_416_p4;
wire   [31:0] shl_ln108_16_fu_848_p2;
wire  signed [31:0] mul_ln110_16_fu_860_p0;
wire  signed [15:0] mul_ln110_16_fu_860_p1;
wire   [31:0] l_val_V_17_fu_426_p4;
wire   [31:0] shl_ln108_17_fu_865_p2;
wire  signed [31:0] mul_ln110_17_fu_877_p0;
wire  signed [15:0] mul_ln110_17_fu_877_p1;
wire   [31:0] l_val_V_18_fu_436_p4;
wire   [31:0] shl_ln108_18_fu_882_p2;
wire  signed [31:0] mul_ln110_18_fu_894_p0;
wire  signed [15:0] mul_ln110_18_fu_894_p1;
wire   [31:0] l_val_V_19_fu_446_p4;
wire   [31:0] shl_ln108_19_fu_899_p2;
wire  signed [31:0] mul_ln110_19_fu_911_p0;
wire  signed [15:0] mul_ln110_19_fu_911_p1;
wire   [31:0] l_val_V_20_fu_456_p4;
wire   [31:0] shl_ln108_20_fu_916_p2;
wire  signed [31:0] mul_ln110_20_fu_928_p0;
wire  signed [15:0] mul_ln110_20_fu_928_p1;
wire   [31:0] l_val_V_21_fu_466_p4;
wire   [31:0] shl_ln108_21_fu_933_p2;
wire  signed [31:0] mul_ln110_21_fu_945_p0;
wire  signed [15:0] mul_ln110_21_fu_945_p1;
wire   [31:0] l_val_V_22_fu_476_p4;
wire   [31:0] shl_ln108_22_fu_950_p2;
wire  signed [31:0] mul_ln110_22_fu_962_p0;
wire  signed [15:0] mul_ln110_22_fu_962_p1;
wire   [31:0] l_val_V_23_fu_486_p4;
wire   [31:0] shl_ln108_23_fu_967_p2;
wire  signed [31:0] mul_ln110_23_fu_979_p0;
wire  signed [15:0] mul_ln110_23_fu_979_p1;
wire   [31:0] l_val_V_24_fu_496_p4;
wire   [31:0] shl_ln108_24_fu_984_p2;
wire  signed [31:0] mul_ln110_24_fu_996_p0;
wire  signed [15:0] mul_ln110_24_fu_996_p1;
wire   [31:0] l_val_V_25_fu_506_p4;
wire   [31:0] shl_ln108_25_fu_1001_p2;
wire  signed [31:0] mul_ln110_25_fu_1013_p0;
wire  signed [15:0] mul_ln110_25_fu_1013_p1;
wire   [31:0] l_val_V_26_fu_516_p4;
wire   [31:0] shl_ln108_26_fu_1018_p2;
wire  signed [31:0] mul_ln110_26_fu_1030_p0;
wire  signed [15:0] mul_ln110_26_fu_1030_p1;
wire   [31:0] l_val_V_27_fu_526_p4;
wire   [31:0] shl_ln108_27_fu_1035_p2;
wire  signed [31:0] mul_ln110_27_fu_1047_p0;
wire  signed [15:0] mul_ln110_27_fu_1047_p1;
wire   [31:0] l_val_V_28_fu_536_p4;
wire   [31:0] shl_ln108_28_fu_1052_p2;
wire  signed [31:0] mul_ln110_28_fu_1064_p0;
wire  signed [15:0] mul_ln110_28_fu_1064_p1;
wire   [31:0] l_val_V_29_fu_546_p4;
wire   [31:0] shl_ln108_29_fu_1069_p2;
wire  signed [31:0] mul_ln110_29_fu_1081_p0;
wire  signed [15:0] mul_ln110_29_fu_1081_p1;
wire   [31:0] l_val_V_30_fu_556_p4;
wire   [31:0] shl_ln108_30_fu_1086_p2;
wire  signed [31:0] mul_ln110_30_fu_1098_p0;
wire  signed [15:0] mul_ln110_30_fu_1098_p1;
wire   [31:0] l_val_V_31_fu_566_p4;
wire   [31:0] shl_ln108_31_fu_1103_p2;
wire  signed [31:0] mul_ln110_31_fu_1115_p0;
wire  signed [15:0] mul_ln110_31_fu_1115_p1;
wire   [31:0] add_ln113_fu_1120_p2;
wire   [31:0] ashr_ln114_fu_1124_p2;
wire   [31:0] add_ln113_1_fu_1133_p2;
wire   [31:0] ashr_ln114_1_fu_1137_p2;
wire   [31:0] add_ln113_2_fu_1146_p2;
wire   [31:0] ashr_ln114_2_fu_1150_p2;
wire   [31:0] add_ln113_3_fu_1159_p2;
wire   [31:0] ashr_ln114_3_fu_1163_p2;
wire   [31:0] add_ln113_4_fu_1172_p2;
wire   [31:0] ashr_ln114_4_fu_1176_p2;
wire   [31:0] add_ln113_5_fu_1185_p2;
wire   [31:0] ashr_ln114_5_fu_1189_p2;
wire   [31:0] add_ln113_6_fu_1198_p2;
wire   [31:0] ashr_ln114_6_fu_1202_p2;
wire   [31:0] add_ln113_7_fu_1211_p2;
wire   [31:0] ashr_ln114_7_fu_1215_p2;
wire   [31:0] add_ln113_8_fu_1224_p2;
wire   [31:0] ashr_ln114_8_fu_1228_p2;
wire   [31:0] add_ln113_9_fu_1237_p2;
wire   [31:0] ashr_ln114_9_fu_1241_p2;
wire   [31:0] add_ln113_10_fu_1250_p2;
wire   [31:0] ashr_ln114_10_fu_1254_p2;
wire   [31:0] add_ln113_11_fu_1263_p2;
wire   [31:0] ashr_ln114_11_fu_1267_p2;
wire   [31:0] add_ln113_12_fu_1276_p2;
wire   [31:0] ashr_ln114_12_fu_1280_p2;
wire   [31:0] add_ln113_13_fu_1289_p2;
wire   [31:0] ashr_ln114_13_fu_1293_p2;
wire   [31:0] add_ln113_14_fu_1302_p2;
wire   [31:0] ashr_ln114_14_fu_1306_p2;
wire   [31:0] add_ln113_15_fu_1315_p2;
wire   [31:0] ashr_ln114_15_fu_1319_p2;
wire   [31:0] add_ln113_16_fu_1328_p2;
wire   [31:0] ashr_ln114_16_fu_1332_p2;
wire   [31:0] add_ln113_17_fu_1341_p2;
wire   [31:0] ashr_ln114_17_fu_1345_p2;
wire   [31:0] add_ln113_18_fu_1354_p2;
wire   [31:0] ashr_ln114_18_fu_1358_p2;
wire   [31:0] add_ln113_19_fu_1367_p2;
wire   [31:0] ashr_ln114_19_fu_1371_p2;
wire   [31:0] add_ln113_20_fu_1380_p2;
wire   [31:0] ashr_ln114_20_fu_1384_p2;
wire   [31:0] add_ln113_21_fu_1393_p2;
wire   [31:0] ashr_ln114_21_fu_1397_p2;
wire   [31:0] add_ln113_22_fu_1406_p2;
wire   [31:0] ashr_ln114_22_fu_1410_p2;
wire   [31:0] add_ln113_23_fu_1419_p2;
wire   [31:0] ashr_ln114_23_fu_1423_p2;
wire   [31:0] add_ln113_24_fu_1432_p2;
wire   [31:0] ashr_ln114_24_fu_1436_p2;
wire   [31:0] add_ln113_25_fu_1445_p2;
wire   [31:0] ashr_ln114_25_fu_1449_p2;
wire   [31:0] add_ln113_26_fu_1458_p2;
wire   [31:0] ashr_ln114_26_fu_1462_p2;
wire   [31:0] add_ln113_27_fu_1471_p2;
wire   [31:0] ashr_ln114_27_fu_1475_p2;
wire   [31:0] add_ln113_28_fu_1484_p2;
wire   [31:0] ashr_ln114_28_fu_1488_p2;
wire   [31:0] add_ln113_29_fu_1497_p2;
wire   [31:0] ashr_ln114_29_fu_1501_p2;
wire   [31:0] add_ln113_30_fu_1510_p2;
wire   [31:0] ashr_ln114_30_fu_1514_p2;
wire   [31:0] add_ln113_31_fu_1523_p2;
wire   [31:0] ashr_ln114_31_fu_1527_p2;
wire   [0:0] trunc_ln116_31_fu_1532_p1;
wire   [7:0] trunc_ln116_30_fu_1519_p1;
wire   [7:0] trunc_ln116_29_fu_1506_p1;
wire   [7:0] trunc_ln116_28_fu_1493_p1;
wire   [7:0] trunc_ln116_27_fu_1480_p1;
wire   [7:0] trunc_ln116_26_fu_1467_p1;
wire   [7:0] trunc_ln116_25_fu_1454_p1;
wire   [7:0] trunc_ln116_24_fu_1441_p1;
wire   [7:0] trunc_ln116_23_fu_1428_p1;
wire   [7:0] trunc_ln116_22_fu_1415_p1;
wire   [7:0] trunc_ln116_21_fu_1402_p1;
wire   [7:0] trunc_ln116_20_fu_1389_p1;
wire   [7:0] trunc_ln116_19_fu_1376_p1;
wire   [7:0] trunc_ln116_18_fu_1363_p1;
wire   [7:0] trunc_ln116_17_fu_1350_p1;
wire   [7:0] trunc_ln116_16_fu_1337_p1;
wire   [7:0] trunc_ln116_15_fu_1324_p1;
wire   [7:0] trunc_ln116_14_fu_1311_p1;
wire   [7:0] trunc_ln116_13_fu_1298_p1;
wire   [7:0] trunc_ln116_12_fu_1285_p1;
wire   [7:0] trunc_ln116_11_fu_1272_p1;
wire   [7:0] trunc_ln116_10_fu_1259_p1;
wire   [7:0] trunc_ln116_9_fu_1246_p1;
wire   [7:0] trunc_ln116_8_fu_1233_p1;
wire   [7:0] trunc_ln116_7_fu_1220_p1;
wire   [7:0] trunc_ln116_6_fu_1207_p1;
wire   [7:0] trunc_ln116_5_fu_1194_p1;
wire   [7:0] trunc_ln116_4_fu_1181_p1;
wire   [7:0] trunc_ln116_3_fu_1168_p1;
wire   [7:0] trunc_ln116_2_fu_1155_p1;
wire   [7:0] trunc_ln116_1_fu_1142_p1;
wire   [7:0] trunc_ln116_fu_1129_p1;
wire   [248:0] p_Result_s_fu_1536_p33;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

sparse_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U37(
    .din0(mul_ln110_fu_588_p0),
    .din1(mul_ln110_fu_588_p1),
    .dout(mul_ln110_fu_588_p2)
);

sparse_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U38(
    .din0(mul_ln110_1_fu_605_p0),
    .din1(mul_ln110_1_fu_605_p1),
    .dout(mul_ln110_1_fu_605_p2)
);

sparse_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U39(
    .din0(mul_ln110_2_fu_622_p0),
    .din1(mul_ln110_2_fu_622_p1),
    .dout(mul_ln110_2_fu_622_p2)
);

sparse_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U40(
    .din0(mul_ln110_3_fu_639_p0),
    .din1(mul_ln110_3_fu_639_p1),
    .dout(mul_ln110_3_fu_639_p2)
);

sparse_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U41(
    .din0(mul_ln110_4_fu_656_p0),
    .din1(mul_ln110_4_fu_656_p1),
    .dout(mul_ln110_4_fu_656_p2)
);

sparse_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U42(
    .din0(mul_ln110_5_fu_673_p0),
    .din1(mul_ln110_5_fu_673_p1),
    .dout(mul_ln110_5_fu_673_p2)
);

sparse_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U43(
    .din0(mul_ln110_6_fu_690_p0),
    .din1(mul_ln110_6_fu_690_p1),
    .dout(mul_ln110_6_fu_690_p2)
);

sparse_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U44(
    .din0(mul_ln110_7_fu_707_p0),
    .din1(mul_ln110_7_fu_707_p1),
    .dout(mul_ln110_7_fu_707_p2)
);

sparse_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U45(
    .din0(mul_ln110_8_fu_724_p0),
    .din1(mul_ln110_8_fu_724_p1),
    .dout(mul_ln110_8_fu_724_p2)
);

sparse_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U46(
    .din0(mul_ln110_9_fu_741_p0),
    .din1(mul_ln110_9_fu_741_p1),
    .dout(mul_ln110_9_fu_741_p2)
);

sparse_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U47(
    .din0(mul_ln110_10_fu_758_p0),
    .din1(mul_ln110_10_fu_758_p1),
    .dout(mul_ln110_10_fu_758_p2)
);

sparse_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U48(
    .din0(mul_ln110_11_fu_775_p0),
    .din1(mul_ln110_11_fu_775_p1),
    .dout(mul_ln110_11_fu_775_p2)
);

sparse_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U49(
    .din0(mul_ln110_12_fu_792_p0),
    .din1(mul_ln110_12_fu_792_p1),
    .dout(mul_ln110_12_fu_792_p2)
);

sparse_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U50(
    .din0(mul_ln110_13_fu_809_p0),
    .din1(mul_ln110_13_fu_809_p1),
    .dout(mul_ln110_13_fu_809_p2)
);

sparse_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U51(
    .din0(mul_ln110_14_fu_826_p0),
    .din1(mul_ln110_14_fu_826_p1),
    .dout(mul_ln110_14_fu_826_p2)
);

sparse_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U52(
    .din0(mul_ln110_15_fu_843_p0),
    .din1(mul_ln110_15_fu_843_p1),
    .dout(mul_ln110_15_fu_843_p2)
);

sparse_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U53(
    .din0(mul_ln110_16_fu_860_p0),
    .din1(mul_ln110_16_fu_860_p1),
    .dout(mul_ln110_16_fu_860_p2)
);

sparse_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U54(
    .din0(mul_ln110_17_fu_877_p0),
    .din1(mul_ln110_17_fu_877_p1),
    .dout(mul_ln110_17_fu_877_p2)
);

sparse_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U55(
    .din0(mul_ln110_18_fu_894_p0),
    .din1(mul_ln110_18_fu_894_p1),
    .dout(mul_ln110_18_fu_894_p2)
);

sparse_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U56(
    .din0(mul_ln110_19_fu_911_p0),
    .din1(mul_ln110_19_fu_911_p1),
    .dout(mul_ln110_19_fu_911_p2)
);

sparse_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U57(
    .din0(mul_ln110_20_fu_928_p0),
    .din1(mul_ln110_20_fu_928_p1),
    .dout(mul_ln110_20_fu_928_p2)
);

sparse_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U58(
    .din0(mul_ln110_21_fu_945_p0),
    .din1(mul_ln110_21_fu_945_p1),
    .dout(mul_ln110_21_fu_945_p2)
);

sparse_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U59(
    .din0(mul_ln110_22_fu_962_p0),
    .din1(mul_ln110_22_fu_962_p1),
    .dout(mul_ln110_22_fu_962_p2)
);

sparse_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U60(
    .din0(mul_ln110_23_fu_979_p0),
    .din1(mul_ln110_23_fu_979_p1),
    .dout(mul_ln110_23_fu_979_p2)
);

sparse_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U61(
    .din0(mul_ln110_24_fu_996_p0),
    .din1(mul_ln110_24_fu_996_p1),
    .dout(mul_ln110_24_fu_996_p2)
);

sparse_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U62(
    .din0(mul_ln110_25_fu_1013_p0),
    .din1(mul_ln110_25_fu_1013_p1),
    .dout(mul_ln110_25_fu_1013_p2)
);

sparse_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U63(
    .din0(mul_ln110_26_fu_1030_p0),
    .din1(mul_ln110_26_fu_1030_p1),
    .dout(mul_ln110_26_fu_1030_p2)
);

sparse_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U64(
    .din0(mul_ln110_27_fu_1047_p0),
    .din1(mul_ln110_27_fu_1047_p1),
    .dout(mul_ln110_27_fu_1047_p2)
);

sparse_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U65(
    .din0(mul_ln110_28_fu_1064_p0),
    .din1(mul_ln110_28_fu_1064_p1),
    .dout(mul_ln110_28_fu_1064_p2)
);

sparse_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U66(
    .din0(mul_ln110_29_fu_1081_p0),
    .din1(mul_ln110_29_fu_1081_p1),
    .dout(mul_ln110_29_fu_1081_p2)
);

sparse_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U67(
    .din0(mul_ln110_30_fu_1098_p0),
    .din1(mul_ln110_30_fu_1098_p1),
    .dout(mul_ln110_30_fu_1098_p2)
);

sparse_mul_32s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
mul_32s_16s_32_1_1_U68(
    .din0(mul_ln110_31_fu_1115_p0),
    .din1(mul_ln110_31_fu_1115_p1),
    .dout(mul_ln110_31_fu_1115_p2)
);

sparse_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln100_fu_245_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_180 <= i_3_fu_251_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_180 <= 27'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        conv13_cast_reg_1760 <= conv13_cast_fu_233_p1;
        mul_ln110_10_reg_1850 <= mul_ln110_10_fu_758_p2;
        mul_ln110_11_reg_1855 <= mul_ln110_11_fu_775_p2;
        mul_ln110_12_reg_1860 <= mul_ln110_12_fu_792_p2;
        mul_ln110_13_reg_1865 <= mul_ln110_13_fu_809_p2;
        mul_ln110_14_reg_1870 <= mul_ln110_14_fu_826_p2;
        mul_ln110_15_reg_1875 <= mul_ln110_15_fu_843_p2;
        mul_ln110_16_reg_1880 <= mul_ln110_16_fu_860_p2;
        mul_ln110_17_reg_1885 <= mul_ln110_17_fu_877_p2;
        mul_ln110_18_reg_1890 <= mul_ln110_18_fu_894_p2;
        mul_ln110_19_reg_1895 <= mul_ln110_19_fu_911_p2;
        mul_ln110_1_reg_1805 <= mul_ln110_1_fu_605_p2;
        mul_ln110_20_reg_1900 <= mul_ln110_20_fu_928_p2;
        mul_ln110_21_reg_1905 <= mul_ln110_21_fu_945_p2;
        mul_ln110_22_reg_1910 <= mul_ln110_22_fu_962_p2;
        mul_ln110_23_reg_1915 <= mul_ln110_23_fu_979_p2;
        mul_ln110_24_reg_1920 <= mul_ln110_24_fu_996_p2;
        mul_ln110_25_reg_1925 <= mul_ln110_25_fu_1013_p2;
        mul_ln110_26_reg_1930 <= mul_ln110_26_fu_1030_p2;
        mul_ln110_27_reg_1935 <= mul_ln110_27_fu_1047_p2;
        mul_ln110_28_reg_1940 <= mul_ln110_28_fu_1064_p2;
        mul_ln110_29_reg_1945 <= mul_ln110_29_fu_1081_p2;
        mul_ln110_2_reg_1810 <= mul_ln110_2_fu_622_p2;
        mul_ln110_30_reg_1950 <= mul_ln110_30_fu_1098_p2;
        mul_ln110_31_reg_1955 <= mul_ln110_31_fu_1115_p2;
        mul_ln110_3_reg_1815 <= mul_ln110_3_fu_639_p2;
        mul_ln110_4_reg_1820 <= mul_ln110_4_fu_656_p2;
        mul_ln110_5_reg_1825 <= mul_ln110_5_fu_673_p2;
        mul_ln110_6_reg_1830 <= mul_ln110_6_fu_690_p2;
        mul_ln110_7_reg_1835 <= mul_ln110_7_fu_707_p2;
        mul_ln110_8_reg_1840 <= mul_ln110_8_fu_724_p2;
        mul_ln110_9_reg_1845 <= mul_ln110_9_fu_741_p2;
        mul_ln110_reg_1800 <= mul_ln110_fu_588_p2;
    end
end

always @ (*) begin
    if (((icmp_ln100_fu_245_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_2 = 27'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_180;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_out1_blk_n = data_out1_empty_n;
    end else begin
        data_out1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_out1_read = 1'b1;
    end else begin
        data_out1_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        quant_out2_blk_n = quant_out2_full_n;
    end else begin
        quant_out2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        quant_out2_write = 1'b1;
    end else begin
        quant_out2_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln113_10_fu_1250_p2 = (mul_ln110_10_reg_1850 + pos_rounding_value);

assign add_ln113_11_fu_1263_p2 = (mul_ln110_11_reg_1855 + pos_rounding_value);

assign add_ln113_12_fu_1276_p2 = (mul_ln110_12_reg_1860 + pos_rounding_value);

assign add_ln113_13_fu_1289_p2 = (mul_ln110_13_reg_1865 + pos_rounding_value);

assign add_ln113_14_fu_1302_p2 = (mul_ln110_14_reg_1870 + pos_rounding_value);

assign add_ln113_15_fu_1315_p2 = (mul_ln110_15_reg_1875 + pos_rounding_value);

assign add_ln113_16_fu_1328_p2 = (mul_ln110_16_reg_1880 + pos_rounding_value);

assign add_ln113_17_fu_1341_p2 = (mul_ln110_17_reg_1885 + pos_rounding_value);

assign add_ln113_18_fu_1354_p2 = (mul_ln110_18_reg_1890 + pos_rounding_value);

assign add_ln113_19_fu_1367_p2 = (mul_ln110_19_reg_1895 + pos_rounding_value);

assign add_ln113_1_fu_1133_p2 = (mul_ln110_1_reg_1805 + pos_rounding_value);

assign add_ln113_20_fu_1380_p2 = (mul_ln110_20_reg_1900 + pos_rounding_value);

assign add_ln113_21_fu_1393_p2 = (mul_ln110_21_reg_1905 + pos_rounding_value);

assign add_ln113_22_fu_1406_p2 = (mul_ln110_22_reg_1910 + pos_rounding_value);

assign add_ln113_23_fu_1419_p2 = (mul_ln110_23_reg_1915 + pos_rounding_value);

assign add_ln113_24_fu_1432_p2 = (mul_ln110_24_reg_1920 + pos_rounding_value);

assign add_ln113_25_fu_1445_p2 = (mul_ln110_25_reg_1925 + pos_rounding_value);

assign add_ln113_26_fu_1458_p2 = (mul_ln110_26_reg_1930 + pos_rounding_value);

assign add_ln113_27_fu_1471_p2 = (mul_ln110_27_reg_1935 + pos_rounding_value);

assign add_ln113_28_fu_1484_p2 = (mul_ln110_28_reg_1940 + pos_rounding_value);

assign add_ln113_29_fu_1497_p2 = (mul_ln110_29_reg_1945 + pos_rounding_value);

assign add_ln113_2_fu_1146_p2 = (mul_ln110_2_reg_1810 + pos_rounding_value);

assign add_ln113_30_fu_1510_p2 = (mul_ln110_30_reg_1950 + pos_rounding_value);

assign add_ln113_31_fu_1523_p2 = (mul_ln110_31_reg_1955 + pos_rounding_value);

assign add_ln113_3_fu_1159_p2 = (mul_ln110_3_reg_1815 + pos_rounding_value);

assign add_ln113_4_fu_1172_p2 = (mul_ln110_4_reg_1820 + pos_rounding_value);

assign add_ln113_5_fu_1185_p2 = (mul_ln110_5_reg_1825 + pos_rounding_value);

assign add_ln113_6_fu_1198_p2 = (mul_ln110_6_reg_1830 + pos_rounding_value);

assign add_ln113_7_fu_1211_p2 = (mul_ln110_7_reg_1835 + pos_rounding_value);

assign add_ln113_8_fu_1224_p2 = (mul_ln110_8_reg_1840 + pos_rounding_value);

assign add_ln113_9_fu_1237_p2 = (mul_ln110_9_reg_1845 + pos_rounding_value);

assign add_ln113_fu_1120_p2 = (mul_ln110_reg_1800 + pos_rounding_value);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((quant_out2_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((data_out1_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((quant_out2_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((data_out1_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((quant_out2_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((data_out1_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (data_out1_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (quant_out2_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ashr_ln114_10_fu_1254_p2 = $signed(add_ln113_10_fu_1250_p2) >>> total_right_shift;

assign ashr_ln114_11_fu_1267_p2 = $signed(add_ln113_11_fu_1263_p2) >>> total_right_shift;

assign ashr_ln114_12_fu_1280_p2 = $signed(add_ln113_12_fu_1276_p2) >>> total_right_shift;

assign ashr_ln114_13_fu_1293_p2 = $signed(add_ln113_13_fu_1289_p2) >>> total_right_shift;

assign ashr_ln114_14_fu_1306_p2 = $signed(add_ln113_14_fu_1302_p2) >>> total_right_shift;

assign ashr_ln114_15_fu_1319_p2 = $signed(add_ln113_15_fu_1315_p2) >>> total_right_shift;

assign ashr_ln114_16_fu_1332_p2 = $signed(add_ln113_16_fu_1328_p2) >>> total_right_shift;

assign ashr_ln114_17_fu_1345_p2 = $signed(add_ln113_17_fu_1341_p2) >>> total_right_shift;

assign ashr_ln114_18_fu_1358_p2 = $signed(add_ln113_18_fu_1354_p2) >>> total_right_shift;

assign ashr_ln114_19_fu_1371_p2 = $signed(add_ln113_19_fu_1367_p2) >>> total_right_shift;

assign ashr_ln114_1_fu_1137_p2 = $signed(add_ln113_1_fu_1133_p2) >>> total_right_shift;

assign ashr_ln114_20_fu_1384_p2 = $signed(add_ln113_20_fu_1380_p2) >>> total_right_shift;

assign ashr_ln114_21_fu_1397_p2 = $signed(add_ln113_21_fu_1393_p2) >>> total_right_shift;

assign ashr_ln114_22_fu_1410_p2 = $signed(add_ln113_22_fu_1406_p2) >>> total_right_shift;

assign ashr_ln114_23_fu_1423_p2 = $signed(add_ln113_23_fu_1419_p2) >>> total_right_shift;

assign ashr_ln114_24_fu_1436_p2 = $signed(add_ln113_24_fu_1432_p2) >>> total_right_shift;

assign ashr_ln114_25_fu_1449_p2 = $signed(add_ln113_25_fu_1445_p2) >>> total_right_shift;

assign ashr_ln114_26_fu_1462_p2 = $signed(add_ln113_26_fu_1458_p2) >>> total_right_shift;

assign ashr_ln114_27_fu_1475_p2 = $signed(add_ln113_27_fu_1471_p2) >>> total_right_shift;

assign ashr_ln114_28_fu_1488_p2 = $signed(add_ln113_28_fu_1484_p2) >>> total_right_shift;

assign ashr_ln114_29_fu_1501_p2 = $signed(add_ln113_29_fu_1497_p2) >>> total_right_shift;

assign ashr_ln114_2_fu_1150_p2 = $signed(add_ln113_2_fu_1146_p2) >>> total_right_shift;

assign ashr_ln114_30_fu_1514_p2 = $signed(add_ln113_30_fu_1510_p2) >>> total_right_shift;

assign ashr_ln114_31_fu_1527_p2 = $signed(add_ln113_31_fu_1523_p2) >>> total_right_shift;

assign ashr_ln114_3_fu_1163_p2 = $signed(add_ln113_3_fu_1159_p2) >>> total_right_shift;

assign ashr_ln114_4_fu_1176_p2 = $signed(add_ln113_4_fu_1172_p2) >>> total_right_shift;

assign ashr_ln114_5_fu_1189_p2 = $signed(add_ln113_5_fu_1185_p2) >>> total_right_shift;

assign ashr_ln114_6_fu_1202_p2 = $signed(add_ln113_6_fu_1198_p2) >>> total_right_shift;

assign ashr_ln114_7_fu_1215_p2 = $signed(add_ln113_7_fu_1211_p2) >>> total_right_shift;

assign ashr_ln114_8_fu_1228_p2 = $signed(add_ln113_8_fu_1224_p2) >>> total_right_shift;

assign ashr_ln114_9_fu_1241_p2 = $signed(add_ln113_9_fu_1237_p2) >>> total_right_shift;

assign ashr_ln114_fu_1124_p2 = $signed(add_ln113_fu_1120_p2) >>> total_right_shift;

assign conv13_cast_fu_233_p1 = $signed(conv13);

assign i_3_fu_251_p2 = (ap_sig_allocacmp_i_2 + 27'd1);

assign icmp_ln100_fu_245_p2 = ((ap_sig_allocacmp_i_2 == div_cast) ? 1'b1 : 1'b0);

assign l_val_V_10_fu_356_p4 = {{data_out1_dout[351:320]}};

assign l_val_V_11_fu_366_p4 = {{data_out1_dout[383:352]}};

assign l_val_V_12_fu_376_p4 = {{data_out1_dout[415:384]}};

assign l_val_V_13_fu_386_p4 = {{data_out1_dout[447:416]}};

assign l_val_V_14_fu_396_p4 = {{data_out1_dout[479:448]}};

assign l_val_V_15_fu_406_p4 = {{data_out1_dout[511:480]}};

assign l_val_V_16_fu_416_p4 = {{data_out1_dout[543:512]}};

assign l_val_V_17_fu_426_p4 = {{data_out1_dout[575:544]}};

assign l_val_V_18_fu_436_p4 = {{data_out1_dout[607:576]}};

assign l_val_V_19_fu_446_p4 = {{data_out1_dout[639:608]}};

assign l_val_V_1_fu_266_p4 = {{data_out1_dout[63:32]}};

assign l_val_V_20_fu_456_p4 = {{data_out1_dout[671:640]}};

assign l_val_V_21_fu_466_p4 = {{data_out1_dout[703:672]}};

assign l_val_V_22_fu_476_p4 = {{data_out1_dout[735:704]}};

assign l_val_V_23_fu_486_p4 = {{data_out1_dout[767:736]}};

assign l_val_V_24_fu_496_p4 = {{data_out1_dout[799:768]}};

assign l_val_V_25_fu_506_p4 = {{data_out1_dout[831:800]}};

assign l_val_V_26_fu_516_p4 = {{data_out1_dout[863:832]}};

assign l_val_V_27_fu_526_p4 = {{data_out1_dout[895:864]}};

assign l_val_V_28_fu_536_p4 = {{data_out1_dout[927:896]}};

assign l_val_V_29_fu_546_p4 = {{data_out1_dout[959:928]}};

assign l_val_V_2_fu_276_p4 = {{data_out1_dout[95:64]}};

assign l_val_V_30_fu_556_p4 = {{data_out1_dout[991:960]}};

assign l_val_V_31_fu_566_p4 = {{data_out1_dout[1023:992]}};

assign l_val_V_3_fu_286_p4 = {{data_out1_dout[127:96]}};

assign l_val_V_4_fu_296_p4 = {{data_out1_dout[159:128]}};

assign l_val_V_5_fu_306_p4 = {{data_out1_dout[191:160]}};

assign l_val_V_6_fu_316_p4 = {{data_out1_dout[223:192]}};

assign l_val_V_7_fu_326_p4 = {{data_out1_dout[255:224]}};

assign l_val_V_8_fu_336_p4 = {{data_out1_dout[287:256]}};

assign l_val_V_9_fu_346_p4 = {{data_out1_dout[319:288]}};

assign l_val_V_fu_262_p1 = data_out1_dout[31:0];

assign mul_ln110_10_fu_758_p0 = ((cmp12[0:0] == 1'b1) ? shl_ln108_10_fu_746_p2 : l_val_V_10_fu_356_p4);

assign mul_ln110_10_fu_758_p1 = conv13_cast_reg_1760;

assign mul_ln110_11_fu_775_p0 = ((cmp12[0:0] == 1'b1) ? shl_ln108_11_fu_763_p2 : l_val_V_11_fu_366_p4);

assign mul_ln110_11_fu_775_p1 = conv13_cast_reg_1760;

assign mul_ln110_12_fu_792_p0 = ((cmp12[0:0] == 1'b1) ? shl_ln108_12_fu_780_p2 : l_val_V_12_fu_376_p4);

assign mul_ln110_12_fu_792_p1 = conv13_cast_reg_1760;

assign mul_ln110_13_fu_809_p0 = ((cmp12[0:0] == 1'b1) ? shl_ln108_13_fu_797_p2 : l_val_V_13_fu_386_p4);

assign mul_ln110_13_fu_809_p1 = conv13_cast_reg_1760;

assign mul_ln110_14_fu_826_p0 = ((cmp12[0:0] == 1'b1) ? shl_ln108_14_fu_814_p2 : l_val_V_14_fu_396_p4);

assign mul_ln110_14_fu_826_p1 = conv13_cast_reg_1760;

assign mul_ln110_15_fu_843_p0 = ((cmp12[0:0] == 1'b1) ? shl_ln108_15_fu_831_p2 : l_val_V_15_fu_406_p4);

assign mul_ln110_15_fu_843_p1 = conv13_cast_reg_1760;

assign mul_ln110_16_fu_860_p0 = ((cmp12[0:0] == 1'b1) ? shl_ln108_16_fu_848_p2 : l_val_V_16_fu_416_p4);

assign mul_ln110_16_fu_860_p1 = conv13_cast_reg_1760;

assign mul_ln110_17_fu_877_p0 = ((cmp12[0:0] == 1'b1) ? shl_ln108_17_fu_865_p2 : l_val_V_17_fu_426_p4);

assign mul_ln110_17_fu_877_p1 = conv13_cast_reg_1760;

assign mul_ln110_18_fu_894_p0 = ((cmp12[0:0] == 1'b1) ? shl_ln108_18_fu_882_p2 : l_val_V_18_fu_436_p4);

assign mul_ln110_18_fu_894_p1 = conv13_cast_reg_1760;

assign mul_ln110_19_fu_911_p0 = ((cmp12[0:0] == 1'b1) ? shl_ln108_19_fu_899_p2 : l_val_V_19_fu_446_p4);

assign mul_ln110_19_fu_911_p1 = conv13_cast_reg_1760;

assign mul_ln110_1_fu_605_p0 = ((cmp12[0:0] == 1'b1) ? shl_ln108_1_fu_593_p2 : l_val_V_1_fu_266_p4);

assign mul_ln110_1_fu_605_p1 = conv13_cast_reg_1760;

assign mul_ln110_20_fu_928_p0 = ((cmp12[0:0] == 1'b1) ? shl_ln108_20_fu_916_p2 : l_val_V_20_fu_456_p4);

assign mul_ln110_20_fu_928_p1 = conv13_cast_reg_1760;

assign mul_ln110_21_fu_945_p0 = ((cmp12[0:0] == 1'b1) ? shl_ln108_21_fu_933_p2 : l_val_V_21_fu_466_p4);

assign mul_ln110_21_fu_945_p1 = conv13_cast_reg_1760;

assign mul_ln110_22_fu_962_p0 = ((cmp12[0:0] == 1'b1) ? shl_ln108_22_fu_950_p2 : l_val_V_22_fu_476_p4);

assign mul_ln110_22_fu_962_p1 = conv13_cast_reg_1760;

assign mul_ln110_23_fu_979_p0 = ((cmp12[0:0] == 1'b1) ? shl_ln108_23_fu_967_p2 : l_val_V_23_fu_486_p4);

assign mul_ln110_23_fu_979_p1 = conv13_cast_reg_1760;

assign mul_ln110_24_fu_996_p0 = ((cmp12[0:0] == 1'b1) ? shl_ln108_24_fu_984_p2 : l_val_V_24_fu_496_p4);

assign mul_ln110_24_fu_996_p1 = conv13_cast_reg_1760;

assign mul_ln110_25_fu_1013_p0 = ((cmp12[0:0] == 1'b1) ? shl_ln108_25_fu_1001_p2 : l_val_V_25_fu_506_p4);

assign mul_ln110_25_fu_1013_p1 = conv13_cast_reg_1760;

assign mul_ln110_26_fu_1030_p0 = ((cmp12[0:0] == 1'b1) ? shl_ln108_26_fu_1018_p2 : l_val_V_26_fu_516_p4);

assign mul_ln110_26_fu_1030_p1 = conv13_cast_reg_1760;

assign mul_ln110_27_fu_1047_p0 = ((cmp12[0:0] == 1'b1) ? shl_ln108_27_fu_1035_p2 : l_val_V_27_fu_526_p4);

assign mul_ln110_27_fu_1047_p1 = conv13_cast_reg_1760;

assign mul_ln110_28_fu_1064_p0 = ((cmp12[0:0] == 1'b1) ? shl_ln108_28_fu_1052_p2 : l_val_V_28_fu_536_p4);

assign mul_ln110_28_fu_1064_p1 = conv13_cast_reg_1760;

assign mul_ln110_29_fu_1081_p0 = ((cmp12[0:0] == 1'b1) ? shl_ln108_29_fu_1069_p2 : l_val_V_29_fu_546_p4);

assign mul_ln110_29_fu_1081_p1 = conv13_cast_reg_1760;

assign mul_ln110_2_fu_622_p0 = ((cmp12[0:0] == 1'b1) ? shl_ln108_2_fu_610_p2 : l_val_V_2_fu_276_p4);

assign mul_ln110_2_fu_622_p1 = conv13_cast_reg_1760;

assign mul_ln110_30_fu_1098_p0 = ((cmp12[0:0] == 1'b1) ? shl_ln108_30_fu_1086_p2 : l_val_V_30_fu_556_p4);

assign mul_ln110_30_fu_1098_p1 = conv13_cast_reg_1760;

assign mul_ln110_31_fu_1115_p0 = ((cmp12[0:0] == 1'b1) ? shl_ln108_31_fu_1103_p2 : l_val_V_31_fu_566_p4);

assign mul_ln110_31_fu_1115_p1 = conv13_cast_reg_1760;

assign mul_ln110_3_fu_639_p0 = ((cmp12[0:0] == 1'b1) ? shl_ln108_3_fu_627_p2 : l_val_V_3_fu_286_p4);

assign mul_ln110_3_fu_639_p1 = conv13_cast_reg_1760;

assign mul_ln110_4_fu_656_p0 = ((cmp12[0:0] == 1'b1) ? shl_ln108_4_fu_644_p2 : l_val_V_4_fu_296_p4);

assign mul_ln110_4_fu_656_p1 = conv13_cast_reg_1760;

assign mul_ln110_5_fu_673_p0 = ((cmp12[0:0] == 1'b1) ? shl_ln108_5_fu_661_p2 : l_val_V_5_fu_306_p4);

assign mul_ln110_5_fu_673_p1 = conv13_cast_reg_1760;

assign mul_ln110_6_fu_690_p0 = ((cmp12[0:0] == 1'b1) ? shl_ln108_6_fu_678_p2 : l_val_V_6_fu_316_p4);

assign mul_ln110_6_fu_690_p1 = conv13_cast_reg_1760;

assign mul_ln110_7_fu_707_p0 = ((cmp12[0:0] == 1'b1) ? shl_ln108_7_fu_695_p2 : l_val_V_7_fu_326_p4);

assign mul_ln110_7_fu_707_p1 = conv13_cast_reg_1760;

assign mul_ln110_8_fu_724_p0 = ((cmp12[0:0] == 1'b1) ? shl_ln108_8_fu_712_p2 : l_val_V_8_fu_336_p4);

assign mul_ln110_8_fu_724_p1 = conv13_cast_reg_1760;

assign mul_ln110_9_fu_741_p0 = ((cmp12[0:0] == 1'b1) ? shl_ln108_9_fu_729_p2 : l_val_V_9_fu_346_p4);

assign mul_ln110_9_fu_741_p1 = conv13_cast_reg_1760;

assign mul_ln110_fu_588_p0 = ((cmp12[0:0] == 1'b1) ? shl_ln108_fu_576_p2 : l_val_V_fu_262_p1);

assign mul_ln110_fu_588_p1 = conv13_cast_reg_1760;

assign p_Result_s_fu_1536_p33 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{trunc_ln116_31_fu_1532_p1}, {trunc_ln116_30_fu_1519_p1}}, {trunc_ln116_29_fu_1506_p1}}, {trunc_ln116_28_fu_1493_p1}}, {trunc_ln116_27_fu_1480_p1}}, {trunc_ln116_26_fu_1467_p1}}, {trunc_ln116_25_fu_1454_p1}}, {trunc_ln116_24_fu_1441_p1}}, {trunc_ln116_23_fu_1428_p1}}, {trunc_ln116_22_fu_1415_p1}}, {trunc_ln116_21_fu_1402_p1}}, {trunc_ln116_20_fu_1389_p1}}, {trunc_ln116_19_fu_1376_p1}}, {trunc_ln116_18_fu_1363_p1}}, {trunc_ln116_17_fu_1350_p1}}, {trunc_ln116_16_fu_1337_p1}}, {trunc_ln116_15_fu_1324_p1}}, {trunc_ln116_14_fu_1311_p1}}, {trunc_ln116_13_fu_1298_p1}}, {trunc_ln116_12_fu_1285_p1}}, {trunc_ln116_11_fu_1272_p1}}, {trunc_ln116_10_fu_1259_p1}}, {trunc_ln116_9_fu_1246_p1}}, {trunc_ln116_8_fu_1233_p1}}, {trunc_ln116_7_fu_1220_p1}}, {trunc_ln116_6_fu_1207_p1}}, {trunc_ln116_5_fu_1194_p1}}, {trunc_ln116_4_fu_1181_p1}}, {trunc_ln116_3_fu_1168_p1}}, {trunc_ln116_2_fu_1155_p1}}, {trunc_ln116_1_fu_1142_p1}}, {trunc_ln116_fu_1129_p1}};

assign quant_out2_din = $signed(p_Result_s_fu_1536_p33);

assign shl_ln108_10_fu_746_p2 = l_val_V_10_fu_356_p4 << left_shift;

assign shl_ln108_11_fu_763_p2 = l_val_V_11_fu_366_p4 << left_shift;

assign shl_ln108_12_fu_780_p2 = l_val_V_12_fu_376_p4 << left_shift;

assign shl_ln108_13_fu_797_p2 = l_val_V_13_fu_386_p4 << left_shift;

assign shl_ln108_14_fu_814_p2 = l_val_V_14_fu_396_p4 << left_shift;

assign shl_ln108_15_fu_831_p2 = l_val_V_15_fu_406_p4 << left_shift;

assign shl_ln108_16_fu_848_p2 = l_val_V_16_fu_416_p4 << left_shift;

assign shl_ln108_17_fu_865_p2 = l_val_V_17_fu_426_p4 << left_shift;

assign shl_ln108_18_fu_882_p2 = l_val_V_18_fu_436_p4 << left_shift;

assign shl_ln108_19_fu_899_p2 = l_val_V_19_fu_446_p4 << left_shift;

assign shl_ln108_1_fu_593_p2 = l_val_V_1_fu_266_p4 << left_shift;

assign shl_ln108_20_fu_916_p2 = l_val_V_20_fu_456_p4 << left_shift;

assign shl_ln108_21_fu_933_p2 = l_val_V_21_fu_466_p4 << left_shift;

assign shl_ln108_22_fu_950_p2 = l_val_V_22_fu_476_p4 << left_shift;

assign shl_ln108_23_fu_967_p2 = l_val_V_23_fu_486_p4 << left_shift;

assign shl_ln108_24_fu_984_p2 = l_val_V_24_fu_496_p4 << left_shift;

assign shl_ln108_25_fu_1001_p2 = l_val_V_25_fu_506_p4 << left_shift;

assign shl_ln108_26_fu_1018_p2 = l_val_V_26_fu_516_p4 << left_shift;

assign shl_ln108_27_fu_1035_p2 = l_val_V_27_fu_526_p4 << left_shift;

assign shl_ln108_28_fu_1052_p2 = l_val_V_28_fu_536_p4 << left_shift;

assign shl_ln108_29_fu_1069_p2 = l_val_V_29_fu_546_p4 << left_shift;

assign shl_ln108_2_fu_610_p2 = l_val_V_2_fu_276_p4 << left_shift;

assign shl_ln108_30_fu_1086_p2 = l_val_V_30_fu_556_p4 << left_shift;

assign shl_ln108_31_fu_1103_p2 = l_val_V_31_fu_566_p4 << left_shift;

assign shl_ln108_3_fu_627_p2 = l_val_V_3_fu_286_p4 << left_shift;

assign shl_ln108_4_fu_644_p2 = l_val_V_4_fu_296_p4 << left_shift;

assign shl_ln108_5_fu_661_p2 = l_val_V_5_fu_306_p4 << left_shift;

assign shl_ln108_6_fu_678_p2 = l_val_V_6_fu_316_p4 << left_shift;

assign shl_ln108_7_fu_695_p2 = l_val_V_7_fu_326_p4 << left_shift;

assign shl_ln108_8_fu_712_p2 = l_val_V_8_fu_336_p4 << left_shift;

assign shl_ln108_9_fu_729_p2 = l_val_V_9_fu_346_p4 << left_shift;

assign shl_ln108_fu_576_p2 = l_val_V_fu_262_p1 << left_shift;

assign trunc_ln116_10_fu_1259_p1 = ashr_ln114_10_fu_1254_p2[7:0];

assign trunc_ln116_11_fu_1272_p1 = ashr_ln114_11_fu_1267_p2[7:0];

assign trunc_ln116_12_fu_1285_p1 = ashr_ln114_12_fu_1280_p2[7:0];

assign trunc_ln116_13_fu_1298_p1 = ashr_ln114_13_fu_1293_p2[7:0];

assign trunc_ln116_14_fu_1311_p1 = ashr_ln114_14_fu_1306_p2[7:0];

assign trunc_ln116_15_fu_1324_p1 = ashr_ln114_15_fu_1319_p2[7:0];

assign trunc_ln116_16_fu_1337_p1 = ashr_ln114_16_fu_1332_p2[7:0];

assign trunc_ln116_17_fu_1350_p1 = ashr_ln114_17_fu_1345_p2[7:0];

assign trunc_ln116_18_fu_1363_p1 = ashr_ln114_18_fu_1358_p2[7:0];

assign trunc_ln116_19_fu_1376_p1 = ashr_ln114_19_fu_1371_p2[7:0];

assign trunc_ln116_1_fu_1142_p1 = ashr_ln114_1_fu_1137_p2[7:0];

assign trunc_ln116_20_fu_1389_p1 = ashr_ln114_20_fu_1384_p2[7:0];

assign trunc_ln116_21_fu_1402_p1 = ashr_ln114_21_fu_1397_p2[7:0];

assign trunc_ln116_22_fu_1415_p1 = ashr_ln114_22_fu_1410_p2[7:0];

assign trunc_ln116_23_fu_1428_p1 = ashr_ln114_23_fu_1423_p2[7:0];

assign trunc_ln116_24_fu_1441_p1 = ashr_ln114_24_fu_1436_p2[7:0];

assign trunc_ln116_25_fu_1454_p1 = ashr_ln114_25_fu_1449_p2[7:0];

assign trunc_ln116_26_fu_1467_p1 = ashr_ln114_26_fu_1462_p2[7:0];

assign trunc_ln116_27_fu_1480_p1 = ashr_ln114_27_fu_1475_p2[7:0];

assign trunc_ln116_28_fu_1493_p1 = ashr_ln114_28_fu_1488_p2[7:0];

assign trunc_ln116_29_fu_1506_p1 = ashr_ln114_29_fu_1501_p2[7:0];

assign trunc_ln116_2_fu_1155_p1 = ashr_ln114_2_fu_1150_p2[7:0];

assign trunc_ln116_30_fu_1519_p1 = ashr_ln114_30_fu_1514_p2[7:0];

assign trunc_ln116_31_fu_1532_p1 = ashr_ln114_31_fu_1527_p2[0:0];

assign trunc_ln116_3_fu_1168_p1 = ashr_ln114_3_fu_1163_p2[7:0];

assign trunc_ln116_4_fu_1181_p1 = ashr_ln114_4_fu_1176_p2[7:0];

assign trunc_ln116_5_fu_1194_p1 = ashr_ln114_5_fu_1189_p2[7:0];

assign trunc_ln116_6_fu_1207_p1 = ashr_ln114_6_fu_1202_p2[7:0];

assign trunc_ln116_7_fu_1220_p1 = ashr_ln114_7_fu_1215_p2[7:0];

assign trunc_ln116_8_fu_1233_p1 = ashr_ln114_8_fu_1228_p2[7:0];

assign trunc_ln116_9_fu_1246_p1 = ashr_ln114_9_fu_1241_p2[7:0];

assign trunc_ln116_fu_1129_p1 = ashr_ln114_fu_1124_p2[7:0];

endmodule //sparse_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1
