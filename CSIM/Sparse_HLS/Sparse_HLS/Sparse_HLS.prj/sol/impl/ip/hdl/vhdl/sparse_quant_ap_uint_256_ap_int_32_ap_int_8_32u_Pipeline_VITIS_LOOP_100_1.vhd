-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sparse_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_out1_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
    data_out1_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
    data_out1_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
    data_out1_empty_n : IN STD_LOGIC;
    data_out1_read : OUT STD_LOGIC;
    quant_out2_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    quant_out2_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    quant_out2_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    quant_out2_full_n : IN STD_LOGIC;
    quant_out2_write : OUT STD_LOGIC;
    div_cast : IN STD_LOGIC_VECTOR (26 downto 0);
    left_shift : IN STD_LOGIC_VECTOR (31 downto 0);
    cmp12 : IN STD_LOGIC_VECTOR (0 downto 0);
    conv13 : IN STD_LOGIC_VECTOR (15 downto 0);
    pos_rounding_value : IN STD_LOGIC_VECTOR (31 downto 0);
    total_right_shift : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sparse_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv27_1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv32_21F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000011111";
    constant ap_const_lv32_220 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000100000";
    constant ap_const_lv32_23F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000111111";
    constant ap_const_lv32_240 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001000000";
    constant ap_const_lv32_25F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001011111";
    constant ap_const_lv32_260 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001100000";
    constant ap_const_lv32_27F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001111111";
    constant ap_const_lv32_280 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010000000";
    constant ap_const_lv32_29F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010011111";
    constant ap_const_lv32_2A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010100000";
    constant ap_const_lv32_2BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010111111";
    constant ap_const_lv32_2C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011000000";
    constant ap_const_lv32_2DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011011111";
    constant ap_const_lv32_2E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011100000";
    constant ap_const_lv32_2FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011111111";
    constant ap_const_lv32_300 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100000000";
    constant ap_const_lv32_31F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100011111";
    constant ap_const_lv32_320 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100100000";
    constant ap_const_lv32_33F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100111111";
    constant ap_const_lv32_340 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101000000";
    constant ap_const_lv32_35F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101011111";
    constant ap_const_lv32_360 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101100000";
    constant ap_const_lv32_37F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101111111";
    constant ap_const_lv32_380 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110000000";
    constant ap_const_lv32_39F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110011111";
    constant ap_const_lv32_3A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110100000";
    constant ap_const_lv32_3BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110111111";
    constant ap_const_lv32_3C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111000000";
    constant ap_const_lv32_3DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111011111";
    constant ap_const_lv32_3E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111100000";
    constant ap_const_lv32_3FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln100_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal data_out1_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal quant_out2_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal conv13_cast_fu_233_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv13_cast_reg_1760 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_fu_588_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_reg_1800 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_1_fu_605_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_1_reg_1805 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_2_fu_622_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_2_reg_1810 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_3_fu_639_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_3_reg_1815 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_4_fu_656_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_4_reg_1820 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_5_fu_673_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_5_reg_1825 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_6_fu_690_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_6_reg_1830 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_7_fu_707_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_7_reg_1835 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_8_fu_724_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_8_reg_1840 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_9_fu_741_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_9_reg_1845 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_10_fu_758_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_10_reg_1850 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_11_fu_775_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_11_reg_1855 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_12_fu_792_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_12_reg_1860 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_13_fu_809_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_13_reg_1865 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_14_fu_826_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_14_reg_1870 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_15_fu_843_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_15_reg_1875 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_16_fu_860_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_16_reg_1880 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_17_fu_877_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_17_reg_1885 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_18_fu_894_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_18_reg_1890 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_19_fu_911_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_19_reg_1895 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_20_fu_928_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_20_reg_1900 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_21_fu_945_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_21_reg_1905 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_22_fu_962_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_22_reg_1910 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_23_fu_979_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_23_reg_1915 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_24_fu_996_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_24_reg_1920 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_25_fu_1013_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_25_reg_1925 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_26_fu_1030_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_26_reg_1930 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_27_fu_1047_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_27_reg_1935 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_28_fu_1064_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_28_reg_1940 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_29_fu_1081_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_29_reg_1945 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_30_fu_1098_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_30_reg_1950 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_31_fu_1115_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_31_reg_1955 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_180 : STD_LOGIC_VECTOR (26 downto 0);
    signal i_3_fu_251_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal l_val_V_fu_262_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln108_fu_576_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_fu_588_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_fu_588_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal l_val_V_1_fu_266_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln108_1_fu_593_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_1_fu_605_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_1_fu_605_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal l_val_V_2_fu_276_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln108_2_fu_610_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_2_fu_622_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_2_fu_622_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal l_val_V_3_fu_286_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln108_3_fu_627_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_3_fu_639_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_3_fu_639_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal l_val_V_4_fu_296_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln108_4_fu_644_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_4_fu_656_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_4_fu_656_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal l_val_V_5_fu_306_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln108_5_fu_661_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_5_fu_673_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_5_fu_673_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal l_val_V_6_fu_316_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln108_6_fu_678_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_6_fu_690_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_6_fu_690_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal l_val_V_7_fu_326_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln108_7_fu_695_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_7_fu_707_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_7_fu_707_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal l_val_V_8_fu_336_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln108_8_fu_712_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_8_fu_724_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_8_fu_724_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal l_val_V_9_fu_346_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln108_9_fu_729_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_9_fu_741_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_9_fu_741_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal l_val_V_10_fu_356_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln108_10_fu_746_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_10_fu_758_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_10_fu_758_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal l_val_V_11_fu_366_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln108_11_fu_763_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_11_fu_775_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_11_fu_775_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal l_val_V_12_fu_376_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln108_12_fu_780_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_12_fu_792_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_12_fu_792_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal l_val_V_13_fu_386_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln108_13_fu_797_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_13_fu_809_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_13_fu_809_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal l_val_V_14_fu_396_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln108_14_fu_814_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_14_fu_826_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_14_fu_826_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal l_val_V_15_fu_406_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln108_15_fu_831_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_15_fu_843_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_15_fu_843_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal l_val_V_16_fu_416_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln108_16_fu_848_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_16_fu_860_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_16_fu_860_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal l_val_V_17_fu_426_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln108_17_fu_865_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_17_fu_877_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_17_fu_877_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal l_val_V_18_fu_436_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln108_18_fu_882_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_18_fu_894_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_18_fu_894_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal l_val_V_19_fu_446_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln108_19_fu_899_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_19_fu_911_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_19_fu_911_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal l_val_V_20_fu_456_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln108_20_fu_916_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_20_fu_928_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_20_fu_928_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal l_val_V_21_fu_466_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln108_21_fu_933_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_21_fu_945_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_21_fu_945_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal l_val_V_22_fu_476_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln108_22_fu_950_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_22_fu_962_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_22_fu_962_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal l_val_V_23_fu_486_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln108_23_fu_967_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_23_fu_979_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_23_fu_979_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal l_val_V_24_fu_496_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln108_24_fu_984_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_24_fu_996_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_24_fu_996_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal l_val_V_25_fu_506_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln108_25_fu_1001_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_25_fu_1013_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_25_fu_1013_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal l_val_V_26_fu_516_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln108_26_fu_1018_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_26_fu_1030_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_26_fu_1030_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal l_val_V_27_fu_526_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln108_27_fu_1035_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_27_fu_1047_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_27_fu_1047_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal l_val_V_28_fu_536_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln108_28_fu_1052_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_28_fu_1064_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_28_fu_1064_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal l_val_V_29_fu_546_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln108_29_fu_1069_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_29_fu_1081_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_29_fu_1081_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal l_val_V_30_fu_556_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln108_30_fu_1086_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_30_fu_1098_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_30_fu_1098_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal l_val_V_31_fu_566_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln108_31_fu_1103_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_31_fu_1115_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln110_31_fu_1115_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln113_fu_1120_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln114_fu_1124_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_1_fu_1133_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln114_1_fu_1137_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_2_fu_1146_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln114_2_fu_1150_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_3_fu_1159_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln114_3_fu_1163_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_4_fu_1172_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln114_4_fu_1176_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_5_fu_1185_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln114_5_fu_1189_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_6_fu_1198_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln114_6_fu_1202_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_7_fu_1211_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln114_7_fu_1215_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_8_fu_1224_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln114_8_fu_1228_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_9_fu_1237_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln114_9_fu_1241_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_10_fu_1250_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln114_10_fu_1254_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_11_fu_1263_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln114_11_fu_1267_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_12_fu_1276_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln114_12_fu_1280_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_13_fu_1289_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln114_13_fu_1293_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_14_fu_1302_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln114_14_fu_1306_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_15_fu_1315_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln114_15_fu_1319_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_16_fu_1328_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln114_16_fu_1332_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_17_fu_1341_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln114_17_fu_1345_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_18_fu_1354_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln114_18_fu_1358_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_19_fu_1367_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln114_19_fu_1371_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_20_fu_1380_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln114_20_fu_1384_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_21_fu_1393_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln114_21_fu_1397_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_22_fu_1406_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln114_22_fu_1410_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_23_fu_1419_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln114_23_fu_1423_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_24_fu_1432_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln114_24_fu_1436_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_25_fu_1445_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln114_25_fu_1449_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_26_fu_1458_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln114_26_fu_1462_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_27_fu_1471_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln114_27_fu_1475_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_28_fu_1484_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln114_28_fu_1488_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_29_fu_1497_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln114_29_fu_1501_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_30_fu_1510_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln114_30_fu_1514_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln113_31_fu_1523_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ashr_ln114_31_fu_1527_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln116_31_fu_1532_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln116_30_fu_1519_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln116_29_fu_1506_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln116_28_fu_1493_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln116_27_fu_1480_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln116_26_fu_1467_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln116_25_fu_1454_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln116_24_fu_1441_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln116_23_fu_1428_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln116_22_fu_1415_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln116_21_fu_1402_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln116_20_fu_1389_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln116_19_fu_1376_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln116_18_fu_1363_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln116_17_fu_1350_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln116_16_fu_1337_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln116_15_fu_1324_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln116_14_fu_1311_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln116_13_fu_1298_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln116_12_fu_1285_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln116_11_fu_1272_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln116_10_fu_1259_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln116_9_fu_1246_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln116_8_fu_1233_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln116_7_fu_1220_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln116_6_fu_1207_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln116_5_fu_1194_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln116_4_fu_1181_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln116_3_fu_1168_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln116_2_fu_1155_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln116_1_fu_1142_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln116_fu_1129_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_fu_1536_p33 : STD_LOGIC_VECTOR (248 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sparse_mul_32s_16s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sparse_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_16s_32_1_1_U37 : component sparse_mul_32s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln110_fu_588_p0,
        din1 => mul_ln110_fu_588_p1,
        dout => mul_ln110_fu_588_p2);

    mul_32s_16s_32_1_1_U38 : component sparse_mul_32s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln110_1_fu_605_p0,
        din1 => mul_ln110_1_fu_605_p1,
        dout => mul_ln110_1_fu_605_p2);

    mul_32s_16s_32_1_1_U39 : component sparse_mul_32s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln110_2_fu_622_p0,
        din1 => mul_ln110_2_fu_622_p1,
        dout => mul_ln110_2_fu_622_p2);

    mul_32s_16s_32_1_1_U40 : component sparse_mul_32s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln110_3_fu_639_p0,
        din1 => mul_ln110_3_fu_639_p1,
        dout => mul_ln110_3_fu_639_p2);

    mul_32s_16s_32_1_1_U41 : component sparse_mul_32s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln110_4_fu_656_p0,
        din1 => mul_ln110_4_fu_656_p1,
        dout => mul_ln110_4_fu_656_p2);

    mul_32s_16s_32_1_1_U42 : component sparse_mul_32s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln110_5_fu_673_p0,
        din1 => mul_ln110_5_fu_673_p1,
        dout => mul_ln110_5_fu_673_p2);

    mul_32s_16s_32_1_1_U43 : component sparse_mul_32s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln110_6_fu_690_p0,
        din1 => mul_ln110_6_fu_690_p1,
        dout => mul_ln110_6_fu_690_p2);

    mul_32s_16s_32_1_1_U44 : component sparse_mul_32s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln110_7_fu_707_p0,
        din1 => mul_ln110_7_fu_707_p1,
        dout => mul_ln110_7_fu_707_p2);

    mul_32s_16s_32_1_1_U45 : component sparse_mul_32s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln110_8_fu_724_p0,
        din1 => mul_ln110_8_fu_724_p1,
        dout => mul_ln110_8_fu_724_p2);

    mul_32s_16s_32_1_1_U46 : component sparse_mul_32s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln110_9_fu_741_p0,
        din1 => mul_ln110_9_fu_741_p1,
        dout => mul_ln110_9_fu_741_p2);

    mul_32s_16s_32_1_1_U47 : component sparse_mul_32s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln110_10_fu_758_p0,
        din1 => mul_ln110_10_fu_758_p1,
        dout => mul_ln110_10_fu_758_p2);

    mul_32s_16s_32_1_1_U48 : component sparse_mul_32s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln110_11_fu_775_p0,
        din1 => mul_ln110_11_fu_775_p1,
        dout => mul_ln110_11_fu_775_p2);

    mul_32s_16s_32_1_1_U49 : component sparse_mul_32s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln110_12_fu_792_p0,
        din1 => mul_ln110_12_fu_792_p1,
        dout => mul_ln110_12_fu_792_p2);

    mul_32s_16s_32_1_1_U50 : component sparse_mul_32s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln110_13_fu_809_p0,
        din1 => mul_ln110_13_fu_809_p1,
        dout => mul_ln110_13_fu_809_p2);

    mul_32s_16s_32_1_1_U51 : component sparse_mul_32s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln110_14_fu_826_p0,
        din1 => mul_ln110_14_fu_826_p1,
        dout => mul_ln110_14_fu_826_p2);

    mul_32s_16s_32_1_1_U52 : component sparse_mul_32s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln110_15_fu_843_p0,
        din1 => mul_ln110_15_fu_843_p1,
        dout => mul_ln110_15_fu_843_p2);

    mul_32s_16s_32_1_1_U53 : component sparse_mul_32s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln110_16_fu_860_p0,
        din1 => mul_ln110_16_fu_860_p1,
        dout => mul_ln110_16_fu_860_p2);

    mul_32s_16s_32_1_1_U54 : component sparse_mul_32s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln110_17_fu_877_p0,
        din1 => mul_ln110_17_fu_877_p1,
        dout => mul_ln110_17_fu_877_p2);

    mul_32s_16s_32_1_1_U55 : component sparse_mul_32s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln110_18_fu_894_p0,
        din1 => mul_ln110_18_fu_894_p1,
        dout => mul_ln110_18_fu_894_p2);

    mul_32s_16s_32_1_1_U56 : component sparse_mul_32s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln110_19_fu_911_p0,
        din1 => mul_ln110_19_fu_911_p1,
        dout => mul_ln110_19_fu_911_p2);

    mul_32s_16s_32_1_1_U57 : component sparse_mul_32s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln110_20_fu_928_p0,
        din1 => mul_ln110_20_fu_928_p1,
        dout => mul_ln110_20_fu_928_p2);

    mul_32s_16s_32_1_1_U58 : component sparse_mul_32s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln110_21_fu_945_p0,
        din1 => mul_ln110_21_fu_945_p1,
        dout => mul_ln110_21_fu_945_p2);

    mul_32s_16s_32_1_1_U59 : component sparse_mul_32s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln110_22_fu_962_p0,
        din1 => mul_ln110_22_fu_962_p1,
        dout => mul_ln110_22_fu_962_p2);

    mul_32s_16s_32_1_1_U60 : component sparse_mul_32s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln110_23_fu_979_p0,
        din1 => mul_ln110_23_fu_979_p1,
        dout => mul_ln110_23_fu_979_p2);

    mul_32s_16s_32_1_1_U61 : component sparse_mul_32s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln110_24_fu_996_p0,
        din1 => mul_ln110_24_fu_996_p1,
        dout => mul_ln110_24_fu_996_p2);

    mul_32s_16s_32_1_1_U62 : component sparse_mul_32s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln110_25_fu_1013_p0,
        din1 => mul_ln110_25_fu_1013_p1,
        dout => mul_ln110_25_fu_1013_p2);

    mul_32s_16s_32_1_1_U63 : component sparse_mul_32s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln110_26_fu_1030_p0,
        din1 => mul_ln110_26_fu_1030_p1,
        dout => mul_ln110_26_fu_1030_p2);

    mul_32s_16s_32_1_1_U64 : component sparse_mul_32s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln110_27_fu_1047_p0,
        din1 => mul_ln110_27_fu_1047_p1,
        dout => mul_ln110_27_fu_1047_p2);

    mul_32s_16s_32_1_1_U65 : component sparse_mul_32s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln110_28_fu_1064_p0,
        din1 => mul_ln110_28_fu_1064_p1,
        dout => mul_ln110_28_fu_1064_p2);

    mul_32s_16s_32_1_1_U66 : component sparse_mul_32s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln110_29_fu_1081_p0,
        din1 => mul_ln110_29_fu_1081_p1,
        dout => mul_ln110_29_fu_1081_p2);

    mul_32s_16s_32_1_1_U67 : component sparse_mul_32s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln110_30_fu_1098_p0,
        din1 => mul_ln110_30_fu_1098_p1,
        dout => mul_ln110_30_fu_1098_p2);

    mul_32s_16s_32_1_1_U68 : component sparse_mul_32s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln110_31_fu_1115_p0,
        din1 => mul_ln110_31_fu_1115_p1,
        dout => mul_ln110_31_fu_1115_p2);

    flow_control_loop_pipe_sequential_init_U : component sparse_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln100_fu_245_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_180 <= i_3_fu_251_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_180 <= ap_const_lv27_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                conv13_cast_reg_1760 <= conv13_cast_fu_233_p1;
                mul_ln110_10_reg_1850 <= mul_ln110_10_fu_758_p2;
                mul_ln110_11_reg_1855 <= mul_ln110_11_fu_775_p2;
                mul_ln110_12_reg_1860 <= mul_ln110_12_fu_792_p2;
                mul_ln110_13_reg_1865 <= mul_ln110_13_fu_809_p2;
                mul_ln110_14_reg_1870 <= mul_ln110_14_fu_826_p2;
                mul_ln110_15_reg_1875 <= mul_ln110_15_fu_843_p2;
                mul_ln110_16_reg_1880 <= mul_ln110_16_fu_860_p2;
                mul_ln110_17_reg_1885 <= mul_ln110_17_fu_877_p2;
                mul_ln110_18_reg_1890 <= mul_ln110_18_fu_894_p2;
                mul_ln110_19_reg_1895 <= mul_ln110_19_fu_911_p2;
                mul_ln110_1_reg_1805 <= mul_ln110_1_fu_605_p2;
                mul_ln110_20_reg_1900 <= mul_ln110_20_fu_928_p2;
                mul_ln110_21_reg_1905 <= mul_ln110_21_fu_945_p2;
                mul_ln110_22_reg_1910 <= mul_ln110_22_fu_962_p2;
                mul_ln110_23_reg_1915 <= mul_ln110_23_fu_979_p2;
                mul_ln110_24_reg_1920 <= mul_ln110_24_fu_996_p2;
                mul_ln110_25_reg_1925 <= mul_ln110_25_fu_1013_p2;
                mul_ln110_26_reg_1930 <= mul_ln110_26_fu_1030_p2;
                mul_ln110_27_reg_1935 <= mul_ln110_27_fu_1047_p2;
                mul_ln110_28_reg_1940 <= mul_ln110_28_fu_1064_p2;
                mul_ln110_29_reg_1945 <= mul_ln110_29_fu_1081_p2;
                mul_ln110_2_reg_1810 <= mul_ln110_2_fu_622_p2;
                mul_ln110_30_reg_1950 <= mul_ln110_30_fu_1098_p2;
                mul_ln110_31_reg_1955 <= mul_ln110_31_fu_1115_p2;
                mul_ln110_3_reg_1815 <= mul_ln110_3_fu_639_p2;
                mul_ln110_4_reg_1820 <= mul_ln110_4_fu_656_p2;
                mul_ln110_5_reg_1825 <= mul_ln110_5_fu_673_p2;
                mul_ln110_6_reg_1830 <= mul_ln110_6_fu_690_p2;
                mul_ln110_7_reg_1835 <= mul_ln110_7_fu_707_p2;
                mul_ln110_8_reg_1840 <= mul_ln110_8_fu_724_p2;
                mul_ln110_9_reg_1845 <= mul_ln110_9_fu_741_p2;
                mul_ln110_reg_1800 <= mul_ln110_fu_588_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln113_10_fu_1250_p2 <= std_logic_vector(unsigned(mul_ln110_10_reg_1850) + unsigned(pos_rounding_value));
    add_ln113_11_fu_1263_p2 <= std_logic_vector(unsigned(mul_ln110_11_reg_1855) + unsigned(pos_rounding_value));
    add_ln113_12_fu_1276_p2 <= std_logic_vector(unsigned(mul_ln110_12_reg_1860) + unsigned(pos_rounding_value));
    add_ln113_13_fu_1289_p2 <= std_logic_vector(unsigned(mul_ln110_13_reg_1865) + unsigned(pos_rounding_value));
    add_ln113_14_fu_1302_p2 <= std_logic_vector(unsigned(mul_ln110_14_reg_1870) + unsigned(pos_rounding_value));
    add_ln113_15_fu_1315_p2 <= std_logic_vector(unsigned(mul_ln110_15_reg_1875) + unsigned(pos_rounding_value));
    add_ln113_16_fu_1328_p2 <= std_logic_vector(unsigned(mul_ln110_16_reg_1880) + unsigned(pos_rounding_value));
    add_ln113_17_fu_1341_p2 <= std_logic_vector(unsigned(mul_ln110_17_reg_1885) + unsigned(pos_rounding_value));
    add_ln113_18_fu_1354_p2 <= std_logic_vector(unsigned(mul_ln110_18_reg_1890) + unsigned(pos_rounding_value));
    add_ln113_19_fu_1367_p2 <= std_logic_vector(unsigned(mul_ln110_19_reg_1895) + unsigned(pos_rounding_value));
    add_ln113_1_fu_1133_p2 <= std_logic_vector(unsigned(mul_ln110_1_reg_1805) + unsigned(pos_rounding_value));
    add_ln113_20_fu_1380_p2 <= std_logic_vector(unsigned(mul_ln110_20_reg_1900) + unsigned(pos_rounding_value));
    add_ln113_21_fu_1393_p2 <= std_logic_vector(unsigned(mul_ln110_21_reg_1905) + unsigned(pos_rounding_value));
    add_ln113_22_fu_1406_p2 <= std_logic_vector(unsigned(mul_ln110_22_reg_1910) + unsigned(pos_rounding_value));
    add_ln113_23_fu_1419_p2 <= std_logic_vector(unsigned(mul_ln110_23_reg_1915) + unsigned(pos_rounding_value));
    add_ln113_24_fu_1432_p2 <= std_logic_vector(unsigned(mul_ln110_24_reg_1920) + unsigned(pos_rounding_value));
    add_ln113_25_fu_1445_p2 <= std_logic_vector(unsigned(mul_ln110_25_reg_1925) + unsigned(pos_rounding_value));
    add_ln113_26_fu_1458_p2 <= std_logic_vector(unsigned(mul_ln110_26_reg_1930) + unsigned(pos_rounding_value));
    add_ln113_27_fu_1471_p2 <= std_logic_vector(unsigned(mul_ln110_27_reg_1935) + unsigned(pos_rounding_value));
    add_ln113_28_fu_1484_p2 <= std_logic_vector(unsigned(mul_ln110_28_reg_1940) + unsigned(pos_rounding_value));
    add_ln113_29_fu_1497_p2 <= std_logic_vector(unsigned(mul_ln110_29_reg_1945) + unsigned(pos_rounding_value));
    add_ln113_2_fu_1146_p2 <= std_logic_vector(unsigned(mul_ln110_2_reg_1810) + unsigned(pos_rounding_value));
    add_ln113_30_fu_1510_p2 <= std_logic_vector(unsigned(mul_ln110_30_reg_1950) + unsigned(pos_rounding_value));
    add_ln113_31_fu_1523_p2 <= std_logic_vector(unsigned(mul_ln110_31_reg_1955) + unsigned(pos_rounding_value));
    add_ln113_3_fu_1159_p2 <= std_logic_vector(unsigned(mul_ln110_3_reg_1815) + unsigned(pos_rounding_value));
    add_ln113_4_fu_1172_p2 <= std_logic_vector(unsigned(mul_ln110_4_reg_1820) + unsigned(pos_rounding_value));
    add_ln113_5_fu_1185_p2 <= std_logic_vector(unsigned(mul_ln110_5_reg_1825) + unsigned(pos_rounding_value));
    add_ln113_6_fu_1198_p2 <= std_logic_vector(unsigned(mul_ln110_6_reg_1830) + unsigned(pos_rounding_value));
    add_ln113_7_fu_1211_p2 <= std_logic_vector(unsigned(mul_ln110_7_reg_1835) + unsigned(pos_rounding_value));
    add_ln113_8_fu_1224_p2 <= std_logic_vector(unsigned(mul_ln110_8_reg_1840) + unsigned(pos_rounding_value));
    add_ln113_9_fu_1237_p2 <= std_logic_vector(unsigned(mul_ln110_9_reg_1845) + unsigned(pos_rounding_value));
    add_ln113_fu_1120_p2 <= std_logic_vector(unsigned(mul_ln110_reg_1800) + unsigned(pos_rounding_value));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, data_out1_empty_n, quant_out2_full_n)
    begin
                ap_block_pp0_stage0_01001 <= (((quant_out2_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((data_out1_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, data_out1_empty_n, quant_out2_full_n)
    begin
                ap_block_pp0_stage0_11001 <= (((quant_out2_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((data_out1_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, data_out1_empty_n, quant_out2_full_n)
    begin
                ap_block_pp0_stage0_subdone <= (((quant_out2_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((data_out1_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(data_out1_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (data_out1_empty_n = ap_const_logic_0);
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(quant_out2_full_n)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (quant_out2_full_n = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln100_fu_245_p2)
    begin
        if (((icmp_ln100_fu_245_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_180, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv27_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_180;
        end if; 
    end process;

    ashr_ln114_10_fu_1254_p2 <= std_logic_vector(shift_right(signed(add_ln113_10_fu_1250_p2),to_integer(unsigned('0' & total_right_shift(31-1 downto 0)))));
    ashr_ln114_11_fu_1267_p2 <= std_logic_vector(shift_right(signed(add_ln113_11_fu_1263_p2),to_integer(unsigned('0' & total_right_shift(31-1 downto 0)))));
    ashr_ln114_12_fu_1280_p2 <= std_logic_vector(shift_right(signed(add_ln113_12_fu_1276_p2),to_integer(unsigned('0' & total_right_shift(31-1 downto 0)))));
    ashr_ln114_13_fu_1293_p2 <= std_logic_vector(shift_right(signed(add_ln113_13_fu_1289_p2),to_integer(unsigned('0' & total_right_shift(31-1 downto 0)))));
    ashr_ln114_14_fu_1306_p2 <= std_logic_vector(shift_right(signed(add_ln113_14_fu_1302_p2),to_integer(unsigned('0' & total_right_shift(31-1 downto 0)))));
    ashr_ln114_15_fu_1319_p2 <= std_logic_vector(shift_right(signed(add_ln113_15_fu_1315_p2),to_integer(unsigned('0' & total_right_shift(31-1 downto 0)))));
    ashr_ln114_16_fu_1332_p2 <= std_logic_vector(shift_right(signed(add_ln113_16_fu_1328_p2),to_integer(unsigned('0' & total_right_shift(31-1 downto 0)))));
    ashr_ln114_17_fu_1345_p2 <= std_logic_vector(shift_right(signed(add_ln113_17_fu_1341_p2),to_integer(unsigned('0' & total_right_shift(31-1 downto 0)))));
    ashr_ln114_18_fu_1358_p2 <= std_logic_vector(shift_right(signed(add_ln113_18_fu_1354_p2),to_integer(unsigned('0' & total_right_shift(31-1 downto 0)))));
    ashr_ln114_19_fu_1371_p2 <= std_logic_vector(shift_right(signed(add_ln113_19_fu_1367_p2),to_integer(unsigned('0' & total_right_shift(31-1 downto 0)))));
    ashr_ln114_1_fu_1137_p2 <= std_logic_vector(shift_right(signed(add_ln113_1_fu_1133_p2),to_integer(unsigned('0' & total_right_shift(31-1 downto 0)))));
    ashr_ln114_20_fu_1384_p2 <= std_logic_vector(shift_right(signed(add_ln113_20_fu_1380_p2),to_integer(unsigned('0' & total_right_shift(31-1 downto 0)))));
    ashr_ln114_21_fu_1397_p2 <= std_logic_vector(shift_right(signed(add_ln113_21_fu_1393_p2),to_integer(unsigned('0' & total_right_shift(31-1 downto 0)))));
    ashr_ln114_22_fu_1410_p2 <= std_logic_vector(shift_right(signed(add_ln113_22_fu_1406_p2),to_integer(unsigned('0' & total_right_shift(31-1 downto 0)))));
    ashr_ln114_23_fu_1423_p2 <= std_logic_vector(shift_right(signed(add_ln113_23_fu_1419_p2),to_integer(unsigned('0' & total_right_shift(31-1 downto 0)))));
    ashr_ln114_24_fu_1436_p2 <= std_logic_vector(shift_right(signed(add_ln113_24_fu_1432_p2),to_integer(unsigned('0' & total_right_shift(31-1 downto 0)))));
    ashr_ln114_25_fu_1449_p2 <= std_logic_vector(shift_right(signed(add_ln113_25_fu_1445_p2),to_integer(unsigned('0' & total_right_shift(31-1 downto 0)))));
    ashr_ln114_26_fu_1462_p2 <= std_logic_vector(shift_right(signed(add_ln113_26_fu_1458_p2),to_integer(unsigned('0' & total_right_shift(31-1 downto 0)))));
    ashr_ln114_27_fu_1475_p2 <= std_logic_vector(shift_right(signed(add_ln113_27_fu_1471_p2),to_integer(unsigned('0' & total_right_shift(31-1 downto 0)))));
    ashr_ln114_28_fu_1488_p2 <= std_logic_vector(shift_right(signed(add_ln113_28_fu_1484_p2),to_integer(unsigned('0' & total_right_shift(31-1 downto 0)))));
    ashr_ln114_29_fu_1501_p2 <= std_logic_vector(shift_right(signed(add_ln113_29_fu_1497_p2),to_integer(unsigned('0' & total_right_shift(31-1 downto 0)))));
    ashr_ln114_2_fu_1150_p2 <= std_logic_vector(shift_right(signed(add_ln113_2_fu_1146_p2),to_integer(unsigned('0' & total_right_shift(31-1 downto 0)))));
    ashr_ln114_30_fu_1514_p2 <= std_logic_vector(shift_right(signed(add_ln113_30_fu_1510_p2),to_integer(unsigned('0' & total_right_shift(31-1 downto 0)))));
    ashr_ln114_31_fu_1527_p2 <= std_logic_vector(shift_right(signed(add_ln113_31_fu_1523_p2),to_integer(unsigned('0' & total_right_shift(31-1 downto 0)))));
    ashr_ln114_3_fu_1163_p2 <= std_logic_vector(shift_right(signed(add_ln113_3_fu_1159_p2),to_integer(unsigned('0' & total_right_shift(31-1 downto 0)))));
    ashr_ln114_4_fu_1176_p2 <= std_logic_vector(shift_right(signed(add_ln113_4_fu_1172_p2),to_integer(unsigned('0' & total_right_shift(31-1 downto 0)))));
    ashr_ln114_5_fu_1189_p2 <= std_logic_vector(shift_right(signed(add_ln113_5_fu_1185_p2),to_integer(unsigned('0' & total_right_shift(31-1 downto 0)))));
    ashr_ln114_6_fu_1202_p2 <= std_logic_vector(shift_right(signed(add_ln113_6_fu_1198_p2),to_integer(unsigned('0' & total_right_shift(31-1 downto 0)))));
    ashr_ln114_7_fu_1215_p2 <= std_logic_vector(shift_right(signed(add_ln113_7_fu_1211_p2),to_integer(unsigned('0' & total_right_shift(31-1 downto 0)))));
    ashr_ln114_8_fu_1228_p2 <= std_logic_vector(shift_right(signed(add_ln113_8_fu_1224_p2),to_integer(unsigned('0' & total_right_shift(31-1 downto 0)))));
    ashr_ln114_9_fu_1241_p2 <= std_logic_vector(shift_right(signed(add_ln113_9_fu_1237_p2),to_integer(unsigned('0' & total_right_shift(31-1 downto 0)))));
    ashr_ln114_fu_1124_p2 <= std_logic_vector(shift_right(signed(add_ln113_fu_1120_p2),to_integer(unsigned('0' & total_right_shift(31-1 downto 0)))));
        conv13_cast_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv13),32));


    data_out1_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, data_out1_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_out1_blk_n <= data_out1_empty_n;
        else 
            data_out1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_out1_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_out1_read <= ap_const_logic_1;
        else 
            data_out1_read <= ap_const_logic_0;
        end if; 
    end process;

    i_3_fu_251_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv27_1));
    icmp_ln100_fu_245_p2 <= "1" when (ap_sig_allocacmp_i_2 = div_cast) else "0";
    l_val_V_10_fu_356_p4 <= data_out1_dout(351 downto 320);
    l_val_V_11_fu_366_p4 <= data_out1_dout(383 downto 352);
    l_val_V_12_fu_376_p4 <= data_out1_dout(415 downto 384);
    l_val_V_13_fu_386_p4 <= data_out1_dout(447 downto 416);
    l_val_V_14_fu_396_p4 <= data_out1_dout(479 downto 448);
    l_val_V_15_fu_406_p4 <= data_out1_dout(511 downto 480);
    l_val_V_16_fu_416_p4 <= data_out1_dout(543 downto 512);
    l_val_V_17_fu_426_p4 <= data_out1_dout(575 downto 544);
    l_val_V_18_fu_436_p4 <= data_out1_dout(607 downto 576);
    l_val_V_19_fu_446_p4 <= data_out1_dout(639 downto 608);
    l_val_V_1_fu_266_p4 <= data_out1_dout(63 downto 32);
    l_val_V_20_fu_456_p4 <= data_out1_dout(671 downto 640);
    l_val_V_21_fu_466_p4 <= data_out1_dout(703 downto 672);
    l_val_V_22_fu_476_p4 <= data_out1_dout(735 downto 704);
    l_val_V_23_fu_486_p4 <= data_out1_dout(767 downto 736);
    l_val_V_24_fu_496_p4 <= data_out1_dout(799 downto 768);
    l_val_V_25_fu_506_p4 <= data_out1_dout(831 downto 800);
    l_val_V_26_fu_516_p4 <= data_out1_dout(863 downto 832);
    l_val_V_27_fu_526_p4 <= data_out1_dout(895 downto 864);
    l_val_V_28_fu_536_p4 <= data_out1_dout(927 downto 896);
    l_val_V_29_fu_546_p4 <= data_out1_dout(959 downto 928);
    l_val_V_2_fu_276_p4 <= data_out1_dout(95 downto 64);
    l_val_V_30_fu_556_p4 <= data_out1_dout(991 downto 960);
    l_val_V_31_fu_566_p4 <= data_out1_dout(1023 downto 992);
    l_val_V_3_fu_286_p4 <= data_out1_dout(127 downto 96);
    l_val_V_4_fu_296_p4 <= data_out1_dout(159 downto 128);
    l_val_V_5_fu_306_p4 <= data_out1_dout(191 downto 160);
    l_val_V_6_fu_316_p4 <= data_out1_dout(223 downto 192);
    l_val_V_7_fu_326_p4 <= data_out1_dout(255 downto 224);
    l_val_V_8_fu_336_p4 <= data_out1_dout(287 downto 256);
    l_val_V_9_fu_346_p4 <= data_out1_dout(319 downto 288);
    l_val_V_fu_262_p1 <= data_out1_dout(32 - 1 downto 0);
    mul_ln110_10_fu_758_p0 <= 
        shl_ln108_10_fu_746_p2 when (cmp12(0) = '1') else 
        l_val_V_10_fu_356_p4;
    mul_ln110_10_fu_758_p1 <= conv13_cast_reg_1760(16 - 1 downto 0);
    mul_ln110_11_fu_775_p0 <= 
        shl_ln108_11_fu_763_p2 when (cmp12(0) = '1') else 
        l_val_V_11_fu_366_p4;
    mul_ln110_11_fu_775_p1 <= conv13_cast_reg_1760(16 - 1 downto 0);
    mul_ln110_12_fu_792_p0 <= 
        shl_ln108_12_fu_780_p2 when (cmp12(0) = '1') else 
        l_val_V_12_fu_376_p4;
    mul_ln110_12_fu_792_p1 <= conv13_cast_reg_1760(16 - 1 downto 0);
    mul_ln110_13_fu_809_p0 <= 
        shl_ln108_13_fu_797_p2 when (cmp12(0) = '1') else 
        l_val_V_13_fu_386_p4;
    mul_ln110_13_fu_809_p1 <= conv13_cast_reg_1760(16 - 1 downto 0);
    mul_ln110_14_fu_826_p0 <= 
        shl_ln108_14_fu_814_p2 when (cmp12(0) = '1') else 
        l_val_V_14_fu_396_p4;
    mul_ln110_14_fu_826_p1 <= conv13_cast_reg_1760(16 - 1 downto 0);
    mul_ln110_15_fu_843_p0 <= 
        shl_ln108_15_fu_831_p2 when (cmp12(0) = '1') else 
        l_val_V_15_fu_406_p4;
    mul_ln110_15_fu_843_p1 <= conv13_cast_reg_1760(16 - 1 downto 0);
    mul_ln110_16_fu_860_p0 <= 
        shl_ln108_16_fu_848_p2 when (cmp12(0) = '1') else 
        l_val_V_16_fu_416_p4;
    mul_ln110_16_fu_860_p1 <= conv13_cast_reg_1760(16 - 1 downto 0);
    mul_ln110_17_fu_877_p0 <= 
        shl_ln108_17_fu_865_p2 when (cmp12(0) = '1') else 
        l_val_V_17_fu_426_p4;
    mul_ln110_17_fu_877_p1 <= conv13_cast_reg_1760(16 - 1 downto 0);
    mul_ln110_18_fu_894_p0 <= 
        shl_ln108_18_fu_882_p2 when (cmp12(0) = '1') else 
        l_val_V_18_fu_436_p4;
    mul_ln110_18_fu_894_p1 <= conv13_cast_reg_1760(16 - 1 downto 0);
    mul_ln110_19_fu_911_p0 <= 
        shl_ln108_19_fu_899_p2 when (cmp12(0) = '1') else 
        l_val_V_19_fu_446_p4;
    mul_ln110_19_fu_911_p1 <= conv13_cast_reg_1760(16 - 1 downto 0);
    mul_ln110_1_fu_605_p0 <= 
        shl_ln108_1_fu_593_p2 when (cmp12(0) = '1') else 
        l_val_V_1_fu_266_p4;
    mul_ln110_1_fu_605_p1 <= conv13_cast_reg_1760(16 - 1 downto 0);
    mul_ln110_20_fu_928_p0 <= 
        shl_ln108_20_fu_916_p2 when (cmp12(0) = '1') else 
        l_val_V_20_fu_456_p4;
    mul_ln110_20_fu_928_p1 <= conv13_cast_reg_1760(16 - 1 downto 0);
    mul_ln110_21_fu_945_p0 <= 
        shl_ln108_21_fu_933_p2 when (cmp12(0) = '1') else 
        l_val_V_21_fu_466_p4;
    mul_ln110_21_fu_945_p1 <= conv13_cast_reg_1760(16 - 1 downto 0);
    mul_ln110_22_fu_962_p0 <= 
        shl_ln108_22_fu_950_p2 when (cmp12(0) = '1') else 
        l_val_V_22_fu_476_p4;
    mul_ln110_22_fu_962_p1 <= conv13_cast_reg_1760(16 - 1 downto 0);
    mul_ln110_23_fu_979_p0 <= 
        shl_ln108_23_fu_967_p2 when (cmp12(0) = '1') else 
        l_val_V_23_fu_486_p4;
    mul_ln110_23_fu_979_p1 <= conv13_cast_reg_1760(16 - 1 downto 0);
    mul_ln110_24_fu_996_p0 <= 
        shl_ln108_24_fu_984_p2 when (cmp12(0) = '1') else 
        l_val_V_24_fu_496_p4;
    mul_ln110_24_fu_996_p1 <= conv13_cast_reg_1760(16 - 1 downto 0);
    mul_ln110_25_fu_1013_p0 <= 
        shl_ln108_25_fu_1001_p2 when (cmp12(0) = '1') else 
        l_val_V_25_fu_506_p4;
    mul_ln110_25_fu_1013_p1 <= conv13_cast_reg_1760(16 - 1 downto 0);
    mul_ln110_26_fu_1030_p0 <= 
        shl_ln108_26_fu_1018_p2 when (cmp12(0) = '1') else 
        l_val_V_26_fu_516_p4;
    mul_ln110_26_fu_1030_p1 <= conv13_cast_reg_1760(16 - 1 downto 0);
    mul_ln110_27_fu_1047_p0 <= 
        shl_ln108_27_fu_1035_p2 when (cmp12(0) = '1') else 
        l_val_V_27_fu_526_p4;
    mul_ln110_27_fu_1047_p1 <= conv13_cast_reg_1760(16 - 1 downto 0);
    mul_ln110_28_fu_1064_p0 <= 
        shl_ln108_28_fu_1052_p2 when (cmp12(0) = '1') else 
        l_val_V_28_fu_536_p4;
    mul_ln110_28_fu_1064_p1 <= conv13_cast_reg_1760(16 - 1 downto 0);
    mul_ln110_29_fu_1081_p0 <= 
        shl_ln108_29_fu_1069_p2 when (cmp12(0) = '1') else 
        l_val_V_29_fu_546_p4;
    mul_ln110_29_fu_1081_p1 <= conv13_cast_reg_1760(16 - 1 downto 0);
    mul_ln110_2_fu_622_p0 <= 
        shl_ln108_2_fu_610_p2 when (cmp12(0) = '1') else 
        l_val_V_2_fu_276_p4;
    mul_ln110_2_fu_622_p1 <= conv13_cast_reg_1760(16 - 1 downto 0);
    mul_ln110_30_fu_1098_p0 <= 
        shl_ln108_30_fu_1086_p2 when (cmp12(0) = '1') else 
        l_val_V_30_fu_556_p4;
    mul_ln110_30_fu_1098_p1 <= conv13_cast_reg_1760(16 - 1 downto 0);
    mul_ln110_31_fu_1115_p0 <= 
        shl_ln108_31_fu_1103_p2 when (cmp12(0) = '1') else 
        l_val_V_31_fu_566_p4;
    mul_ln110_31_fu_1115_p1 <= conv13_cast_reg_1760(16 - 1 downto 0);
    mul_ln110_3_fu_639_p0 <= 
        shl_ln108_3_fu_627_p2 when (cmp12(0) = '1') else 
        l_val_V_3_fu_286_p4;
    mul_ln110_3_fu_639_p1 <= conv13_cast_reg_1760(16 - 1 downto 0);
    mul_ln110_4_fu_656_p0 <= 
        shl_ln108_4_fu_644_p2 when (cmp12(0) = '1') else 
        l_val_V_4_fu_296_p4;
    mul_ln110_4_fu_656_p1 <= conv13_cast_reg_1760(16 - 1 downto 0);
    mul_ln110_5_fu_673_p0 <= 
        shl_ln108_5_fu_661_p2 when (cmp12(0) = '1') else 
        l_val_V_5_fu_306_p4;
    mul_ln110_5_fu_673_p1 <= conv13_cast_reg_1760(16 - 1 downto 0);
    mul_ln110_6_fu_690_p0 <= 
        shl_ln108_6_fu_678_p2 when (cmp12(0) = '1') else 
        l_val_V_6_fu_316_p4;
    mul_ln110_6_fu_690_p1 <= conv13_cast_reg_1760(16 - 1 downto 0);
    mul_ln110_7_fu_707_p0 <= 
        shl_ln108_7_fu_695_p2 when (cmp12(0) = '1') else 
        l_val_V_7_fu_326_p4;
    mul_ln110_7_fu_707_p1 <= conv13_cast_reg_1760(16 - 1 downto 0);
    mul_ln110_8_fu_724_p0 <= 
        shl_ln108_8_fu_712_p2 when (cmp12(0) = '1') else 
        l_val_V_8_fu_336_p4;
    mul_ln110_8_fu_724_p1 <= conv13_cast_reg_1760(16 - 1 downto 0);
    mul_ln110_9_fu_741_p0 <= 
        shl_ln108_9_fu_729_p2 when (cmp12(0) = '1') else 
        l_val_V_9_fu_346_p4;
    mul_ln110_9_fu_741_p1 <= conv13_cast_reg_1760(16 - 1 downto 0);
    mul_ln110_fu_588_p0 <= 
        shl_ln108_fu_576_p2 when (cmp12(0) = '1') else 
        l_val_V_fu_262_p1;
    mul_ln110_fu_588_p1 <= conv13_cast_reg_1760(16 - 1 downto 0);
    p_Result_s_fu_1536_p33 <= (((((((((((((((((((((((((((((((trunc_ln116_31_fu_1532_p1 & trunc_ln116_30_fu_1519_p1) & trunc_ln116_29_fu_1506_p1) & trunc_ln116_28_fu_1493_p1) & trunc_ln116_27_fu_1480_p1) & trunc_ln116_26_fu_1467_p1) & trunc_ln116_25_fu_1454_p1) & trunc_ln116_24_fu_1441_p1) & trunc_ln116_23_fu_1428_p1) & trunc_ln116_22_fu_1415_p1) & trunc_ln116_21_fu_1402_p1) & trunc_ln116_20_fu_1389_p1) & trunc_ln116_19_fu_1376_p1) & trunc_ln116_18_fu_1363_p1) & trunc_ln116_17_fu_1350_p1) & trunc_ln116_16_fu_1337_p1) & trunc_ln116_15_fu_1324_p1) & trunc_ln116_14_fu_1311_p1) & trunc_ln116_13_fu_1298_p1) & trunc_ln116_12_fu_1285_p1) & trunc_ln116_11_fu_1272_p1) & trunc_ln116_10_fu_1259_p1) & trunc_ln116_9_fu_1246_p1) & trunc_ln116_8_fu_1233_p1) & trunc_ln116_7_fu_1220_p1) & trunc_ln116_6_fu_1207_p1) & trunc_ln116_5_fu_1194_p1) & trunc_ln116_4_fu_1181_p1) & trunc_ln116_3_fu_1168_p1) & trunc_ln116_2_fu_1155_p1) & trunc_ln116_1_fu_1142_p1) & trunc_ln116_fu_1129_p1);

    quant_out2_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, quant_out2_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            quant_out2_blk_n <= quant_out2_full_n;
        else 
            quant_out2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        quant_out2_din <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_s_fu_1536_p33),256));


    quant_out2_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            quant_out2_write <= ap_const_logic_1;
        else 
            quant_out2_write <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln108_10_fu_746_p2 <= std_logic_vector(shift_left(unsigned(l_val_V_10_fu_356_p4),to_integer(unsigned('0' & left_shift(31-1 downto 0)))));
    shl_ln108_11_fu_763_p2 <= std_logic_vector(shift_left(unsigned(l_val_V_11_fu_366_p4),to_integer(unsigned('0' & left_shift(31-1 downto 0)))));
    shl_ln108_12_fu_780_p2 <= std_logic_vector(shift_left(unsigned(l_val_V_12_fu_376_p4),to_integer(unsigned('0' & left_shift(31-1 downto 0)))));
    shl_ln108_13_fu_797_p2 <= std_logic_vector(shift_left(unsigned(l_val_V_13_fu_386_p4),to_integer(unsigned('0' & left_shift(31-1 downto 0)))));
    shl_ln108_14_fu_814_p2 <= std_logic_vector(shift_left(unsigned(l_val_V_14_fu_396_p4),to_integer(unsigned('0' & left_shift(31-1 downto 0)))));
    shl_ln108_15_fu_831_p2 <= std_logic_vector(shift_left(unsigned(l_val_V_15_fu_406_p4),to_integer(unsigned('0' & left_shift(31-1 downto 0)))));
    shl_ln108_16_fu_848_p2 <= std_logic_vector(shift_left(unsigned(l_val_V_16_fu_416_p4),to_integer(unsigned('0' & left_shift(31-1 downto 0)))));
    shl_ln108_17_fu_865_p2 <= std_logic_vector(shift_left(unsigned(l_val_V_17_fu_426_p4),to_integer(unsigned('0' & left_shift(31-1 downto 0)))));
    shl_ln108_18_fu_882_p2 <= std_logic_vector(shift_left(unsigned(l_val_V_18_fu_436_p4),to_integer(unsigned('0' & left_shift(31-1 downto 0)))));
    shl_ln108_19_fu_899_p2 <= std_logic_vector(shift_left(unsigned(l_val_V_19_fu_446_p4),to_integer(unsigned('0' & left_shift(31-1 downto 0)))));
    shl_ln108_1_fu_593_p2 <= std_logic_vector(shift_left(unsigned(l_val_V_1_fu_266_p4),to_integer(unsigned('0' & left_shift(31-1 downto 0)))));
    shl_ln108_20_fu_916_p2 <= std_logic_vector(shift_left(unsigned(l_val_V_20_fu_456_p4),to_integer(unsigned('0' & left_shift(31-1 downto 0)))));
    shl_ln108_21_fu_933_p2 <= std_logic_vector(shift_left(unsigned(l_val_V_21_fu_466_p4),to_integer(unsigned('0' & left_shift(31-1 downto 0)))));
    shl_ln108_22_fu_950_p2 <= std_logic_vector(shift_left(unsigned(l_val_V_22_fu_476_p4),to_integer(unsigned('0' & left_shift(31-1 downto 0)))));
    shl_ln108_23_fu_967_p2 <= std_logic_vector(shift_left(unsigned(l_val_V_23_fu_486_p4),to_integer(unsigned('0' & left_shift(31-1 downto 0)))));
    shl_ln108_24_fu_984_p2 <= std_logic_vector(shift_left(unsigned(l_val_V_24_fu_496_p4),to_integer(unsigned('0' & left_shift(31-1 downto 0)))));
    shl_ln108_25_fu_1001_p2 <= std_logic_vector(shift_left(unsigned(l_val_V_25_fu_506_p4),to_integer(unsigned('0' & left_shift(31-1 downto 0)))));
    shl_ln108_26_fu_1018_p2 <= std_logic_vector(shift_left(unsigned(l_val_V_26_fu_516_p4),to_integer(unsigned('0' & left_shift(31-1 downto 0)))));
    shl_ln108_27_fu_1035_p2 <= std_logic_vector(shift_left(unsigned(l_val_V_27_fu_526_p4),to_integer(unsigned('0' & left_shift(31-1 downto 0)))));
    shl_ln108_28_fu_1052_p2 <= std_logic_vector(shift_left(unsigned(l_val_V_28_fu_536_p4),to_integer(unsigned('0' & left_shift(31-1 downto 0)))));
    shl_ln108_29_fu_1069_p2 <= std_logic_vector(shift_left(unsigned(l_val_V_29_fu_546_p4),to_integer(unsigned('0' & left_shift(31-1 downto 0)))));
    shl_ln108_2_fu_610_p2 <= std_logic_vector(shift_left(unsigned(l_val_V_2_fu_276_p4),to_integer(unsigned('0' & left_shift(31-1 downto 0)))));
    shl_ln108_30_fu_1086_p2 <= std_logic_vector(shift_left(unsigned(l_val_V_30_fu_556_p4),to_integer(unsigned('0' & left_shift(31-1 downto 0)))));
    shl_ln108_31_fu_1103_p2 <= std_logic_vector(shift_left(unsigned(l_val_V_31_fu_566_p4),to_integer(unsigned('0' & left_shift(31-1 downto 0)))));
    shl_ln108_3_fu_627_p2 <= std_logic_vector(shift_left(unsigned(l_val_V_3_fu_286_p4),to_integer(unsigned('0' & left_shift(31-1 downto 0)))));
    shl_ln108_4_fu_644_p2 <= std_logic_vector(shift_left(unsigned(l_val_V_4_fu_296_p4),to_integer(unsigned('0' & left_shift(31-1 downto 0)))));
    shl_ln108_5_fu_661_p2 <= std_logic_vector(shift_left(unsigned(l_val_V_5_fu_306_p4),to_integer(unsigned('0' & left_shift(31-1 downto 0)))));
    shl_ln108_6_fu_678_p2 <= std_logic_vector(shift_left(unsigned(l_val_V_6_fu_316_p4),to_integer(unsigned('0' & left_shift(31-1 downto 0)))));
    shl_ln108_7_fu_695_p2 <= std_logic_vector(shift_left(unsigned(l_val_V_7_fu_326_p4),to_integer(unsigned('0' & left_shift(31-1 downto 0)))));
    shl_ln108_8_fu_712_p2 <= std_logic_vector(shift_left(unsigned(l_val_V_8_fu_336_p4),to_integer(unsigned('0' & left_shift(31-1 downto 0)))));
    shl_ln108_9_fu_729_p2 <= std_logic_vector(shift_left(unsigned(l_val_V_9_fu_346_p4),to_integer(unsigned('0' & left_shift(31-1 downto 0)))));
    shl_ln108_fu_576_p2 <= std_logic_vector(shift_left(unsigned(l_val_V_fu_262_p1),to_integer(unsigned('0' & left_shift(31-1 downto 0)))));
    trunc_ln116_10_fu_1259_p1 <= ashr_ln114_10_fu_1254_p2(8 - 1 downto 0);
    trunc_ln116_11_fu_1272_p1 <= ashr_ln114_11_fu_1267_p2(8 - 1 downto 0);
    trunc_ln116_12_fu_1285_p1 <= ashr_ln114_12_fu_1280_p2(8 - 1 downto 0);
    trunc_ln116_13_fu_1298_p1 <= ashr_ln114_13_fu_1293_p2(8 - 1 downto 0);
    trunc_ln116_14_fu_1311_p1 <= ashr_ln114_14_fu_1306_p2(8 - 1 downto 0);
    trunc_ln116_15_fu_1324_p1 <= ashr_ln114_15_fu_1319_p2(8 - 1 downto 0);
    trunc_ln116_16_fu_1337_p1 <= ashr_ln114_16_fu_1332_p2(8 - 1 downto 0);
    trunc_ln116_17_fu_1350_p1 <= ashr_ln114_17_fu_1345_p2(8 - 1 downto 0);
    trunc_ln116_18_fu_1363_p1 <= ashr_ln114_18_fu_1358_p2(8 - 1 downto 0);
    trunc_ln116_19_fu_1376_p1 <= ashr_ln114_19_fu_1371_p2(8 - 1 downto 0);
    trunc_ln116_1_fu_1142_p1 <= ashr_ln114_1_fu_1137_p2(8 - 1 downto 0);
    trunc_ln116_20_fu_1389_p1 <= ashr_ln114_20_fu_1384_p2(8 - 1 downto 0);
    trunc_ln116_21_fu_1402_p1 <= ashr_ln114_21_fu_1397_p2(8 - 1 downto 0);
    trunc_ln116_22_fu_1415_p1 <= ashr_ln114_22_fu_1410_p2(8 - 1 downto 0);
    trunc_ln116_23_fu_1428_p1 <= ashr_ln114_23_fu_1423_p2(8 - 1 downto 0);
    trunc_ln116_24_fu_1441_p1 <= ashr_ln114_24_fu_1436_p2(8 - 1 downto 0);
    trunc_ln116_25_fu_1454_p1 <= ashr_ln114_25_fu_1449_p2(8 - 1 downto 0);
    trunc_ln116_26_fu_1467_p1 <= ashr_ln114_26_fu_1462_p2(8 - 1 downto 0);
    trunc_ln116_27_fu_1480_p1 <= ashr_ln114_27_fu_1475_p2(8 - 1 downto 0);
    trunc_ln116_28_fu_1493_p1 <= ashr_ln114_28_fu_1488_p2(8 - 1 downto 0);
    trunc_ln116_29_fu_1506_p1 <= ashr_ln114_29_fu_1501_p2(8 - 1 downto 0);
    trunc_ln116_2_fu_1155_p1 <= ashr_ln114_2_fu_1150_p2(8 - 1 downto 0);
    trunc_ln116_30_fu_1519_p1 <= ashr_ln114_30_fu_1514_p2(8 - 1 downto 0);
    trunc_ln116_31_fu_1532_p1 <= ashr_ln114_31_fu_1527_p2(1 - 1 downto 0);
    trunc_ln116_3_fu_1168_p1 <= ashr_ln114_3_fu_1163_p2(8 - 1 downto 0);
    trunc_ln116_4_fu_1181_p1 <= ashr_ln114_4_fu_1176_p2(8 - 1 downto 0);
    trunc_ln116_5_fu_1194_p1 <= ashr_ln114_5_fu_1189_p2(8 - 1 downto 0);
    trunc_ln116_6_fu_1207_p1 <= ashr_ln114_6_fu_1202_p2(8 - 1 downto 0);
    trunc_ln116_7_fu_1220_p1 <= ashr_ln114_7_fu_1215_p2(8 - 1 downto 0);
    trunc_ln116_8_fu_1233_p1 <= ashr_ln114_8_fu_1228_p2(8 - 1 downto 0);
    trunc_ln116_9_fu_1246_p1 <= ashr_ln114_9_fu_1241_p2(8 - 1 downto 0);
    trunc_ln116_fu_1129_p1 <= ashr_ln114_fu_1124_p2(8 - 1 downto 0);
end behav;
