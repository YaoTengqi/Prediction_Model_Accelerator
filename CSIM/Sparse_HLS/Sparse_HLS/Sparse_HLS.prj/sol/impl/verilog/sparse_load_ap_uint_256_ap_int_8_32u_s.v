// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sparse_load_ap_uint_256_ap_int_8_32u_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        am_ROWS,
        am_COLS,
        fm_ROWS,
        fm_COLS,
        m_axi_sparse_data_AWVALID,
        m_axi_sparse_data_AWREADY,
        m_axi_sparse_data_AWADDR,
        m_axi_sparse_data_AWID,
        m_axi_sparse_data_AWLEN,
        m_axi_sparse_data_AWSIZE,
        m_axi_sparse_data_AWBURST,
        m_axi_sparse_data_AWLOCK,
        m_axi_sparse_data_AWCACHE,
        m_axi_sparse_data_AWPROT,
        m_axi_sparse_data_AWQOS,
        m_axi_sparse_data_AWREGION,
        m_axi_sparse_data_AWUSER,
        m_axi_sparse_data_WVALID,
        m_axi_sparse_data_WREADY,
        m_axi_sparse_data_WDATA,
        m_axi_sparse_data_WSTRB,
        m_axi_sparse_data_WLAST,
        m_axi_sparse_data_WID,
        m_axi_sparse_data_WUSER,
        m_axi_sparse_data_ARVALID,
        m_axi_sparse_data_ARREADY,
        m_axi_sparse_data_ARADDR,
        m_axi_sparse_data_ARID,
        m_axi_sparse_data_ARLEN,
        m_axi_sparse_data_ARSIZE,
        m_axi_sparse_data_ARBURST,
        m_axi_sparse_data_ARLOCK,
        m_axi_sparse_data_ARCACHE,
        m_axi_sparse_data_ARPROT,
        m_axi_sparse_data_ARQOS,
        m_axi_sparse_data_ARREGION,
        m_axi_sparse_data_ARUSER,
        m_axi_sparse_data_RVALID,
        m_axi_sparse_data_RREADY,
        m_axi_sparse_data_RDATA,
        m_axi_sparse_data_RLAST,
        m_axi_sparse_data_RID,
        m_axi_sparse_data_RFIFONUM,
        m_axi_sparse_data_RUSER,
        m_axi_sparse_data_RRESP,
        m_axi_sparse_data_BVALID,
        m_axi_sparse_data_BREADY,
        m_axi_sparse_data_BRESP,
        m_axi_sparse_data_BID,
        m_axi_sparse_data_BUSER,
        inputs,
        idx_ram_address0,
        idx_ram_ce0,
        idx_ram_we0,
        idx_ram_d0,
        count_ram_address0,
        count_ram_ce0,
        count_ram_we0,
        count_ram_d0,
        fm_ram_address0,
        fm_ram_ce0,
        fm_ram_we0,
        fm_ram_d0,
        input_data_addr1,
        input_data_addr2,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 86'd1;
parameter    ap_ST_fsm_state2 = 86'd2;
parameter    ap_ST_fsm_state3 = 86'd4;
parameter    ap_ST_fsm_state4 = 86'd8;
parameter    ap_ST_fsm_state5 = 86'd16;
parameter    ap_ST_fsm_state6 = 86'd32;
parameter    ap_ST_fsm_state7 = 86'd64;
parameter    ap_ST_fsm_state8 = 86'd128;
parameter    ap_ST_fsm_state9 = 86'd256;
parameter    ap_ST_fsm_state10 = 86'd512;
parameter    ap_ST_fsm_state11 = 86'd1024;
parameter    ap_ST_fsm_state12 = 86'd2048;
parameter    ap_ST_fsm_state13 = 86'd4096;
parameter    ap_ST_fsm_state14 = 86'd8192;
parameter    ap_ST_fsm_state15 = 86'd16384;
parameter    ap_ST_fsm_state16 = 86'd32768;
parameter    ap_ST_fsm_state17 = 86'd65536;
parameter    ap_ST_fsm_state18 = 86'd131072;
parameter    ap_ST_fsm_state19 = 86'd262144;
parameter    ap_ST_fsm_state20 = 86'd524288;
parameter    ap_ST_fsm_state21 = 86'd1048576;
parameter    ap_ST_fsm_state22 = 86'd2097152;
parameter    ap_ST_fsm_state23 = 86'd4194304;
parameter    ap_ST_fsm_state24 = 86'd8388608;
parameter    ap_ST_fsm_state25 = 86'd16777216;
parameter    ap_ST_fsm_state26 = 86'd33554432;
parameter    ap_ST_fsm_state27 = 86'd67108864;
parameter    ap_ST_fsm_state28 = 86'd134217728;
parameter    ap_ST_fsm_state29 = 86'd268435456;
parameter    ap_ST_fsm_state30 = 86'd536870912;
parameter    ap_ST_fsm_state31 = 86'd1073741824;
parameter    ap_ST_fsm_state32 = 86'd2147483648;
parameter    ap_ST_fsm_state33 = 86'd4294967296;
parameter    ap_ST_fsm_state34 = 86'd8589934592;
parameter    ap_ST_fsm_state35 = 86'd17179869184;
parameter    ap_ST_fsm_state36 = 86'd34359738368;
parameter    ap_ST_fsm_state37 = 86'd68719476736;
parameter    ap_ST_fsm_state38 = 86'd137438953472;
parameter    ap_ST_fsm_state39 = 86'd274877906944;
parameter    ap_ST_fsm_state40 = 86'd549755813888;
parameter    ap_ST_fsm_state41 = 86'd1099511627776;
parameter    ap_ST_fsm_state42 = 86'd2199023255552;
parameter    ap_ST_fsm_state43 = 86'd4398046511104;
parameter    ap_ST_fsm_state44 = 86'd8796093022208;
parameter    ap_ST_fsm_state45 = 86'd17592186044416;
parameter    ap_ST_fsm_state46 = 86'd35184372088832;
parameter    ap_ST_fsm_state47 = 86'd70368744177664;
parameter    ap_ST_fsm_state48 = 86'd140737488355328;
parameter    ap_ST_fsm_state49 = 86'd281474976710656;
parameter    ap_ST_fsm_state50 = 86'd562949953421312;
parameter    ap_ST_fsm_state51 = 86'd1125899906842624;
parameter    ap_ST_fsm_state52 = 86'd2251799813685248;
parameter    ap_ST_fsm_state53 = 86'd4503599627370496;
parameter    ap_ST_fsm_state54 = 86'd9007199254740992;
parameter    ap_ST_fsm_state55 = 86'd18014398509481984;
parameter    ap_ST_fsm_state56 = 86'd36028797018963968;
parameter    ap_ST_fsm_state57 = 86'd72057594037927936;
parameter    ap_ST_fsm_state58 = 86'd144115188075855872;
parameter    ap_ST_fsm_state59 = 86'd288230376151711744;
parameter    ap_ST_fsm_state60 = 86'd576460752303423488;
parameter    ap_ST_fsm_state61 = 86'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 86'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 86'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 86'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 86'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 86'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 86'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 86'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 86'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 86'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 86'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 86'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 86'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 86'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 86'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 86'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 86'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 86'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 86'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 86'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 86'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 86'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 86'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 86'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 86'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 86'd38685626227668133590597632;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] am_ROWS;
input  [31:0] am_COLS;
input  [31:0] fm_ROWS;
input  [31:0] fm_COLS;
output   m_axi_sparse_data_AWVALID;
input   m_axi_sparse_data_AWREADY;
output  [63:0] m_axi_sparse_data_AWADDR;
output  [0:0] m_axi_sparse_data_AWID;
output  [31:0] m_axi_sparse_data_AWLEN;
output  [2:0] m_axi_sparse_data_AWSIZE;
output  [1:0] m_axi_sparse_data_AWBURST;
output  [1:0] m_axi_sparse_data_AWLOCK;
output  [3:0] m_axi_sparse_data_AWCACHE;
output  [2:0] m_axi_sparse_data_AWPROT;
output  [3:0] m_axi_sparse_data_AWQOS;
output  [3:0] m_axi_sparse_data_AWREGION;
output  [0:0] m_axi_sparse_data_AWUSER;
output   m_axi_sparse_data_WVALID;
input   m_axi_sparse_data_WREADY;
output  [255:0] m_axi_sparse_data_WDATA;
output  [31:0] m_axi_sparse_data_WSTRB;
output   m_axi_sparse_data_WLAST;
output  [0:0] m_axi_sparse_data_WID;
output  [0:0] m_axi_sparse_data_WUSER;
output   m_axi_sparse_data_ARVALID;
input   m_axi_sparse_data_ARREADY;
output  [63:0] m_axi_sparse_data_ARADDR;
output  [0:0] m_axi_sparse_data_ARID;
output  [31:0] m_axi_sparse_data_ARLEN;
output  [2:0] m_axi_sparse_data_ARSIZE;
output  [1:0] m_axi_sparse_data_ARBURST;
output  [1:0] m_axi_sparse_data_ARLOCK;
output  [3:0] m_axi_sparse_data_ARCACHE;
output  [2:0] m_axi_sparse_data_ARPROT;
output  [3:0] m_axi_sparse_data_ARQOS;
output  [3:0] m_axi_sparse_data_ARREGION;
output  [0:0] m_axi_sparse_data_ARUSER;
input   m_axi_sparse_data_RVALID;
output   m_axi_sparse_data_RREADY;
input  [255:0] m_axi_sparse_data_RDATA;
input   m_axi_sparse_data_RLAST;
input  [0:0] m_axi_sparse_data_RID;
input  [8:0] m_axi_sparse_data_RFIFONUM;
input  [0:0] m_axi_sparse_data_RUSER;
input  [1:0] m_axi_sparse_data_RRESP;
input   m_axi_sparse_data_BVALID;
output   m_axi_sparse_data_BREADY;
input  [1:0] m_axi_sparse_data_BRESP;
input  [0:0] m_axi_sparse_data_BID;
input  [0:0] m_axi_sparse_data_BUSER;
input  [63:0] inputs;
output  [9:0] idx_ram_address0;
output   idx_ram_ce0;
output   idx_ram_we0;
output  [7:0] idx_ram_d0;
output  [4:0] count_ram_address0;
output   count_ram_ce0;
output   count_ram_we0;
output  [7:0] count_ram_d0;
output  [8:0] fm_ram_address0;
output   fm_ram_ce0;
output   fm_ram_we0;
output  [255:0] fm_ram_d0;
input  [31:0] input_data_addr1;
input  [31:0] input_data_addr2;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_sparse_data_ARVALID;
reg[63:0] m_axi_sparse_data_ARADDR;
reg[31:0] m_axi_sparse_data_ARLEN;
reg m_axi_sparse_data_RREADY;
reg idx_ram_ce0;
reg idx_ram_we0;
reg count_ram_ce0;
reg count_ram_we0;
reg fm_ram_ce0;
reg fm_ram_we0;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [85:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    sparse_data_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    sparse_data_blk_n_R;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state82;
reg   [26:0] fm_loop_num_reg_1023;
reg   [58:0] trunc_ln4_reg_1029;
wire   [31:0] zext_ln20_fu_433_p1;
wire    ap_CS_fsm_state39;
wire   [26:0] am_loop_num_fu_453_p4;
reg   [26:0] am_loop_num_reg_1061;
wire   [31:0] zext_ln21_fu_463_p1;
reg   [31:0] zext_ln21_reg_1066;
wire   [63:0] zext_ln22_1_fu_470_p1;
reg   [63:0] zext_ln22_1_reg_1071;
wire    ap_CS_fsm_state40;
reg   [58:0] trunc_ln5_reg_1086;
wire   [0:0] icmp_ln22_fu_474_p2;
reg   [255:0] sparse_data_addr_read_reg_1091;
wire   [63:0] zext_ln25_1_fu_534_p1;
reg   [63:0] zext_ln25_1_reg_1102;
wire    ap_CS_fsm_state81;
reg   [255:0] sparse_data_addr_1_read_reg_1124;
wire   [63:0] zext_ln29_fu_567_p1;
reg   [63:0] zext_ln29_reg_1129;
wire    ap_CS_fsm_state84;
wire   [31:0] add_ln39_fu_577_p2;
reg   [31:0] add_ln39_reg_1137;
wire   [0:0] icmp_ln29_fu_572_p2;
wire   [7:0] l_val_V_fu_593_p1;
reg   [7:0] l_val_V_reg_1147;
wire    ap_CS_fsm_state85;
reg   [7:0] l_val_V_64_reg_1152;
reg   [7:0] l_val_V_65_reg_1157;
reg   [7:0] l_val_V_66_reg_1162;
reg   [7:0] l_val_V_67_reg_1167;
reg   [7:0] l_val_V_68_reg_1172;
reg   [7:0] l_val_V_69_reg_1177;
reg   [7:0] l_val_V_70_reg_1182;
reg   [7:0] l_val_V_71_reg_1187;
reg   [7:0] l_val_V_72_reg_1192;
reg   [7:0] l_val_V_73_reg_1197;
reg   [7:0] l_val_V_74_reg_1202;
reg   [7:0] l_val_V_75_reg_1207;
reg   [7:0] l_val_V_76_reg_1212;
reg   [7:0] l_val_V_77_reg_1217;
reg   [7:0] l_val_V_78_reg_1222;
reg   [7:0] l_val_V_79_reg_1227;
reg   [7:0] l_val_V_80_reg_1232;
reg   [7:0] l_val_V_81_reg_1237;
reg   [7:0] l_val_V_82_reg_1242;
reg   [7:0] l_val_V_83_reg_1247;
reg   [7:0] l_val_V_84_reg_1252;
reg   [7:0] l_val_V_85_reg_1257;
reg   [7:0] l_val_V_86_reg_1262;
reg   [7:0] l_val_V_87_reg_1267;
reg   [7:0] l_val_V_88_reg_1272;
reg   [7:0] l_val_V_89_reg_1277;
reg   [7:0] l_val_V_90_reg_1282;
reg   [7:0] l_val_V_91_reg_1287;
reg   [7:0] l_val_V_92_reg_1292;
reg   [7:0] l_val_V_93_reg_1297;
reg   [7:0] l_val_V_94_reg_1302;
wire   [31:0] add_ln33_fu_912_p2;
wire    ap_CS_fsm_state86;
reg   [9:0] am_ram_V_address0;
reg    am_ram_V_ce0;
reg    am_ram_V_we0;
wire   [255:0] am_ram_V_q0;
reg   [31:0] col_reg_350;
wire   [0:0] icmp_ln33_fu_907_p2;
reg   [31:0] count_reg_361;
reg   [31:0] ap_phi_mux_count_1_phi_fu_376_p4;
wire   [31:0] count_2_fu_969_p2;
wire   [0:0] icmp_ln1023_fu_960_p2;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state83;
wire   [63:0] zext_ln36_fu_987_p1;
wire  signed [63:0] sext_ln22_fu_437_p1;
wire  signed [63:0] sext_ln25_fu_521_p1;
reg   [26:0] i_fu_208;
wire   [26:0] add_ln22_1_fu_479_p2;
reg    ap_block_state1;
reg   [26:0] j_fu_216;
wire   [26:0] add_ln25_1_fu_543_p2;
wire   [0:0] icmp_ln25_fu_538_p2;
reg   [31:0] row_fu_220;
reg   [31:0] idx_count_fu_224;
wire   [31:0] idx_count_1_fu_981_p2;
wire   [31:0] mul_ln20_fu_384_p2;
wire   [36:0] shl_ln_fu_400_p3;
wire   [63:0] zext_ln22_fu_408_p1;
wire   [63:0] add_ln22_fu_412_p2;
wire   [31:0] mul_ln21_fu_447_p2;
wire   [36:0] shl_ln1_fu_490_p3;
wire   [63:0] zext_ln25_fu_497_p1;
wire   [63:0] add_ln25_fu_501_p2;
wire  signed [31:0] icmp_ln29_fu_572_p1;
wire  signed [31:0] icmp_ln33_fu_907_p1;
wire   [4:0] tmp_fu_922_p33;
wire   [7:0] tmp_fu_922_p34;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [85:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
reg    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
reg    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
wire    ap_ST_fsm_state74_blk;
wire    ap_ST_fsm_state75_blk;
wire    ap_ST_fsm_state76_blk;
wire    ap_ST_fsm_state77_blk;
wire    ap_ST_fsm_state78_blk;
wire    ap_ST_fsm_state79_blk;
wire    ap_ST_fsm_state80_blk;
wire    ap_ST_fsm_state81_blk;
reg    ap_ST_fsm_state82_blk;
wire    ap_ST_fsm_state83_blk;
wire    ap_ST_fsm_state84_blk;
wire    ap_ST_fsm_state85_blk;
wire    ap_ST_fsm_state86_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 86'd1;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
end

sparse_load_ap_uint_256_ap_int_8_32u_s_am_ram_V_RAM_AUTO_1R1W #(
    .DataWidth( 256 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
am_ram_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(am_ram_V_address0),
    .ce0(am_ram_V_ce0),
    .we0(am_ram_V_we0),
    .d0(sparse_data_addr_1_read_reg_1124),
    .q0(am_ram_V_q0)
);

sparse_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U5(
    .din0(fm_COLS),
    .din1(fm_ROWS),
    .dout(mul_ln20_fu_384_p2)
);

sparse_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U6(
    .din0(am_COLS),
    .din1(am_ROWS),
    .dout(mul_ln21_fu_447_p2)
);

sparse_mux_325_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 5 ),
    .dout_WIDTH( 8 ))
mux_325_8_1_1_U7(
    .din0(l_val_V_reg_1147),
    .din1(l_val_V_64_reg_1152),
    .din2(l_val_V_65_reg_1157),
    .din3(l_val_V_66_reg_1162),
    .din4(l_val_V_67_reg_1167),
    .din5(l_val_V_68_reg_1172),
    .din6(l_val_V_69_reg_1177),
    .din7(l_val_V_70_reg_1182),
    .din8(l_val_V_71_reg_1187),
    .din9(l_val_V_72_reg_1192),
    .din10(l_val_V_73_reg_1197),
    .din11(l_val_V_74_reg_1202),
    .din12(l_val_V_75_reg_1207),
    .din13(l_val_V_76_reg_1212),
    .din14(l_val_V_77_reg_1217),
    .din15(l_val_V_78_reg_1222),
    .din16(l_val_V_79_reg_1227),
    .din17(l_val_V_80_reg_1232),
    .din18(l_val_V_81_reg_1237),
    .din19(l_val_V_82_reg_1242),
    .din20(l_val_V_83_reg_1247),
    .din21(l_val_V_84_reg_1252),
    .din22(l_val_V_85_reg_1257),
    .din23(l_val_V_86_reg_1262),
    .din24(l_val_V_87_reg_1267),
    .din25(l_val_V_88_reg_1272),
    .din26(l_val_V_89_reg_1277),
    .din27(l_val_V_90_reg_1282),
    .din28(l_val_V_91_reg_1287),
    .din29(l_val_V_92_reg_1292),
    .din30(l_val_V_93_reg_1297),
    .din31(l_val_V_94_reg_1302),
    .din32(tmp_fu_922_p33),
    .dout(tmp_fu_922_p34)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln29_fu_572_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state84))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if (((icmp_ln29_fu_572_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state84))) begin
            ap_return_0_preg <= am_ROWS;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if (((icmp_ln29_fu_572_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state84))) begin
            ap_return_1_preg <= fm_COLS;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_907_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state86))) begin
        col_reg_350 <= add_ln33_fu_912_p2;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        col_reg_350 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_907_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state86))) begin
        count_reg_361 <= ap_phi_mux_count_1_phi_fu_376_p4;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        count_reg_361 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_208 <= 27'd0;
    end else if (((icmp_ln22_fu_474_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state40))) begin
        i_fu_208 <= add_ln22_1_fu_479_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_538_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state81))) begin
        idx_count_fu_224 <= 32'd0;
    end else if (((icmp_ln1023_fu_960_p2 == 1'd0) & (icmp_ln33_fu_907_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state86))) begin
        idx_count_fu_224 <= idx_count_1_fu_981_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_474_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40))) begin
        j_fu_216 <= 27'd0;
    end else if (((icmp_ln25_fu_538_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state81))) begin
        j_fu_216 <= add_ln25_1_fu_543_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_538_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state81))) begin
        row_fu_220 <= 32'd0;
    end else if (((icmp_ln33_fu_907_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state86))) begin
        row_fu_220 <= add_ln39_reg_1137;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        add_ln39_reg_1137 <= add_ln39_fu_577_p2;
        zext_ln29_reg_1129[31 : 0] <= zext_ln29_fu_567_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        am_loop_num_reg_1061 <= {{mul_ln21_fu_447_p2[31:5]}};
        zext_ln21_reg_1066[26 : 0] <= zext_ln21_fu_463_p1[26 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        fm_loop_num_reg_1023 <= {{mul_ln20_fu_384_p2[31:5]}};
        trunc_ln4_reg_1029 <= {{add_ln22_fu_412_p2[63:5]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        l_val_V_64_reg_1152 <= {{am_ram_V_q0[15:8]}};
        l_val_V_65_reg_1157 <= {{am_ram_V_q0[23:16]}};
        l_val_V_66_reg_1162 <= {{am_ram_V_q0[31:24]}};
        l_val_V_67_reg_1167 <= {{am_ram_V_q0[39:32]}};
        l_val_V_68_reg_1172 <= {{am_ram_V_q0[47:40]}};
        l_val_V_69_reg_1177 <= {{am_ram_V_q0[55:48]}};
        l_val_V_70_reg_1182 <= {{am_ram_V_q0[63:56]}};
        l_val_V_71_reg_1187 <= {{am_ram_V_q0[71:64]}};
        l_val_V_72_reg_1192 <= {{am_ram_V_q0[79:72]}};
        l_val_V_73_reg_1197 <= {{am_ram_V_q0[87:80]}};
        l_val_V_74_reg_1202 <= {{am_ram_V_q0[95:88]}};
        l_val_V_75_reg_1207 <= {{am_ram_V_q0[103:96]}};
        l_val_V_76_reg_1212 <= {{am_ram_V_q0[111:104]}};
        l_val_V_77_reg_1217 <= {{am_ram_V_q0[119:112]}};
        l_val_V_78_reg_1222 <= {{am_ram_V_q0[127:120]}};
        l_val_V_79_reg_1227 <= {{am_ram_V_q0[135:128]}};
        l_val_V_80_reg_1232 <= {{am_ram_V_q0[143:136]}};
        l_val_V_81_reg_1237 <= {{am_ram_V_q0[151:144]}};
        l_val_V_82_reg_1242 <= {{am_ram_V_q0[159:152]}};
        l_val_V_83_reg_1247 <= {{am_ram_V_q0[167:160]}};
        l_val_V_84_reg_1252 <= {{am_ram_V_q0[175:168]}};
        l_val_V_85_reg_1257 <= {{am_ram_V_q0[183:176]}};
        l_val_V_86_reg_1262 <= {{am_ram_V_q0[191:184]}};
        l_val_V_87_reg_1267 <= {{am_ram_V_q0[199:192]}};
        l_val_V_88_reg_1272 <= {{am_ram_V_q0[207:200]}};
        l_val_V_89_reg_1277 <= {{am_ram_V_q0[215:208]}};
        l_val_V_90_reg_1282 <= {{am_ram_V_q0[223:216]}};
        l_val_V_91_reg_1287 <= {{am_ram_V_q0[231:224]}};
        l_val_V_92_reg_1292 <= {{am_ram_V_q0[239:232]}};
        l_val_V_93_reg_1297 <= {{am_ram_V_q0[247:240]}};
        l_val_V_94_reg_1302 <= {{am_ram_V_q0[255:248]}};
        l_val_V_reg_1147 <= l_val_V_fu_593_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        sparse_data_addr_1_read_reg_1124 <= m_axi_sparse_data_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        sparse_data_addr_read_reg_1091 <= m_axi_sparse_data_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_474_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40))) begin
        trunc_ln5_reg_1086 <= {{add_ln25_fu_501_p2[63:5]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        zext_ln22_1_reg_1071[26 : 0] <= zext_ln22_1_fu_470_p1[26 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        zext_ln25_1_reg_1102[26 : 0] <= zext_ln25_1_fu_534_p1[26 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        am_ram_V_address0 = zext_ln29_fu_567_p1;
    end else if ((1'b1 == ap_CS_fsm_state83)) begin
        am_ram_V_address0 = zext_ln25_1_reg_1102;
    end else begin
        am_ram_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state84))) begin
        am_ram_V_ce0 = 1'b1;
    end else begin
        am_ram_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        am_ram_V_we0 = 1'b1;
    end else begin
        am_ram_V_we0 = 1'b0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

always @ (*) begin
    if ((m_axi_sparse_data_ARREADY == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

always @ (*) begin
    if ((m_axi_sparse_data_RVALID == 1'b0)) begin
        ap_ST_fsm_state41_blk = 1'b1;
    end else begin
        ap_ST_fsm_state41_blk = 1'b0;
    end
end

assign ap_ST_fsm_state42_blk = 1'b0;

always @ (*) begin
    if ((m_axi_sparse_data_ARREADY == 1'b0)) begin
        ap_ST_fsm_state43_blk = 1'b1;
    end else begin
        ap_ST_fsm_state43_blk = 1'b0;
    end
end

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

assign ap_ST_fsm_state72_blk = 1'b0;

assign ap_ST_fsm_state73_blk = 1'b0;

assign ap_ST_fsm_state74_blk = 1'b0;

assign ap_ST_fsm_state75_blk = 1'b0;

assign ap_ST_fsm_state76_blk = 1'b0;

assign ap_ST_fsm_state77_blk = 1'b0;

assign ap_ST_fsm_state78_blk = 1'b0;

assign ap_ST_fsm_state79_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state80_blk = 1'b0;

assign ap_ST_fsm_state81_blk = 1'b0;

always @ (*) begin
    if ((m_axi_sparse_data_RVALID == 1'b0)) begin
        ap_ST_fsm_state82_blk = 1'b1;
    end else begin
        ap_ST_fsm_state82_blk = 1'b0;
    end
end

assign ap_ST_fsm_state83_blk = 1'b0;

assign ap_ST_fsm_state84_blk = 1'b0;

assign ap_ST_fsm_state85_blk = 1'b0;

assign ap_ST_fsm_state86_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln29_fu_572_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state84))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln33_fu_907_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state86))) begin
        if ((icmp_ln1023_fu_960_p2 == 1'd1)) begin
            ap_phi_mux_count_1_phi_fu_376_p4 = count_reg_361;
        end else if ((icmp_ln1023_fu_960_p2 == 1'd0)) begin
            ap_phi_mux_count_1_phi_fu_376_p4 = count_2_fu_969_p2;
        end else begin
            ap_phi_mux_count_1_phi_fu_376_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_count_1_phi_fu_376_p4 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln29_fu_572_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state84))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln29_fu_572_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state84))) begin
        ap_return_0 = am_ROWS;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if (((icmp_ln29_fu_572_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state84))) begin
        ap_return_1 = fm_COLS;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        count_ram_ce0 = 1'b1;
    end else begin
        count_ram_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln33_fu_907_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state86))) begin
        count_ram_we0 = 1'b1;
    end else begin
        count_ram_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        fm_ram_ce0 = 1'b1;
    end else begin
        fm_ram_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        fm_ram_we0 = 1'b1;
    end else begin
        fm_ram_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state86)) begin
        idx_ram_ce0 = 1'b1;
    end else begin
        idx_ram_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1023_fu_960_p2 == 1'd0) & (icmp_ln33_fu_907_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state86))) begin
        idx_ram_we0 = 1'b1;
    end else begin
        idx_ram_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_sparse_data_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state43)) begin
            m_axi_sparse_data_ARADDR = sext_ln25_fu_521_p1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            m_axi_sparse_data_ARADDR = sext_ln22_fu_437_p1;
        end else begin
            m_axi_sparse_data_ARADDR = 'bx;
        end
    end else begin
        m_axi_sparse_data_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((m_axi_sparse_data_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state43)) begin
            m_axi_sparse_data_ARLEN = zext_ln21_reg_1066;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            m_axi_sparse_data_ARLEN = zext_ln20_fu_433_p1;
        end else begin
            m_axi_sparse_data_ARLEN = 'bx;
        end
    end else begin
        m_axi_sparse_data_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state43) & (m_axi_sparse_data_ARREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & (m_axi_sparse_data_ARREADY == 1'b1)))) begin
        m_axi_sparse_data_ARVALID = 1'b1;
    end else begin
        m_axi_sparse_data_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state82) & (m_axi_sparse_data_RVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state41) & (m_axi_sparse_data_RVALID == 1'b1)))) begin
        m_axi_sparse_data_RREADY = 1'b1;
    end else begin
        m_axi_sparse_data_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state2))) begin
        sparse_data_blk_n_AR = m_axi_sparse_data_ARREADY;
    end else begin
        sparse_data_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state41))) begin
        sparse_data_blk_n_R = m_axi_sparse_data_RVALID;
    end else begin
        sparse_data_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (m_axi_sparse_data_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            if (((icmp_ln22_fu_474_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state41 : begin
            if (((1'b1 == ap_CS_fsm_state41) & (m_axi_sparse_data_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state43 : begin
            if (((1'b1 == ap_CS_fsm_state43) & (m_axi_sparse_data_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            if (((icmp_ln25_fu_538_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state81))) begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end
        end
        ap_ST_fsm_state82 : begin
            if (((1'b1 == ap_CS_fsm_state82) & (m_axi_sparse_data_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state84 : begin
            if (((icmp_ln29_fu_572_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state84))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            if (((icmp_ln33_fu_907_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state86))) begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln22_1_fu_479_p2 = (i_fu_208 + 27'd1);

assign add_ln22_fu_412_p2 = (zext_ln22_fu_408_p1 + inputs);

assign add_ln25_1_fu_543_p2 = (j_fu_216 + 27'd1);

assign add_ln25_fu_501_p2 = (zext_ln25_fu_497_p1 + inputs);

assign add_ln33_fu_912_p2 = (col_reg_350 + 32'd1);

assign add_ln39_fu_577_p2 = (row_fu_220 + 32'd1);

assign am_loop_num_fu_453_p4 = {{mul_ln21_fu_447_p2[31:5]}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign count_2_fu_969_p2 = (count_reg_361 + 32'd1);

assign count_ram_address0 = zext_ln29_reg_1129;

assign count_ram_d0 = count_reg_361[7:0];

assign fm_ram_address0 = zext_ln22_1_reg_1071;

assign fm_ram_d0 = sparse_data_addr_read_reg_1091;

assign icmp_ln1023_fu_960_p2 = ((tmp_fu_922_p34 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_474_p2 = ((i_fu_208 == fm_loop_num_reg_1023) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_538_p2 = ((j_fu_216 == am_loop_num_reg_1061) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_572_p1 = am_ROWS;

assign icmp_ln29_fu_572_p2 = ((row_fu_220 == icmp_ln29_fu_572_p1) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_907_p1 = am_COLS;

assign icmp_ln33_fu_907_p2 = ((col_reg_350 == icmp_ln33_fu_907_p1) ? 1'b1 : 1'b0);

assign idx_count_1_fu_981_p2 = (idx_count_fu_224 + 32'd1);

assign idx_ram_address0 = zext_ln36_fu_987_p1;

assign idx_ram_d0 = col_reg_350[7:0];

assign l_val_V_fu_593_p1 = am_ram_V_q0[7:0];

assign m_axi_sparse_data_ARBURST = 2'd0;

assign m_axi_sparse_data_ARCACHE = 4'd0;

assign m_axi_sparse_data_ARID = 1'd0;

assign m_axi_sparse_data_ARLOCK = 2'd0;

assign m_axi_sparse_data_ARPROT = 3'd0;

assign m_axi_sparse_data_ARQOS = 4'd0;

assign m_axi_sparse_data_ARREGION = 4'd0;

assign m_axi_sparse_data_ARSIZE = 3'd0;

assign m_axi_sparse_data_ARUSER = 1'd0;

assign m_axi_sparse_data_AWADDR = 64'd0;

assign m_axi_sparse_data_AWBURST = 2'd0;

assign m_axi_sparse_data_AWCACHE = 4'd0;

assign m_axi_sparse_data_AWID = 1'd0;

assign m_axi_sparse_data_AWLEN = 32'd0;

assign m_axi_sparse_data_AWLOCK = 2'd0;

assign m_axi_sparse_data_AWPROT = 3'd0;

assign m_axi_sparse_data_AWQOS = 4'd0;

assign m_axi_sparse_data_AWREGION = 4'd0;

assign m_axi_sparse_data_AWSIZE = 3'd0;

assign m_axi_sparse_data_AWUSER = 1'd0;

assign m_axi_sparse_data_AWVALID = 1'b0;

assign m_axi_sparse_data_BREADY = 1'b0;

assign m_axi_sparse_data_WDATA = 256'd0;

assign m_axi_sparse_data_WID = 1'd0;

assign m_axi_sparse_data_WLAST = 1'b0;

assign m_axi_sparse_data_WSTRB = 32'd0;

assign m_axi_sparse_data_WUSER = 1'd0;

assign m_axi_sparse_data_WVALID = 1'b0;

assign sext_ln22_fu_437_p1 = $signed(trunc_ln4_reg_1029);

assign sext_ln25_fu_521_p1 = $signed(trunc_ln5_reg_1086);

assign shl_ln1_fu_490_p3 = {{input_data_addr2}, {5'd0}};

assign shl_ln_fu_400_p3 = {{input_data_addr1}, {5'd0}};

assign tmp_fu_922_p33 = col_reg_350[4:0];

assign zext_ln20_fu_433_p1 = fm_loop_num_reg_1023;

assign zext_ln21_fu_463_p1 = am_loop_num_fu_453_p4;

assign zext_ln22_1_fu_470_p1 = i_fu_208;

assign zext_ln22_fu_408_p1 = shl_ln_fu_400_p3;

assign zext_ln25_1_fu_534_p1 = j_fu_216;

assign zext_ln25_fu_497_p1 = shl_ln1_fu_490_p3;

assign zext_ln29_fu_567_p1 = row_fu_220;

assign zext_ln36_fu_987_p1 = idx_count_fu_224;

always @ (posedge ap_clk) begin
    zext_ln21_reg_1066[31:27] <= 5'b00000;
    zext_ln22_1_reg_1071[63:27] <= 37'b0000000000000000000000000000000000000;
    zext_ln25_1_reg_1102[63:27] <= 37'b0000000000000000000000000000000000000;
    zext_ln29_reg_1129[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //sparse_load_ap_uint_256_ap_int_8_32u_s
