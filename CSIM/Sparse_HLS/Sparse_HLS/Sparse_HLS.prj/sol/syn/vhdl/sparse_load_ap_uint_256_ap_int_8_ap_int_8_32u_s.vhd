-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sparse_load_ap_uint_256_ap_int_8_ap_int_8_32u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    am_ROWS : IN STD_LOGIC_VECTOR (31 downto 0);
    am_COLS : IN STD_LOGIC_VECTOR (31 downto 0);
    fm_ROWS : IN STD_LOGIC_VECTOR (31 downto 0);
    fm_COLS : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_sparse_data_AWVALID : OUT STD_LOGIC;
    m_axi_sparse_data_AWREADY : IN STD_LOGIC;
    m_axi_sparse_data_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_sparse_data_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_sparse_data_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_sparse_data_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_sparse_data_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_sparse_data_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_sparse_data_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_sparse_data_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_sparse_data_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_sparse_data_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_sparse_data_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_sparse_data_WVALID : OUT STD_LOGIC;
    m_axi_sparse_data_WREADY : IN STD_LOGIC;
    m_axi_sparse_data_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    m_axi_sparse_data_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_sparse_data_WLAST : OUT STD_LOGIC;
    m_axi_sparse_data_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_sparse_data_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_sparse_data_ARVALID : OUT STD_LOGIC;
    m_axi_sparse_data_ARREADY : IN STD_LOGIC;
    m_axi_sparse_data_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_sparse_data_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_sparse_data_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_sparse_data_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_sparse_data_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_sparse_data_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_sparse_data_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_sparse_data_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_sparse_data_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_sparse_data_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_sparse_data_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_sparse_data_RVALID : IN STD_LOGIC;
    m_axi_sparse_data_RREADY : OUT STD_LOGIC;
    m_axi_sparse_data_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    m_axi_sparse_data_RLAST : IN STD_LOGIC;
    m_axi_sparse_data_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_sparse_data_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_sparse_data_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_sparse_data_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_sparse_data_BVALID : IN STD_LOGIC;
    m_axi_sparse_data_BREADY : OUT STD_LOGIC;
    m_axi_sparse_data_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_sparse_data_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_sparse_data_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    inputs : IN STD_LOGIC_VECTOR (63 downto 0);
    idx_stream4_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    idx_stream4_num_data_valid : IN STD_LOGIC_VECTOR (7 downto 0);
    idx_stream4_fifo_cap : IN STD_LOGIC_VECTOR (7 downto 0);
    idx_stream4_full_n : IN STD_LOGIC;
    idx_stream4_write : OUT STD_LOGIC;
    count_stream5_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    count_stream5_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
    count_stream5_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
    count_stream5_full_n : IN STD_LOGIC;
    count_stream5_write : OUT STD_LOGIC;
    fm_stream3_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    fm_stream3_num_data_valid : IN STD_LOGIC_VECTOR (7 downto 0);
    fm_stream3_fifo_cap : IN STD_LOGIC_VECTOR (7 downto 0);
    fm_stream3_full_n : IN STD_LOGIC;
    fm_stream3_write : OUT STD_LOGIC;
    input_data_addr1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_data_addr2 : IN STD_LOGIC_VECTOR (31 downto 0);
    am_ROWS_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    am_ROWS_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    am_ROWS_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    am_ROWS_c_full_n : IN STD_LOGIC;
    am_ROWS_c_write : OUT STD_LOGIC;
    fm_ROWS_c11_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    fm_ROWS_c11_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    fm_ROWS_c11_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    fm_ROWS_c11_full_n : IN STD_LOGIC;
    fm_ROWS_c11_write : OUT STD_LOGIC;
    fm_COLS_c13_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    fm_COLS_c13_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    fm_COLS_c13_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    fm_COLS_c13_full_n : IN STD_LOGIC;
    fm_COLS_c13_write : OUT STD_LOGIC );
end;


architecture behav of sparse_load_ap_uint_256_ap_int_8_ap_int_8_32u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (87 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (87 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (87 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (87 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (87 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (87 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (87 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (87 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (87 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (87 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (87 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv27_1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_97 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010111";
    constant ap_const_lv32_98 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_B7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110111";
    constant ap_const_lv32_B8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_C7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000111";
    constant ap_const_lv32_C8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_D7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010111";
    constant ap_const_lv32_D8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_E7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100111";
    constant ap_const_lv32_E8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101000";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_F7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110111";
    constant ap_const_lv32_F8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (87 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal sparse_data_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sparse_data_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal idx_stream4_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal icmp_ln1023_reg_1393 : STD_LOGIC_VECTOR (0 downto 0);
    signal count_stream5_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal icmp_ln39_fu_989_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fm_stream3_blk_n : STD_LOGIC;
    signal am_ROWS_c_blk_n : STD_LOGIC;
    signal fm_ROWS_c11_blk_n : STD_LOGIC;
    signal fm_COLS_c13_blk_n : STD_LOGIC;
    signal fm_loop_num_reg_1101 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln3_reg_1107 : STD_LOGIC_VECTOR (58 downto 0);
    signal zext_ln21_fu_495_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal am_loop_num_fu_514_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal am_loop_num_reg_1133 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln22_fu_524_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln22_reg_1138 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln23_1_fu_531_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_1_reg_1143 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal trunc_ln4_reg_1158 : STD_LOGIC_VECTOR (58 downto 0);
    signal icmp_ln23_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sparse_data_addr_read_reg_1163 : STD_LOGIC_VECTOR (255 downto 0);
    signal zext_ln27_1_fu_595_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln27_1_reg_1174 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal trunc_ln5_reg_1189 : STD_LOGIC_VECTOR (26 downto 0);
    signal icmp_ln27_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sparse_data_addr_1_read_reg_1194 : STD_LOGIC_VECTOR (255 downto 0);
    signal block_4_fu_637_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal block_4_reg_1202 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal mul_fu_647_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_reg_1207 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln32_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln34_fu_665_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln34_reg_1215 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal icmp_ln34_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal l_val_V_fu_675_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_reg_1225 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal l_val_V_95_reg_1230 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_96_reg_1235 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_97_reg_1240 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_98_reg_1245 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_99_reg_1250 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_100_reg_1255 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_101_reg_1260 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_102_reg_1265 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_103_reg_1270 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_104_reg_1275 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_105_reg_1280 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_106_reg_1285 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_107_reg_1290 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_108_reg_1295 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_109_reg_1300 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_110_reg_1305 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_111_reg_1310 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_112_reg_1315 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_113_reg_1320 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_114_reg_1325 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_115_reg_1330 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_116_reg_1335 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_117_reg_1340 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_118_reg_1345 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_119_reg_1350 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_120_reg_1355 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_121_reg_1360 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_122_reg_1365 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_123_reg_1370 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_124_reg_1375 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_125_reg_1380 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln39_fu_994_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln39_reg_1388 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state87 : BOOLEAN;
    signal icmp_ln1023_fu_1042_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_1_fu_1052_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln44_1_reg_1397 : STD_LOGIC_VECTOR (7 downto 0);
    signal am_ram_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal am_ram_V_ce0 : STD_LOGIC;
    signal am_ram_V_we0 : STD_LOGIC;
    signal am_ram_V_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal fm_ram_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal fm_ram_V_ce0 : STD_LOGIC;
    signal fm_ram_V_we0 : STD_LOGIC;
    signal fm_ram_V_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal row_reg_400 : STD_LOGIC_VECTOR (31 downto 0);
    signal col_reg_411 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state88 : BOOLEAN;
    signal count_reg_422 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_count_1_phi_fu_438_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_2_fu_1071_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_1_reg_434 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal zext_ln34_fu_655_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_fu_1061_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln23_fu_499_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln27_fu_582_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_232 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln23_1_fu_540_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal j_fu_244 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln27_1_fu_604_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal block_fu_248 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_ln21_fu_446_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_462_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal zext_ln23_fu_470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln23_fu_474_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln22_fu_509_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1_fu_551_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal zext_ln27_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln27_fu_562_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln5_fu_615_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_66_fu_643_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln34_fu_660_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln39_fu_989_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_1004_p33 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_1004_p34 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln44_fu_1048_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln45_fu_1056_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (87 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal ap_ST_fsm_state81_blk : STD_LOGIC;
    signal ap_ST_fsm_state82_blk : STD_LOGIC;
    signal ap_ST_fsm_state83_blk : STD_LOGIC;
    signal ap_ST_fsm_state84_blk : STD_LOGIC;
    signal ap_ST_fsm_state85_blk : STD_LOGIC;
    signal ap_ST_fsm_state86_blk : STD_LOGIC;
    signal ap_ST_fsm_state87_blk : STD_LOGIC;
    signal ap_ST_fsm_state88_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sparse_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component sparse_mux_325_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (7 downto 0);
        din17 : IN STD_LOGIC_VECTOR (7 downto 0);
        din18 : IN STD_LOGIC_VECTOR (7 downto 0);
        din19 : IN STD_LOGIC_VECTOR (7 downto 0);
        din20 : IN STD_LOGIC_VECTOR (7 downto 0);
        din21 : IN STD_LOGIC_VECTOR (7 downto 0);
        din22 : IN STD_LOGIC_VECTOR (7 downto 0);
        din23 : IN STD_LOGIC_VECTOR (7 downto 0);
        din24 : IN STD_LOGIC_VECTOR (7 downto 0);
        din25 : IN STD_LOGIC_VECTOR (7 downto 0);
        din26 : IN STD_LOGIC_VECTOR (7 downto 0);
        din27 : IN STD_LOGIC_VECTOR (7 downto 0);
        din28 : IN STD_LOGIC_VECTOR (7 downto 0);
        din29 : IN STD_LOGIC_VECTOR (7 downto 0);
        din30 : IN STD_LOGIC_VECTOR (7 downto 0);
        din31 : IN STD_LOGIC_VECTOR (7 downto 0);
        din32 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sparse_load_ap_uint_256_ap_int_8_ap_int_8_32u_s_am_ram_V_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (255 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;


    component sparse_load_ap_uint_256_ap_int_8_ap_int_8_32u_s_fm_ram_V_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (255 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;



begin
    am_ram_V_U : component sparse_load_ap_uint_256_ap_int_8_ap_int_8_32u_s_am_ram_V_RAM_AUTO_1R1W
    generic map (
        DataWidth => 256,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => am_ram_V_address0,
        ce0 => am_ram_V_ce0,
        we0 => am_ram_V_we0,
        d0 => sparse_data_addr_1_read_reg_1194,
        q0 => am_ram_V_q0);

    fm_ram_V_U : component sparse_load_ap_uint_256_ap_int_8_ap_int_8_32u_s_fm_ram_V_RAM_AUTO_1R1W
    generic map (
        DataWidth => 256,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => fm_ram_V_address0,
        ce0 => fm_ram_V_ce0,
        we0 => fm_ram_V_we0,
        d0 => sparse_data_addr_read_reg_1163,
        q0 => fm_ram_V_q0);

    mul_32s_32s_32_1_1_U9 : component sparse_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => fm_COLS,
        din1 => fm_ROWS,
        dout => mul_ln21_fu_446_p2);

    mul_32s_32s_32_1_1_U10 : component sparse_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => am_COLS,
        din1 => am_ROWS,
        dout => mul_ln22_fu_509_p2);

    mux_325_8_1_1_U11 : component sparse_mux_325_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 8,
        din17_WIDTH => 8,
        din18_WIDTH => 8,
        din19_WIDTH => 8,
        din20_WIDTH => 8,
        din21_WIDTH => 8,
        din22_WIDTH => 8,
        din23_WIDTH => 8,
        din24_WIDTH => 8,
        din25_WIDTH => 8,
        din26_WIDTH => 8,
        din27_WIDTH => 8,
        din28_WIDTH => 8,
        din29_WIDTH => 8,
        din30_WIDTH => 8,
        din31_WIDTH => 8,
        din32_WIDTH => 5,
        dout_WIDTH => 8)
    port map (
        din0 => l_val_V_reg_1225,
        din1 => l_val_V_95_reg_1230,
        din2 => l_val_V_96_reg_1235,
        din3 => l_val_V_97_reg_1240,
        din4 => l_val_V_98_reg_1245,
        din5 => l_val_V_99_reg_1250,
        din6 => l_val_V_100_reg_1255,
        din7 => l_val_V_101_reg_1260,
        din8 => l_val_V_102_reg_1265,
        din9 => l_val_V_103_reg_1270,
        din10 => l_val_V_104_reg_1275,
        din11 => l_val_V_105_reg_1280,
        din12 => l_val_V_106_reg_1285,
        din13 => l_val_V_107_reg_1290,
        din14 => l_val_V_108_reg_1295,
        din15 => l_val_V_109_reg_1300,
        din16 => l_val_V_110_reg_1305,
        din17 => l_val_V_111_reg_1310,
        din18 => l_val_V_112_reg_1315,
        din19 => l_val_V_113_reg_1320,
        din20 => l_val_V_114_reg_1325,
        din21 => l_val_V_115_reg_1330,
        din22 => l_val_V_116_reg_1335,
        din23 => l_val_V_117_reg_1340,
        din24 => l_val_V_118_reg_1345,
        din25 => l_val_V_119_reg_1350,
        din26 => l_val_V_120_reg_1355,
        din27 => l_val_V_121_reg_1360,
        din28 => l_val_V_122_reg_1365,
        din29 => l_val_V_123_reg_1370,
        din30 => l_val_V_124_reg_1375,
        din31 => l_val_V_125_reg_1380,
        din32 => tmp_fu_1004_p33,
        dout => tmp_fu_1004_p34);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln32_fu_632_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state84))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    block_fu_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_599_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then 
                block_fu_248 <= ap_const_lv27_0;
            elsif (((icmp_ln34_fu_660_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state85))) then 
                block_fu_248 <= block_4_reg_1202;
            end if; 
        end if;
    end process;

    col_reg_411_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((icmp_ln1023_reg_1393 = ap_const_lv1_0) and (fm_stream3_full_n = ap_const_logic_0)) or ((icmp_ln1023_reg_1393 = ap_const_lv1_0) and (idx_stream4_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state88))) then 
                col_reg_411 <= add_ln39_reg_1388;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
                col_reg_411 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    count_1_reg_434_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln39_fu_989_p2 = ap_const_lv1_1) and (count_stream5_full_n = ap_const_logic_0))) and (icmp_ln1023_fu_1042_p2 = ap_const_lv1_1) and (icmp_ln39_fu_989_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state87))) then 
                count_1_reg_434 <= count_reg_422;
            elsif ((not((((icmp_ln1023_reg_1393 = ap_const_lv1_0) and (fm_stream3_full_n = ap_const_logic_0)) or ((icmp_ln1023_reg_1393 = ap_const_lv1_0) and (idx_stream4_full_n = ap_const_logic_0)))) and (icmp_ln1023_reg_1393 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state88))) then 
                count_1_reg_434 <= count_2_fu_1071_p2;
            end if; 
        end if;
    end process;

    count_reg_422_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((icmp_ln1023_reg_1393 = ap_const_lv1_0) and (fm_stream3_full_n = ap_const_logic_0)) or ((icmp_ln1023_reg_1393 = ap_const_lv1_0) and (idx_stream4_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state88))) then 
                count_reg_422 <= ap_phi_mux_count_1_phi_fu_438_p4;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
                count_reg_422 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_fu_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((real_start = ap_const_logic_0) or (ap_const_logic_0 = am_ROWS_c_full_n) or (fm_COLS_c13_full_n = ap_const_logic_0) or (fm_ROWS_c11_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_232 <= ap_const_lv27_0;
            elsif (((icmp_ln23_fu_535_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                i_fu_232 <= add_ln23_1_fu_540_p2;
            end if; 
        end if;
    end process;

    j_fu_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_535_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
                j_fu_244 <= ap_const_lv27_0;
            elsif (((icmp_ln27_fu_599_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state81))) then 
                j_fu_244 <= add_ln27_1_fu_604_p2;
            end if; 
        end if;
    end process;

    row_reg_400_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln39_fu_989_p2 = ap_const_lv1_1) and (count_stream5_full_n = ap_const_logic_0))) and (icmp_ln39_fu_989_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state87))) then 
                row_reg_400 <= add_ln34_reg_1215;
            elsif (((icmp_ln32_fu_632_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state84))) then 
                row_reg_400 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state85)) then
                add_ln34_reg_1215 <= add_ln34_fu_665_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln39_fu_989_p2 = ap_const_lv1_1) and (count_stream5_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state87))) then
                add_ln39_reg_1388 <= add_ln39_fu_994_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                am_loop_num_reg_1133 <= mul_ln22_fu_509_p2(31 downto 5);
                    zext_ln22_reg_1138(26 downto 0) <= zext_ln22_fu_524_p1(26 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then
                block_4_reg_1202 <= block_4_fu_637_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                fm_loop_num_reg_1101 <= mul_ln21_fu_446_p2(31 downto 5);
                trunc_ln3_reg_1107 <= add_ln23_fu_474_p2(63 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln39_fu_989_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state87))) then
                icmp_ln1023_reg_1393 <= icmp_ln1023_fu_1042_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state86)) then
                l_val_V_100_reg_1255 <= am_ram_V_q0(55 downto 48);
                l_val_V_101_reg_1260 <= am_ram_V_q0(63 downto 56);
                l_val_V_102_reg_1265 <= am_ram_V_q0(71 downto 64);
                l_val_V_103_reg_1270 <= am_ram_V_q0(79 downto 72);
                l_val_V_104_reg_1275 <= am_ram_V_q0(87 downto 80);
                l_val_V_105_reg_1280 <= am_ram_V_q0(95 downto 88);
                l_val_V_106_reg_1285 <= am_ram_V_q0(103 downto 96);
                l_val_V_107_reg_1290 <= am_ram_V_q0(111 downto 104);
                l_val_V_108_reg_1295 <= am_ram_V_q0(119 downto 112);
                l_val_V_109_reg_1300 <= am_ram_V_q0(127 downto 120);
                l_val_V_110_reg_1305 <= am_ram_V_q0(135 downto 128);
                l_val_V_111_reg_1310 <= am_ram_V_q0(143 downto 136);
                l_val_V_112_reg_1315 <= am_ram_V_q0(151 downto 144);
                l_val_V_113_reg_1320 <= am_ram_V_q0(159 downto 152);
                l_val_V_114_reg_1325 <= am_ram_V_q0(167 downto 160);
                l_val_V_115_reg_1330 <= am_ram_V_q0(175 downto 168);
                l_val_V_116_reg_1335 <= am_ram_V_q0(183 downto 176);
                l_val_V_117_reg_1340 <= am_ram_V_q0(191 downto 184);
                l_val_V_118_reg_1345 <= am_ram_V_q0(199 downto 192);
                l_val_V_119_reg_1350 <= am_ram_V_q0(207 downto 200);
                l_val_V_120_reg_1355 <= am_ram_V_q0(215 downto 208);
                l_val_V_121_reg_1360 <= am_ram_V_q0(223 downto 216);
                l_val_V_122_reg_1365 <= am_ram_V_q0(231 downto 224);
                l_val_V_123_reg_1370 <= am_ram_V_q0(239 downto 232);
                l_val_V_124_reg_1375 <= am_ram_V_q0(247 downto 240);
                l_val_V_125_reg_1380 <= am_ram_V_q0(255 downto 248);
                l_val_V_95_reg_1230 <= am_ram_V_q0(15 downto 8);
                l_val_V_96_reg_1235 <= am_ram_V_q0(23 downto 16);
                l_val_V_97_reg_1240 <= am_ram_V_q0(31 downto 24);
                l_val_V_98_reg_1245 <= am_ram_V_q0(39 downto 32);
                l_val_V_99_reg_1250 <= am_ram_V_q0(47 downto 40);
                l_val_V_reg_1225 <= l_val_V_fu_675_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln32_fu_632_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state84))) then
                    mul_reg_1207(8 downto 5) <= mul_fu_647_p3(8 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state82)) then
                sparse_data_addr_1_read_reg_1194 <= m_axi_sparse_data_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                sparse_data_addr_read_reg_1163 <= m_axi_sparse_data_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1023_fu_1042_p2 = ap_const_lv1_0) and (icmp_ln39_fu_989_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state87))) then
                trunc_ln44_1_reg_1397 <= trunc_ln44_1_fu_1052_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_535_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                trunc_ln4_reg_1158 <= add_ln27_fu_562_p2(63 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_599_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then
                trunc_ln5_reg_1189 <= trunc_ln5_fu_615_p1(31 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                    zext_ln23_1_reg_1143(26 downto 0) <= zext_ln23_1_fu_531_p1(26 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state81)) then
                    zext_ln27_1_reg_1174(26 downto 0) <= zext_ln27_1_fu_595_p1(26 downto 0);
            end if;
        end if;
    end process;
    zext_ln22_reg_1138(31 downto 27) <= "00000";
    zext_ln23_1_reg_1143(63 downto 27) <= "0000000000000000000000000000000000000";
    zext_ln27_1_reg_1174(63 downto 27) <= "0000000000000000000000000000000000000";
    mul_reg_1207(4 downto 0) <= "00000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, m_axi_sparse_data_ARREADY, m_axi_sparse_data_RVALID, idx_stream4_full_n, count_stream5_full_n, fm_stream3_full_n, am_ROWS_c_full_n, fm_ROWS_c11_full_n, fm_COLS_c13_full_n, ap_CS_fsm_state2, ap_CS_fsm_state41, ap_CS_fsm_state43, ap_CS_fsm_state82, ap_CS_fsm_state88, icmp_ln1023_reg_1393, ap_CS_fsm_state87, icmp_ln39_fu_989_p2, ap_CS_fsm_state40, icmp_ln23_fu_535_p2, ap_CS_fsm_state81, icmp_ln27_fu_599_p2, ap_CS_fsm_state84, icmp_ln32_fu_632_p2, ap_CS_fsm_state85, icmp_ln34_fu_660_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_const_logic_0 = am_ROWS_c_full_n) or (fm_COLS_c13_full_n = ap_const_logic_0) or (fm_ROWS_c11_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (m_axi_sparse_data_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                if (((icmp_ln23_fu_535_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state41 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state41) and (m_axi_sparse_data_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state43 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state43) and (m_axi_sparse_data_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                if (((icmp_ln27_fu_599_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state81))) then
                    ap_NS_fsm <= ap_ST_fsm_state84;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when ap_ST_fsm_state82 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state82) and (m_axi_sparse_data_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state84 => 
                if (((icmp_ln32_fu_632_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state84))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state85;
                end if;
            when ap_ST_fsm_state85 => 
                if (((icmp_ln34_fu_660_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state85))) then
                    ap_NS_fsm <= ap_ST_fsm_state84;
                else
                    ap_NS_fsm <= ap_ST_fsm_state86;
                end if;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                if ((not(((icmp_ln39_fu_989_p2 = ap_const_lv1_1) and (count_stream5_full_n = ap_const_logic_0))) and (icmp_ln39_fu_989_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state87))) then
                    ap_NS_fsm <= ap_ST_fsm_state85;
                elsif ((not(((icmp_ln39_fu_989_p2 = ap_const_lv1_1) and (count_stream5_full_n = ap_const_logic_0))) and (icmp_ln39_fu_989_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state87))) then
                    ap_NS_fsm <= ap_ST_fsm_state88;
                else
                    ap_NS_fsm <= ap_ST_fsm_state87;
                end if;
            when ap_ST_fsm_state88 => 
                if ((not((((icmp_ln1023_reg_1393 = ap_const_lv1_0) and (fm_stream3_full_n = ap_const_logic_0)) or ((icmp_ln1023_reg_1393 = ap_const_lv1_0) and (idx_stream4_full_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state88))) then
                    ap_NS_fsm <= ap_ST_fsm_state87;
                else
                    ap_NS_fsm <= ap_ST_fsm_state88;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln23_1_fu_540_p2 <= std_logic_vector(unsigned(i_fu_232) + unsigned(ap_const_lv27_1));
    add_ln23_fu_474_p2 <= std_logic_vector(unsigned(zext_ln23_fu_470_p1) + unsigned(inputs));
    add_ln27_1_fu_604_p2 <= std_logic_vector(unsigned(j_fu_244) + unsigned(ap_const_lv27_1));
    add_ln27_fu_562_p2 <= std_logic_vector(unsigned(zext_ln27_fu_558_p1) + unsigned(inputs));
    add_ln34_fu_665_p2 <= std_logic_vector(unsigned(row_reg_400) + unsigned(ap_const_lv32_1));
    add_ln39_fu_994_p2 <= std_logic_vector(unsigned(col_reg_411) + unsigned(ap_const_lv32_1));
    add_ln45_fu_1056_p2 <= std_logic_vector(unsigned(trunc_ln44_fu_1048_p1) + unsigned(mul_reg_1207));

    am_ROWS_c_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, am_ROWS_c_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            am_ROWS_c_blk_n <= am_ROWS_c_full_n;
        else 
            am_ROWS_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    am_ROWS_c_din <= am_ROWS;

    am_ROWS_c_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, am_ROWS_c_full_n, fm_ROWS_c11_full_n, fm_COLS_c13_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_const_logic_0 = am_ROWS_c_full_n) or (fm_COLS_c13_full_n = ap_const_logic_0) or (fm_ROWS_c11_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            am_ROWS_c_write <= ap_const_logic_1;
        else 
            am_ROWS_c_write <= ap_const_logic_0;
        end if; 
    end process;

    am_loop_num_fu_514_p4 <= mul_ln22_fu_509_p2(31 downto 5);

    am_ram_V_address0_assign_proc : process(zext_ln27_1_reg_1174, ap_CS_fsm_state85, ap_CS_fsm_state83, zext_ln34_fu_655_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            am_ram_V_address0 <= zext_ln34_fu_655_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            am_ram_V_address0 <= zext_ln27_1_reg_1174(6 - 1 downto 0);
        else 
            am_ram_V_address0 <= "XXXXXX";
        end if; 
    end process;


    am_ram_V_ce0_assign_proc : process(ap_CS_fsm_state85, ap_CS_fsm_state83)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state85))) then 
            am_ram_V_ce0 <= ap_const_logic_1;
        else 
            am_ram_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    am_ram_V_we0_assign_proc : process(ap_CS_fsm_state83)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            am_ram_V_we0 <= ap_const_logic_1;
        else 
            am_ram_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg, am_ROWS_c_full_n, fm_ROWS_c11_full_n, fm_COLS_c13_full_n)
    begin
        if (((real_start = ap_const_logic_0) or (ap_const_logic_0 = am_ROWS_c_full_n) or (fm_COLS_c13_full_n = ap_const_logic_0) or (fm_ROWS_c11_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;

    ap_ST_fsm_state2_blk_assign_proc : process(m_axi_sparse_data_ARREADY)
    begin
        if ((m_axi_sparse_data_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;

    ap_ST_fsm_state41_blk_assign_proc : process(m_axi_sparse_data_RVALID)
    begin
        if ((m_axi_sparse_data_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state41_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state41_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state42_blk <= ap_const_logic_0;

    ap_ST_fsm_state43_blk_assign_proc : process(m_axi_sparse_data_ARREADY)
    begin
        if ((m_axi_sparse_data_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state43_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state43_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;
    ap_ST_fsm_state73_blk <= ap_const_logic_0;
    ap_ST_fsm_state74_blk <= ap_const_logic_0;
    ap_ST_fsm_state75_blk <= ap_const_logic_0;
    ap_ST_fsm_state76_blk <= ap_const_logic_0;
    ap_ST_fsm_state77_blk <= ap_const_logic_0;
    ap_ST_fsm_state78_blk <= ap_const_logic_0;
    ap_ST_fsm_state79_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state80_blk <= ap_const_logic_0;
    ap_ST_fsm_state81_blk <= ap_const_logic_0;

    ap_ST_fsm_state82_blk_assign_proc : process(m_axi_sparse_data_RVALID)
    begin
        if ((m_axi_sparse_data_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state82_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state82_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state83_blk <= ap_const_logic_0;
    ap_ST_fsm_state84_blk <= ap_const_logic_0;
    ap_ST_fsm_state85_blk <= ap_const_logic_0;
    ap_ST_fsm_state86_blk <= ap_const_logic_0;

    ap_ST_fsm_state87_blk_assign_proc : process(count_stream5_full_n, icmp_ln39_fu_989_p2)
    begin
        if (((icmp_ln39_fu_989_p2 = ap_const_lv1_1) and (count_stream5_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state87_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state87_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state88_blk_assign_proc : process(idx_stream4_full_n, fm_stream3_full_n, icmp_ln1023_reg_1393)
    begin
        if ((((icmp_ln1023_reg_1393 = ap_const_lv1_0) and (fm_stream3_full_n = ap_const_logic_0)) or ((icmp_ln1023_reg_1393 = ap_const_lv1_0) and (idx_stream4_full_n = ap_const_logic_0)))) then 
            ap_ST_fsm_state88_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state88_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, am_ROWS_c_full_n, fm_ROWS_c11_full_n, fm_COLS_c13_full_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_const_logic_0 = am_ROWS_c_full_n) or (fm_COLS_c13_full_n = ap_const_logic_0) or (fm_ROWS_c11_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state87_assign_proc : process(count_stream5_full_n, icmp_ln39_fu_989_p2)
    begin
                ap_block_state87 <= ((icmp_ln39_fu_989_p2 = ap_const_lv1_1) and (count_stream5_full_n = ap_const_logic_0));
    end process;


    ap_block_state88_assign_proc : process(idx_stream4_full_n, fm_stream3_full_n, icmp_ln1023_reg_1393)
    begin
                ap_block_state88 <= (((icmp_ln1023_reg_1393 = ap_const_lv1_0) and (fm_stream3_full_n = ap_const_logic_0)) or ((icmp_ln1023_reg_1393 = ap_const_lv1_0) and (idx_stream4_full_n = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state84, icmp_ln32_fu_632_p2)
    begin
        if (((icmp_ln32_fu_632_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state84))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_count_1_phi_fu_438_p4_assign_proc : process(ap_CS_fsm_state88, icmp_ln1023_reg_1393, count_2_fu_1071_p2, count_1_reg_434)
    begin
        if (((icmp_ln1023_reg_1393 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state88))) then 
            ap_phi_mux_count_1_phi_fu_438_p4 <= count_2_fu_1071_p2;
        else 
            ap_phi_mux_count_1_phi_fu_438_p4 <= count_1_reg_434;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    block_4_fu_637_p2 <= std_logic_vector(unsigned(block_fu_248) + unsigned(ap_const_lv27_1));
    count_2_fu_1071_p2 <= std_logic_vector(unsigned(count_reg_422) + unsigned(ap_const_lv32_1));

    count_stream5_blk_n_assign_proc : process(count_stream5_full_n, ap_CS_fsm_state87, icmp_ln39_fu_989_p2)
    begin
        if (((icmp_ln39_fu_989_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state87))) then 
            count_stream5_blk_n <= count_stream5_full_n;
        else 
            count_stream5_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    count_stream5_din <= count_reg_422(8 - 1 downto 0);

    count_stream5_write_assign_proc : process(count_stream5_full_n, ap_CS_fsm_state87, icmp_ln39_fu_989_p2)
    begin
        if ((not(((icmp_ln39_fu_989_p2 = ap_const_lv1_1) and (count_stream5_full_n = ap_const_logic_0))) and (icmp_ln39_fu_989_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state87))) then 
            count_stream5_write <= ap_const_logic_1;
        else 
            count_stream5_write <= ap_const_logic_0;
        end if; 
    end process;

    empty_66_fu_643_p1 <= block_fu_248(4 - 1 downto 0);

    fm_COLS_c13_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, fm_COLS_c13_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            fm_COLS_c13_blk_n <= fm_COLS_c13_full_n;
        else 
            fm_COLS_c13_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fm_COLS_c13_din <= fm_COLS;

    fm_COLS_c13_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, am_ROWS_c_full_n, fm_ROWS_c11_full_n, fm_COLS_c13_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_const_logic_0 = am_ROWS_c_full_n) or (fm_COLS_c13_full_n = ap_const_logic_0) or (fm_ROWS_c11_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            fm_COLS_c13_write <= ap_const_logic_1;
        else 
            fm_COLS_c13_write <= ap_const_logic_0;
        end if; 
    end process;


    fm_ROWS_c11_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, fm_ROWS_c11_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            fm_ROWS_c11_blk_n <= fm_ROWS_c11_full_n;
        else 
            fm_ROWS_c11_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fm_ROWS_c11_din <= fm_ROWS;

    fm_ROWS_c11_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, am_ROWS_c_full_n, fm_ROWS_c11_full_n, fm_COLS_c13_full_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_const_logic_0 = am_ROWS_c_full_n) or (fm_COLS_c13_full_n = ap_const_logic_0) or (fm_ROWS_c11_full_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            fm_ROWS_c11_write <= ap_const_logic_1;
        else 
            fm_ROWS_c11_write <= ap_const_logic_0;
        end if; 
    end process;


    fm_ram_V_address0_assign_proc : process(ap_CS_fsm_state87, zext_ln23_1_reg_1143, ap_CS_fsm_state42, zext_ln45_fu_1061_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            fm_ram_V_address0 <= zext_ln45_fu_1061_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            fm_ram_V_address0 <= zext_ln23_1_reg_1143(9 - 1 downto 0);
        else 
            fm_ram_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    fm_ram_V_ce0_assign_proc : process(count_stream5_full_n, ap_CS_fsm_state87, icmp_ln39_fu_989_p2, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (not(((icmp_ln39_fu_989_p2 = ap_const_lv1_1) and (count_stream5_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state87)))) then 
            fm_ram_V_ce0 <= ap_const_logic_1;
        else 
            fm_ram_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fm_ram_V_we0_assign_proc : process(ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            fm_ram_V_we0 <= ap_const_logic_1;
        else 
            fm_ram_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fm_stream3_blk_n_assign_proc : process(fm_stream3_full_n, ap_CS_fsm_state88, icmp_ln1023_reg_1393)
    begin
        if (((icmp_ln1023_reg_1393 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state88))) then 
            fm_stream3_blk_n <= fm_stream3_full_n;
        else 
            fm_stream3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fm_stream3_din <= fm_ram_V_q0;

    fm_stream3_write_assign_proc : process(idx_stream4_full_n, fm_stream3_full_n, ap_CS_fsm_state88, icmp_ln1023_reg_1393)
    begin
        if ((not((((icmp_ln1023_reg_1393 = ap_const_lv1_0) and (fm_stream3_full_n = ap_const_logic_0)) or ((icmp_ln1023_reg_1393 = ap_const_lv1_0) and (idx_stream4_full_n = ap_const_logic_0)))) and (icmp_ln1023_reg_1393 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state88))) then 
            fm_stream3_write <= ap_const_logic_1;
        else 
            fm_stream3_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1023_fu_1042_p2 <= "1" when (tmp_fu_1004_p34 = ap_const_lv8_0) else "0";
    icmp_ln23_fu_535_p2 <= "1" when (i_fu_232 = fm_loop_num_reg_1101) else "0";
    icmp_ln27_fu_599_p2 <= "1" when (j_fu_244 = am_loop_num_reg_1133) else "0";
    icmp_ln32_fu_632_p2 <= "1" when (block_fu_248 = trunc_ln5_reg_1189) else "0";
    icmp_ln34_fu_660_p1 <= am_ROWS;
    icmp_ln34_fu_660_p2 <= "1" when (row_reg_400 = icmp_ln34_fu_660_p1) else "0";
    icmp_ln39_fu_989_p1 <= am_COLS;
    icmp_ln39_fu_989_p2 <= "1" when (col_reg_411 = icmp_ln39_fu_989_p1) else "0";

    idx_stream4_blk_n_assign_proc : process(idx_stream4_full_n, ap_CS_fsm_state88, icmp_ln1023_reg_1393)
    begin
        if (((icmp_ln1023_reg_1393 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state88))) then 
            idx_stream4_blk_n <= idx_stream4_full_n;
        else 
            idx_stream4_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    idx_stream4_din <= trunc_ln44_1_reg_1397;

    idx_stream4_write_assign_proc : process(idx_stream4_full_n, fm_stream3_full_n, ap_CS_fsm_state88, icmp_ln1023_reg_1393)
    begin
        if ((not((((icmp_ln1023_reg_1393 = ap_const_lv1_0) and (fm_stream3_full_n = ap_const_logic_0)) or ((icmp_ln1023_reg_1393 = ap_const_lv1_0) and (idx_stream4_full_n = ap_const_logic_0)))) and (icmp_ln1023_reg_1393 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state88))) then 
            idx_stream4_write <= ap_const_logic_1;
        else 
            idx_stream4_write <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state84, icmp_ln32_fu_632_p2)
    begin
        if (((icmp_ln32_fu_632_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state84))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    l_val_V_fu_675_p1 <= am_ram_V_q0(8 - 1 downto 0);

    m_axi_sparse_data_ARADDR_assign_proc : process(m_axi_sparse_data_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state43, sext_ln23_fu_499_p1, sext_ln27_fu_582_p1)
    begin
        if ((m_axi_sparse_data_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                m_axi_sparse_data_ARADDR <= sext_ln27_fu_582_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                m_axi_sparse_data_ARADDR <= sext_ln23_fu_499_p1;
            else 
                m_axi_sparse_data_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_sparse_data_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_sparse_data_ARBURST <= ap_const_lv2_0;
    m_axi_sparse_data_ARCACHE <= ap_const_lv4_0;
    m_axi_sparse_data_ARID <= ap_const_lv1_0;

    m_axi_sparse_data_ARLEN_assign_proc : process(m_axi_sparse_data_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state43, zext_ln21_fu_495_p1, zext_ln22_reg_1138)
    begin
        if ((m_axi_sparse_data_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                m_axi_sparse_data_ARLEN <= zext_ln22_reg_1138;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                m_axi_sparse_data_ARLEN <= zext_ln21_fu_495_p1;
            else 
                m_axi_sparse_data_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_sparse_data_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_sparse_data_ARLOCK <= ap_const_lv2_0;
    m_axi_sparse_data_ARPROT <= ap_const_lv3_0;
    m_axi_sparse_data_ARQOS <= ap_const_lv4_0;
    m_axi_sparse_data_ARREGION <= ap_const_lv4_0;
    m_axi_sparse_data_ARSIZE <= ap_const_lv3_0;
    m_axi_sparse_data_ARUSER <= ap_const_lv1_0;

    m_axi_sparse_data_ARVALID_assign_proc : process(m_axi_sparse_data_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state43)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state43) and (m_axi_sparse_data_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (m_axi_sparse_data_ARREADY = ap_const_logic_1)))) then 
            m_axi_sparse_data_ARVALID <= ap_const_logic_1;
        else 
            m_axi_sparse_data_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_sparse_data_AWADDR <= ap_const_lv64_0;
    m_axi_sparse_data_AWBURST <= ap_const_lv2_0;
    m_axi_sparse_data_AWCACHE <= ap_const_lv4_0;
    m_axi_sparse_data_AWID <= ap_const_lv1_0;
    m_axi_sparse_data_AWLEN <= ap_const_lv32_0;
    m_axi_sparse_data_AWLOCK <= ap_const_lv2_0;
    m_axi_sparse_data_AWPROT <= ap_const_lv3_0;
    m_axi_sparse_data_AWQOS <= ap_const_lv4_0;
    m_axi_sparse_data_AWREGION <= ap_const_lv4_0;
    m_axi_sparse_data_AWSIZE <= ap_const_lv3_0;
    m_axi_sparse_data_AWUSER <= ap_const_lv1_0;
    m_axi_sparse_data_AWVALID <= ap_const_logic_0;
    m_axi_sparse_data_BREADY <= ap_const_logic_0;

    m_axi_sparse_data_RREADY_assign_proc : process(m_axi_sparse_data_RVALID, ap_CS_fsm_state41, ap_CS_fsm_state82)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state82) and (m_axi_sparse_data_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state41) and (m_axi_sparse_data_RVALID = ap_const_logic_1)))) then 
            m_axi_sparse_data_RREADY <= ap_const_logic_1;
        else 
            m_axi_sparse_data_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_sparse_data_WDATA <= ap_const_lv256_lc_1;
    m_axi_sparse_data_WID <= ap_const_lv1_0;
    m_axi_sparse_data_WLAST <= ap_const_logic_0;
    m_axi_sparse_data_WSTRB <= ap_const_lv32_0;
    m_axi_sparse_data_WUSER <= ap_const_lv1_0;
    m_axi_sparse_data_WVALID <= ap_const_logic_0;
    mul_fu_647_p3 <= (empty_66_fu_643_p1 & ap_const_lv5_0);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

        sext_ln23_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_reg_1107),64));

        sext_ln27_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln4_reg_1158),64));

    shl_ln1_fu_551_p3 <= (input_data_addr2 & ap_const_lv5_0);
    shl_ln_fu_462_p3 <= (input_data_addr1 & ap_const_lv5_0);

    sparse_data_blk_n_AR_assign_proc : process(m_axi_sparse_data_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sparse_data_blk_n_AR <= m_axi_sparse_data_ARREADY;
        else 
            sparse_data_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    sparse_data_blk_n_R_assign_proc : process(m_axi_sparse_data_RVALID, ap_CS_fsm_state41, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            sparse_data_blk_n_R <= m_axi_sparse_data_RVALID;
        else 
            sparse_data_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_1004_p33 <= col_reg_411(5 - 1 downto 0);
    trunc_ln44_1_fu_1052_p1 <= col_reg_411(8 - 1 downto 0);
    trunc_ln44_fu_1048_p1 <= col_reg_411(9 - 1 downto 0);
    trunc_ln5_fu_615_p1 <= fm_COLS;
    zext_ln21_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(fm_loop_num_reg_1101),32));
    zext_ln22_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(am_loop_num_fu_514_p4),32));
    zext_ln23_1_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_232),64));
    zext_ln23_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_462_p3),64));
    zext_ln27_1_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_fu_244),64));
    zext_ln27_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_551_p3),64));
    zext_ln34_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_reg_400),64));
    zext_ln45_fu_1061_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln45_fu_1056_p2),64));
end behav;
