-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sparse_load_ap_uint_256_ap_int_8_32u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    am_ROWS : IN STD_LOGIC_VECTOR (31 downto 0);
    am_COLS : IN STD_LOGIC_VECTOR (31 downto 0);
    fm_ROWS : IN STD_LOGIC_VECTOR (31 downto 0);
    fm_COLS : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_sparse_data_AWVALID : OUT STD_LOGIC;
    m_axi_sparse_data_AWREADY : IN STD_LOGIC;
    m_axi_sparse_data_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_sparse_data_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_sparse_data_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_sparse_data_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_sparse_data_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_sparse_data_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_sparse_data_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_sparse_data_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_sparse_data_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_sparse_data_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_sparse_data_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_sparse_data_WVALID : OUT STD_LOGIC;
    m_axi_sparse_data_WREADY : IN STD_LOGIC;
    m_axi_sparse_data_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    m_axi_sparse_data_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_sparse_data_WLAST : OUT STD_LOGIC;
    m_axi_sparse_data_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_sparse_data_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_sparse_data_ARVALID : OUT STD_LOGIC;
    m_axi_sparse_data_ARREADY : IN STD_LOGIC;
    m_axi_sparse_data_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_sparse_data_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_sparse_data_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_sparse_data_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_sparse_data_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_sparse_data_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_sparse_data_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_sparse_data_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_sparse_data_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_sparse_data_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_sparse_data_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_sparse_data_RVALID : IN STD_LOGIC;
    m_axi_sparse_data_RREADY : OUT STD_LOGIC;
    m_axi_sparse_data_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    m_axi_sparse_data_RLAST : IN STD_LOGIC;
    m_axi_sparse_data_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_sparse_data_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_sparse_data_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_sparse_data_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_sparse_data_BVALID : IN STD_LOGIC;
    m_axi_sparse_data_BREADY : OUT STD_LOGIC;
    m_axi_sparse_data_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_sparse_data_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_sparse_data_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    inputs : IN STD_LOGIC_VECTOR (63 downto 0);
    idx_ram_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    idx_ram_ce0 : OUT STD_LOGIC;
    idx_ram_we0 : OUT STD_LOGIC;
    idx_ram_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    count_ram_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    count_ram_ce0 : OUT STD_LOGIC;
    count_ram_we0 : OUT STD_LOGIC;
    count_ram_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    fm_ram_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    fm_ram_ce0 : OUT STD_LOGIC;
    fm_ram_we0 : OUT STD_LOGIC;
    fm_ram_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_data_addr1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_data_addr2 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of sparse_load_ap_uint_256_ap_int_8_32u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (85 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (85 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (85 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (85 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (85 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (85 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (85 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (85 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (85 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (85 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (85 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (85 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (85 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sparse_data_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sparse_data_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal zext_ln20_fu_245_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal zext_ln20_reg_599 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln20_fu_249_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln20_reg_604 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln20_fu_255_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln20_reg_609 : STD_LOGIC_VECTOR (4 downto 0);
    signal fm_ram_addr_reg_615 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal empty_42_fu_287_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_42_reg_623 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond7_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast_reg_628 : STD_LOGIC_VECTOR (58 downto 0);
    signal zext_ln21_fu_327_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal zext_ln21_reg_646 : STD_LOGIC_VECTOR (37 downto 0);
    signal mul_ln21_fu_331_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln21_reg_651 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_44_fu_350_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_44_reg_662 : STD_LOGIC_VECTOR (4 downto 0);
    signal sparse_data_addr_read_reg_667 : STD_LOGIC_VECTOR (255 downto 0);
    signal p_cast9_reg_675 : STD_LOGIC_VECTOR (58 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal exitcond6_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_50_fu_421_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_50_reg_680 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln1023_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1023_reg_699 : STD_LOGIC_VECTOR (0 downto 0);
    signal sparse_data_addr_1_read_reg_709 : STD_LOGIC_VECTOR (255 downto 0);
    signal zext_ln23_fu_488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_reg_714 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal add_ln32_fu_497_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln32_reg_722 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_fu_518_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_730 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal count_2_fu_527_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln26_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_reg_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln23_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal count_reg_213 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_1_reg_225 : STD_LOGIC_VECTOR (31 downto 0);
    signal loop_index5_cast12_fu_267_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_fu_544_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_cast_fu_340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast9_cast_fu_450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index5_fu_78 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_281_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal am_ram_fu_82 : STD_LOGIC_VECTOR (7 downto 0);
    signal am_ram_1_fu_476_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal loop_index_fu_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_47_fu_387_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_fu_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal idx_count_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal idx_count_1_fu_538_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal shl_ln_fu_237_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal loop_index5_cast2_fu_272_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_fu_291_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_cast_fu_296_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_43_fu_300_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln1_fu_320_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_s_fu_354_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_cast13_fu_361_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal empty_45_fu_365_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal loop_index_cast6_fu_378_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp2_fu_397_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp2_cast_fu_402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_49_fu_406_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_48_fu_393_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_460_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_cast15_fu_467_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal empty_51_fu_471_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal icmp_ln23_fu_492_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln26_fu_513_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (85 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal ap_ST_fsm_state81_blk : STD_LOGIC;
    signal ap_ST_fsm_state82_blk : STD_LOGIC;
    signal ap_ST_fsm_state83_blk : STD_LOGIC;
    signal ap_ST_fsm_state84_blk : STD_LOGIC;
    signal ap_ST_fsm_state85_blk : STD_LOGIC;
    signal ap_ST_fsm_state86_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sparse_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mul_32s_32s_32_1_1_U5 : component sparse_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => fm_COLS,
        din1 => fm_ROWS,
        dout => mul_ln20_fu_249_p2);

    mul_32s_32s_32_1_1_U6 : component sparse_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => am_COLS,
        din1 => am_ROWS,
        dout => mul_ln21_fu_331_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln23_fu_492_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state84))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if (((icmp_ln23_fu_492_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state84))) then 
                    ap_return_0_preg <= am_ROWS;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if (((icmp_ln23_fu_492_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state84))) then 
                    ap_return_1_preg <= fm_COLS;
                end if; 
            end if;
        end if;
    end process;


    col_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
                col_reg_202 <= add_ln26_reg_730;
            elsif (((icmp_ln23_fu_492_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state84))) then 
                col_reg_202 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    count_1_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_fu_513_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state85))) then
                if ((icmp_ln1023_reg_699 = ap_const_lv1_1)) then 
                    count_1_reg_225 <= count_reg_213;
                elsif ((icmp_ln1023_reg_699 = ap_const_lv1_0)) then 
                    count_1_reg_225 <= count_2_fu_527_p2;
                end if;
            end if; 
        end if;
    end process;

    count_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
                count_reg_213 <= count_1_reg_225;
            elsif (((icmp_ln23_fu_492_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state84))) then 
                count_reg_213 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    idx_count_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_382_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                idx_count_fu_94 <= ap_const_lv32_0;
            elsif (((icmp_ln26_fu_513_p2 = ap_const_lv1_0) and (icmp_ln1023_reg_699 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state85))) then 
                idx_count_fu_94 <= idx_count_1_fu_538_p2;
            end if; 
        end if;
    end process;

    loop_index5_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                loop_index5_fu_78 <= ap_const_lv32_0;
            elsif (((exitcond7_fu_276_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                loop_index5_fu_78 <= empty_fu_281_p2;
            end if; 
        end if;
    end process;

    loop_index_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                loop_index_fu_86 <= ap_const_lv32_0;
            elsif (((exitcond6_fu_382_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                loop_index_fu_86 <= empty_47_fu_387_p2;
            end if; 
        end if;
    end process;

    row_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_382_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
                row_fu_90 <= ap_const_lv32_0;
            elsif (((icmp_ln26_fu_513_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state85))) then 
                row_fu_90 <= add_ln32_reg_722;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state85)) then
                add_ln26_reg_730 <= add_ln26_fu_518_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state84)) then
                add_ln32_reg_722 <= add_ln32_fu_497_p2;
                    zext_ln23_reg_714(31 downto 0) <= zext_ln23_fu_488_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state83)) then
                am_ram_fu_82 <= am_ram_1_fu_476_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_276_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                empty_42_reg_623 <= empty_42_fu_287_p1;
                p_cast_reg_628 <= empty_43_fu_300_p2(63 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                empty_44_reg_662 <= empty_44_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_382_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                empty_50_reg_680 <= empty_50_fu_421_p2;
                p_cast9_reg_675 <= empty_49_fu_406_p2(63 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                fm_ram_addr_reg_615 <= loop_index5_cast12_fu_267_p1(14 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_382_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                icmp_ln1023_reg_699 <= icmp_ln1023_fu_434_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                mul_ln20_reg_604 <= mul_ln20_fu_249_p2;
                trunc_ln20_reg_609 <= trunc_ln20_fu_255_p1;
                    zext_ln20_reg_599(36 downto 5) <= zext_ln20_fu_245_p1(36 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                mul_ln21_reg_651 <= mul_ln21_fu_331_p2;
                    zext_ln21_reg_646(36 downto 5) <= zext_ln21_fu_327_p1(36 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state82)) then
                sparse_data_addr_1_read_reg_709 <= m_axi_sparse_data_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                sparse_data_addr_read_reg_667 <= m_axi_sparse_data_RDATA;
            end if;
        end if;
    end process;
    zext_ln20_reg_599(4 downto 0) <= "00000";
    zext_ln20_reg_599(37) <= '0';
    zext_ln21_reg_646(4 downto 0) <= "00000";
    zext_ln21_reg_646(37) <= '0';
    zext_ln23_reg_714(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, m_axi_sparse_data_ARREADY, m_axi_sparse_data_RVALID, ap_CS_fsm_state3, ap_CS_fsm_state41, ap_CS_fsm_state44, ap_CS_fsm_state82, ap_CS_fsm_state2, exitcond7_fu_276_p2, ap_CS_fsm_state43, exitcond6_fu_382_p2, ap_CS_fsm_state84, ap_CS_fsm_state85, icmp_ln26_fu_513_p2, icmp_ln23_fu_492_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond7_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (m_axi_sparse_data_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state41) and (m_axi_sparse_data_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state43 => 
                if (((exitcond6_fu_382_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state84;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state44 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state44) and (m_axi_sparse_data_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state82) and (m_axi_sparse_data_RVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state84 => 
                if (((icmp_ln23_fu_492_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state84))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state85;
                end if;
            when ap_ST_fsm_state85 => 
                if (((icmp_ln26_fu_513_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state85))) then
                    ap_NS_fsm <= ap_ST_fsm_state84;
                else
                    ap_NS_fsm <= ap_ST_fsm_state86;
                end if;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln26_fu_518_p2 <= std_logic_vector(unsigned(col_reg_202) + unsigned(ap_const_lv32_1));
    add_ln32_fu_497_p2 <= std_logic_vector(unsigned(row_fu_90) + unsigned(ap_const_lv32_1));
    am_ram_1_fu_476_p1 <= empty_51_fu_471_p2(8 - 1 downto 0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(m_axi_sparse_data_ARREADY)
    begin
        if ((m_axi_sparse_data_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state40_blk <= ap_const_logic_0;

    ap_ST_fsm_state41_blk_assign_proc : process(m_axi_sparse_data_RVALID)
    begin
        if ((m_axi_sparse_data_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state41_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state41_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;

    ap_ST_fsm_state44_blk_assign_proc : process(m_axi_sparse_data_ARREADY)
    begin
        if ((m_axi_sparse_data_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state44_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state44_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;
    ap_ST_fsm_state73_blk <= ap_const_logic_0;
    ap_ST_fsm_state74_blk <= ap_const_logic_0;
    ap_ST_fsm_state75_blk <= ap_const_logic_0;
    ap_ST_fsm_state76_blk <= ap_const_logic_0;
    ap_ST_fsm_state77_blk <= ap_const_logic_0;
    ap_ST_fsm_state78_blk <= ap_const_logic_0;
    ap_ST_fsm_state79_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state80_blk <= ap_const_logic_0;
    ap_ST_fsm_state81_blk <= ap_const_logic_0;

    ap_ST_fsm_state82_blk_assign_proc : process(m_axi_sparse_data_RVALID)
    begin
        if ((m_axi_sparse_data_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state82_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state82_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state83_blk <= ap_const_logic_0;
    ap_ST_fsm_state84_blk <= ap_const_logic_0;
    ap_ST_fsm_state85_blk <= ap_const_logic_0;
    ap_ST_fsm_state86_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state84, icmp_ln23_fu_492_p2)
    begin
        if (((icmp_ln23_fu_492_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state84))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state84, icmp_ln23_fu_492_p2)
    begin
        if (((icmp_ln23_fu_492_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state84))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(am_ROWS, ap_CS_fsm_state84, icmp_ln23_fu_492_p2, ap_return_0_preg)
    begin
        if (((icmp_ln23_fu_492_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state84))) then 
            ap_return_0 <= am_ROWS;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(fm_COLS, ap_CS_fsm_state84, icmp_ln23_fu_492_p2, ap_return_1_preg)
    begin
        if (((icmp_ln23_fu_492_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state84))) then 
            ap_return_1 <= fm_COLS;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;

    count_2_fu_527_p2 <= std_logic_vector(unsigned(count_reg_213) + unsigned(ap_const_lv32_1));
    count_ram_address0 <= zext_ln23_reg_714(5 - 1 downto 0);

    count_ram_ce0_assign_proc : process(ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            count_ram_ce0 <= ap_const_logic_1;
        else 
            count_ram_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    count_ram_d0 <= count_reg_213(8 - 1 downto 0);

    count_ram_we0_assign_proc : process(ap_CS_fsm_state85, icmp_ln26_fu_513_p2)
    begin
        if (((icmp_ln26_fu_513_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state85))) then 
            count_ram_we0 <= ap_const_logic_1;
        else 
            count_ram_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_42_fu_287_p1 <= loop_index5_fu_78(5 - 1 downto 0);
    empty_43_fu_300_p2 <= std_logic_vector(unsigned(tmp_cast_fu_296_p1) + unsigned(inputs));
    empty_44_fu_350_p2 <= std_logic_vector(unsigned(trunc_ln20_reg_609) + unsigned(empty_42_reg_623));
    empty_45_fu_365_p2 <= std_logic_vector(shift_right(unsigned(sparse_data_addr_read_reg_667),to_integer(unsigned('0' & p_cast13_fu_361_p1(31-1 downto 0)))));
    empty_47_fu_387_p2 <= std_logic_vector(unsigned(loop_index_fu_86) + unsigned(ap_const_lv32_1));
    empty_48_fu_393_p1 <= loop_index_fu_86(5 - 1 downto 0);
    empty_49_fu_406_p2 <= std_logic_vector(unsigned(tmp2_cast_fu_402_p1) + unsigned(inputs));
    empty_50_fu_421_p2 <= std_logic_vector(unsigned(trunc_ln20_reg_609) + unsigned(empty_48_fu_393_p1));
    empty_51_fu_471_p2 <= std_logic_vector(shift_right(unsigned(sparse_data_addr_1_read_reg_709),to_integer(unsigned('0' & p_cast15_fu_467_p1(31-1 downto 0)))));
    empty_fu_281_p2 <= std_logic_vector(unsigned(loop_index5_fu_78) + unsigned(ap_const_lv32_1));
    exitcond6_fu_382_p2 <= "1" when (loop_index_fu_86 = mul_ln21_reg_651) else "0";
    exitcond7_fu_276_p2 <= "1" when (loop_index5_fu_78 = mul_ln20_reg_604) else "0";
    fm_ram_address0 <= fm_ram_addr_reg_615;

    fm_ram_ce0_assign_proc : process(ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            fm_ram_ce0 <= ap_const_logic_1;
        else 
            fm_ram_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fm_ram_d0 <= empty_45_fu_365_p2(8 - 1 downto 0);

    fm_ram_we0_assign_proc : process(ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            fm_ram_we0 <= ap_const_logic_1;
        else 
            fm_ram_we0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1023_fu_434_p2 <= "1" when (am_ram_fu_82 = ap_const_lv8_0) else "0";
    icmp_ln23_fu_492_p1 <= am_ROWS;
    icmp_ln23_fu_492_p2 <= "1" when (row_fu_90 = icmp_ln23_fu_492_p1) else "0";
    icmp_ln26_fu_513_p1 <= am_COLS;
    icmp_ln26_fu_513_p2 <= "1" when (col_reg_202 = icmp_ln26_fu_513_p1) else "0";
    idx_count_1_fu_538_p2 <= std_logic_vector(unsigned(idx_count_fu_94) + unsigned(ap_const_lv32_1));
    idx_ram_address0 <= zext_ln29_fu_544_p1(10 - 1 downto 0);

    idx_ram_ce0_assign_proc : process(ap_CS_fsm_state85)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            idx_ram_ce0 <= ap_const_logic_1;
        else 
            idx_ram_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    idx_ram_d0 <= col_reg_202(8 - 1 downto 0);

    idx_ram_we0_assign_proc : process(icmp_ln1023_reg_699, ap_CS_fsm_state85, icmp_ln26_fu_513_p2)
    begin
        if (((icmp_ln26_fu_513_p2 = ap_const_lv1_0) and (icmp_ln1023_reg_699 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state85))) then 
            idx_ram_we0 <= ap_const_logic_1;
        else 
            idx_ram_we0 <= ap_const_logic_0;
        end if; 
    end process;

    loop_index5_cast12_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index5_fu_78),64));
    loop_index5_cast2_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index5_fu_78),38));
    loop_index_cast6_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index_fu_86),38));

    m_axi_sparse_data_ARADDR_assign_proc : process(m_axi_sparse_data_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state44, p_cast_cast_fu_340_p1, p_cast9_cast_fu_450_p1)
    begin
        if ((m_axi_sparse_data_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                m_axi_sparse_data_ARADDR <= p_cast9_cast_fu_450_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                m_axi_sparse_data_ARADDR <= p_cast_cast_fu_340_p1;
            else 
                m_axi_sparse_data_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_sparse_data_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_sparse_data_ARBURST <= ap_const_lv2_0;
    m_axi_sparse_data_ARCACHE <= ap_const_lv4_0;
    m_axi_sparse_data_ARID <= ap_const_lv1_0;
    m_axi_sparse_data_ARLEN <= ap_const_lv32_1;
    m_axi_sparse_data_ARLOCK <= ap_const_lv2_0;
    m_axi_sparse_data_ARPROT <= ap_const_lv3_0;
    m_axi_sparse_data_ARQOS <= ap_const_lv4_0;
    m_axi_sparse_data_ARREGION <= ap_const_lv4_0;
    m_axi_sparse_data_ARSIZE <= ap_const_lv3_0;
    m_axi_sparse_data_ARUSER <= ap_const_lv1_0;

    m_axi_sparse_data_ARVALID_assign_proc : process(m_axi_sparse_data_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state44)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state44) and (m_axi_sparse_data_ARREADY = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (m_axi_sparse_data_ARREADY = ap_const_logic_1)))) then 
            m_axi_sparse_data_ARVALID <= ap_const_logic_1;
        else 
            m_axi_sparse_data_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_sparse_data_AWADDR <= ap_const_lv64_0;
    m_axi_sparse_data_AWBURST <= ap_const_lv2_0;
    m_axi_sparse_data_AWCACHE <= ap_const_lv4_0;
    m_axi_sparse_data_AWID <= ap_const_lv1_0;
    m_axi_sparse_data_AWLEN <= ap_const_lv32_0;
    m_axi_sparse_data_AWLOCK <= ap_const_lv2_0;
    m_axi_sparse_data_AWPROT <= ap_const_lv3_0;
    m_axi_sparse_data_AWQOS <= ap_const_lv4_0;
    m_axi_sparse_data_AWREGION <= ap_const_lv4_0;
    m_axi_sparse_data_AWSIZE <= ap_const_lv3_0;
    m_axi_sparse_data_AWUSER <= ap_const_lv1_0;
    m_axi_sparse_data_AWVALID <= ap_const_logic_0;
    m_axi_sparse_data_BREADY <= ap_const_logic_0;

    m_axi_sparse_data_RREADY_assign_proc : process(m_axi_sparse_data_RVALID, ap_CS_fsm_state41, ap_CS_fsm_state82)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state82) and (m_axi_sparse_data_RVALID = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state41) and (m_axi_sparse_data_RVALID = ap_const_logic_1)))) then 
            m_axi_sparse_data_RREADY <= ap_const_logic_1;
        else 
            m_axi_sparse_data_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_sparse_data_WDATA <= ap_const_lv256_lc_1;
    m_axi_sparse_data_WID <= ap_const_lv1_0;
    m_axi_sparse_data_WLAST <= ap_const_logic_0;
    m_axi_sparse_data_WSTRB <= ap_const_lv32_0;
    m_axi_sparse_data_WUSER <= ap_const_lv1_0;
    m_axi_sparse_data_WVALID <= ap_const_logic_0;
    p_cast13_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_354_p3),256));
    p_cast15_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_460_p3),256));
        p_cast9_cast_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast9_reg_675),64));

        p_cast_cast_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast_reg_628),64));

    shl_ln1_fu_320_p3 <= (input_data_addr2 & ap_const_lv5_0);
    shl_ln_fu_237_p3 <= (input_data_addr1 & ap_const_lv5_0);

    sparse_data_blk_n_AR_assign_proc : process(m_axi_sparse_data_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state44)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            sparse_data_blk_n_AR <= m_axi_sparse_data_ARREADY;
        else 
            sparse_data_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    sparse_data_blk_n_R_assign_proc : process(m_axi_sparse_data_RVALID, ap_CS_fsm_state41, ap_CS_fsm_state82)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            sparse_data_blk_n_R <= m_axi_sparse_data_RVALID;
        else 
            sparse_data_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    tmp2_cast_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_397_p2),64));
    tmp2_fu_397_p2 <= std_logic_vector(unsigned(zext_ln21_reg_646) + unsigned(loop_index_cast6_fu_378_p1));
    tmp_1_fu_460_p3 <= (empty_50_reg_680 & ap_const_lv3_0);
    tmp_cast_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_291_p2),64));
    tmp_fu_291_p2 <= std_logic_vector(unsigned(zext_ln20_reg_599) + unsigned(loop_index5_cast2_fu_272_p1));
    tmp_s_fu_354_p3 <= (empty_44_reg_662 & ap_const_lv3_0);
    trunc_ln20_fu_255_p1 <= inputs(5 - 1 downto 0);
    zext_ln20_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_237_p3),38));
    zext_ln21_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_320_p3),38));
    zext_ln23_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_fu_90),64));
    zext_ln29_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_count_fu_94),64));
end behav;
