// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sparse_quant_ap_uint_256_ap_int_32_ap_int_8_32u_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_out1_dout,
        data_out1_num_data_valid,
        data_out1_fifo_cap,
        data_out1_empty_n,
        data_out1_read,
        fm_ROWS_dout,
        fm_ROWS_num_data_valid,
        fm_ROWS_fifo_cap,
        fm_ROWS_empty_n,
        fm_ROWS_read,
        fm_COLS_dout,
        fm_COLS_num_data_valid,
        fm_COLS_fifo_cap,
        fm_COLS_empty_n,
        fm_COLS_read,
        quant_out2_din,
        quant_out2_num_data_valid,
        quant_out2_fifo_cap,
        quant_out2_full_n,
        quant_out2_write,
        quant_shift_dout,
        quant_shift_num_data_valid,
        quant_shift_fifo_cap,
        quant_shift_empty_n,
        quant_shift_read,
        quant_mul_dout,
        quant_mul_num_data_valid,
        quant_mul_fifo_cap,
        quant_mul_empty_n,
        quant_mul_read,
        fm_ROWS_c_din,
        fm_ROWS_c_num_data_valid,
        fm_ROWS_c_fifo_cap,
        fm_ROWS_c_full_n,
        fm_ROWS_c_write,
        fm_COLS_c_din,
        fm_COLS_c_num_data_valid,
        fm_COLS_c_fifo_cap,
        fm_COLS_c_full_n,
        fm_COLS_c_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [1023:0] data_out1_dout;
input  [6:0] data_out1_num_data_valid;
input  [6:0] data_out1_fifo_cap;
input   data_out1_empty_n;
output   data_out1_read;
input  [31:0] fm_ROWS_dout;
input  [2:0] fm_ROWS_num_data_valid;
input  [2:0] fm_ROWS_fifo_cap;
input   fm_ROWS_empty_n;
output   fm_ROWS_read;
input  [31:0] fm_COLS_dout;
input  [1:0] fm_COLS_num_data_valid;
input  [1:0] fm_COLS_fifo_cap;
input   fm_COLS_empty_n;
output   fm_COLS_read;
output  [255:0] quant_out2_din;
input  [1:0] quant_out2_num_data_valid;
input  [1:0] quant_out2_fifo_cap;
input   quant_out2_full_n;
output   quant_out2_write;
input  [31:0] quant_shift_dout;
input  [2:0] quant_shift_num_data_valid;
input  [2:0] quant_shift_fifo_cap;
input   quant_shift_empty_n;
output   quant_shift_read;
input  [31:0] quant_mul_dout;
input  [2:0] quant_mul_num_data_valid;
input  [2:0] quant_mul_fifo_cap;
input   quant_mul_empty_n;
output   quant_mul_read;
output  [31:0] fm_ROWS_c_din;
input  [1:0] fm_ROWS_c_num_data_valid;
input  [1:0] fm_ROWS_c_fifo_cap;
input   fm_ROWS_c_full_n;
output   fm_ROWS_c_write;
output  [31:0] fm_COLS_c_din;
input  [1:0] fm_COLS_c_num_data_valid;
input  [1:0] fm_COLS_c_fifo_cap;
input   fm_COLS_c_full_n;
output   fm_COLS_c_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_out1_read;
reg fm_ROWS_read;
reg fm_COLS_read;
reg quant_out2_write;
reg quant_shift_read;
reg quant_mul_read;
reg fm_ROWS_c_write;
reg fm_COLS_c_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    fm_ROWS_blk_n;
reg    fm_COLS_blk_n;
reg    quant_shift_blk_n;
reg    quant_mul_blk_n;
reg    fm_ROWS_c_blk_n;
reg    fm_COLS_c_blk_n;
reg   [31:0] quant_mul_read_reg_184;
reg   [26:0] div_cast_reg_189;
wire   [31:0] left_shift_fu_136_p3;
reg   [31:0] left_shift_reg_194;
wire  signed [31:0] total_right_shift_fu_150_p3;
reg   [31:0] total_right_shift_reg_200;
wire   [63:0] pos_rounding_value_fu_172_p2;
reg   [63:0] pos_rounding_value_reg_205;
wire   [0:0] cmp12_fu_178_p2;
reg   [0:0] cmp12_reg_210;
wire    ap_CS_fsm_state2;
wire    grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1_fu_94_ap_start;
wire    grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1_fu_94_ap_done;
wire    grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1_fu_94_ap_idle;
wire    grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1_fu_94_ap_ready;
wire    grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1_fu_94_data_out1_read;
wire   [255:0] grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1_fu_94_quant_out2_din;
wire    grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1_fu_94_quant_out2_write;
reg    grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1_fu_94_ap_start_reg;
wire    ap_CS_fsm_state3;
reg    ap_block_state1;
wire   [31:0] mul_fu_108_p2;
wire   [0:0] cmp6_fu_124_p2;
wire   [31:0] sub_fu_130_p2;
wire   [31:0] quant_shift_op_fu_144_p2;
wire  signed [32:0] total_right_shift_cast_fu_158_p1;
wire   [32:0] sub15_fu_162_p2;
wire  signed [63:0] sub15_cast_fu_168_p1;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1_fu_94_ap_start_reg = 1'b0;
end

sparse_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1 grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1_fu_94(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1_fu_94_ap_start),
    .ap_done(grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1_fu_94_ap_done),
    .ap_idle(grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1_fu_94_ap_idle),
    .ap_ready(grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1_fu_94_ap_ready),
    .data_out1_dout(data_out1_dout),
    .data_out1_num_data_valid(7'd0),
    .data_out1_fifo_cap(7'd0),
    .data_out1_empty_n(data_out1_empty_n),
    .data_out1_read(grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1_fu_94_data_out1_read),
    .quant_out2_din(grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1_fu_94_quant_out2_din),
    .quant_out2_num_data_valid(2'd0),
    .quant_out2_fifo_cap(2'd0),
    .quant_out2_full_n(quant_out2_full_n),
    .quant_out2_write(grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1_fu_94_quant_out2_write),
    .div_cast(div_cast_reg_189),
    .sh_prom(left_shift_reg_194),
    .cmp12(cmp12_reg_210),
    .conv(quant_mul_read_reg_184),
    .pos_rounding_value(pos_rounding_value_reg_205),
    .sh_prom18(total_right_shift_reg_200)
);

sparse_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U78(
    .din0(fm_COLS_dout),
    .din1(fm_ROWS_dout),
    .dout(mul_fu_108_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1_fu_94_ap_done == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1_fu_94_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1_fu_94_ap_start_reg <= 1'b1;
        end else if ((grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1_fu_94_ap_ready == 1'b1)) begin
            grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1_fu_94_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        cmp12_reg_210 <= cmp12_fu_178_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        div_cast_reg_189 <= {{mul_fu_108_p2[31:5]}};
        left_shift_reg_194 <= left_shift_fu_136_p3;
        pos_rounding_value_reg_205 <= pos_rounding_value_fu_172_p2;
        quant_mul_read_reg_184 <= quant_mul_dout;
        total_right_shift_reg_200 <= total_right_shift_fu_150_p3;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (fm_COLS_c_full_n == 1'b0) | (fm_ROWS_c_full_n == 1'b0) | (quant_mul_empty_n == 1'b0) | (quant_shift_empty_n == 1'b0) | (fm_COLS_empty_n == 1'b0) | (fm_ROWS_empty_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1_fu_94_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1_fu_94_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1_fu_94_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_out1_read = grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1_fu_94_data_out1_read;
    end else begin
        data_out1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        fm_COLS_blk_n = fm_COLS_empty_n;
    end else begin
        fm_COLS_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        fm_COLS_c_blk_n = fm_COLS_c_full_n;
    end else begin
        fm_COLS_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (fm_COLS_c_full_n == 1'b0) | (fm_ROWS_c_full_n == 1'b0) | (quant_mul_empty_n == 1'b0) | (quant_shift_empty_n == 1'b0) | (fm_COLS_empty_n == 1'b0) | (fm_ROWS_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        fm_COLS_c_write = 1'b1;
    end else begin
        fm_COLS_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (fm_COLS_c_full_n == 1'b0) | (fm_ROWS_c_full_n == 1'b0) | (quant_mul_empty_n == 1'b0) | (quant_shift_empty_n == 1'b0) | (fm_COLS_empty_n == 1'b0) | (fm_ROWS_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        fm_COLS_read = 1'b1;
    end else begin
        fm_COLS_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        fm_ROWS_blk_n = fm_ROWS_empty_n;
    end else begin
        fm_ROWS_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        fm_ROWS_c_blk_n = fm_ROWS_c_full_n;
    end else begin
        fm_ROWS_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (fm_COLS_c_full_n == 1'b0) | (fm_ROWS_c_full_n == 1'b0) | (quant_mul_empty_n == 1'b0) | (quant_shift_empty_n == 1'b0) | (fm_COLS_empty_n == 1'b0) | (fm_ROWS_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        fm_ROWS_c_write = 1'b1;
    end else begin
        fm_ROWS_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (fm_COLS_c_full_n == 1'b0) | (fm_ROWS_c_full_n == 1'b0) | (quant_mul_empty_n == 1'b0) | (quant_shift_empty_n == 1'b0) | (fm_COLS_empty_n == 1'b0) | (fm_ROWS_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        fm_ROWS_read = 1'b1;
    end else begin
        fm_ROWS_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        quant_mul_blk_n = quant_mul_empty_n;
    end else begin
        quant_mul_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (fm_COLS_c_full_n == 1'b0) | (fm_ROWS_c_full_n == 1'b0) | (quant_mul_empty_n == 1'b0) | (quant_shift_empty_n == 1'b0) | (fm_COLS_empty_n == 1'b0) | (fm_ROWS_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        quant_mul_read = 1'b1;
    end else begin
        quant_mul_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        quant_out2_write = grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1_fu_94_quant_out2_write;
    end else begin
        quant_out2_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        quant_shift_blk_n = quant_shift_empty_n;
    end else begin
        quant_shift_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (fm_COLS_c_full_n == 1'b0) | (fm_ROWS_c_full_n == 1'b0) | (quant_mul_empty_n == 1'b0) | (quant_shift_empty_n == 1'b0) | (fm_COLS_empty_n == 1'b0) | (fm_ROWS_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        quant_shift_read = 1'b1;
    end else begin
        quant_shift_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (fm_COLS_c_full_n == 1'b0) | (fm_ROWS_c_full_n == 1'b0) | (quant_mul_empty_n == 1'b0) | (quant_shift_empty_n == 1'b0) | (fm_COLS_empty_n == 1'b0) | (fm_ROWS_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1_fu_94_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (fm_COLS_c_full_n == 1'b0) | (fm_ROWS_c_full_n == 1'b0) | (quant_mul_empty_n == 1'b0) | (quant_shift_empty_n == 1'b0) | (fm_COLS_empty_n == 1'b0) | (fm_ROWS_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign cmp12_fu_178_p2 = (($signed(left_shift_reg_194) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign cmp6_fu_124_p2 = (($signed(quant_shift_dout) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign fm_COLS_c_din = fm_COLS_dout;

assign fm_ROWS_c_din = fm_ROWS_dout;

assign grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1_fu_94_ap_start = grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1_fu_94_ap_start_reg;

assign left_shift_fu_136_p3 = ((cmp6_fu_124_p2[0:0] == 1'b1) ? 32'd0 : sub_fu_130_p2);

assign pos_rounding_value_fu_172_p2 = 64'd1 << sub15_cast_fu_168_p1;

assign quant_out2_din = grp_quant_ap_uint_256_ap_int_32_ap_int_8_32u_Pipeline_VITIS_LOOP_100_1_fu_94_quant_out2_din;

assign quant_shift_op_fu_144_p2 = (quant_shift_dout + 32'd31);

assign sub15_cast_fu_168_p1 = $signed(sub15_fu_162_p2);

assign sub15_fu_162_p2 = ($signed(total_right_shift_cast_fu_158_p1) + $signed(33'd8589934591));

assign sub_fu_130_p2 = (32'd0 - quant_shift_dout);

assign total_right_shift_cast_fu_158_p1 = total_right_shift_fu_150_p3;

assign total_right_shift_fu_150_p3 = ((cmp6_fu_124_p2[0:0] == 1'b1) ? quant_shift_op_fu_144_p2 : 32'd31);

endmodule //sparse_quant_ap_uint_256_ap_int_32_ap_int_8_32u_s
