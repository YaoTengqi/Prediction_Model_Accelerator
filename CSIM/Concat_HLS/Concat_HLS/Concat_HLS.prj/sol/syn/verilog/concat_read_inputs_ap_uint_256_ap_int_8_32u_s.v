// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module concat_read_inputs_ap_uint_256_ap_int_8_32u_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_concat_data_AWVALID,
        m_axi_concat_data_AWREADY,
        m_axi_concat_data_AWADDR,
        m_axi_concat_data_AWID,
        m_axi_concat_data_AWLEN,
        m_axi_concat_data_AWSIZE,
        m_axi_concat_data_AWBURST,
        m_axi_concat_data_AWLOCK,
        m_axi_concat_data_AWCACHE,
        m_axi_concat_data_AWPROT,
        m_axi_concat_data_AWQOS,
        m_axi_concat_data_AWREGION,
        m_axi_concat_data_AWUSER,
        m_axi_concat_data_WVALID,
        m_axi_concat_data_WREADY,
        m_axi_concat_data_WDATA,
        m_axi_concat_data_WSTRB,
        m_axi_concat_data_WLAST,
        m_axi_concat_data_WID,
        m_axi_concat_data_WUSER,
        m_axi_concat_data_ARVALID,
        m_axi_concat_data_ARREADY,
        m_axi_concat_data_ARADDR,
        m_axi_concat_data_ARID,
        m_axi_concat_data_ARLEN,
        m_axi_concat_data_ARSIZE,
        m_axi_concat_data_ARBURST,
        m_axi_concat_data_ARLOCK,
        m_axi_concat_data_ARCACHE,
        m_axi_concat_data_ARPROT,
        m_axi_concat_data_ARQOS,
        m_axi_concat_data_ARREGION,
        m_axi_concat_data_ARUSER,
        m_axi_concat_data_RVALID,
        m_axi_concat_data_RREADY,
        m_axi_concat_data_RDATA,
        m_axi_concat_data_RLAST,
        m_axi_concat_data_RID,
        m_axi_concat_data_RFIFONUM,
        m_axi_concat_data_RUSER,
        m_axi_concat_data_RRESP,
        m_axi_concat_data_BVALID,
        m_axi_concat_data_BREADY,
        m_axi_concat_data_BRESP,
        m_axi_concat_data_BID,
        m_axi_concat_data_BUSER,
        inputs,
        data_out1_din,
        data_out1_num_data_valid,
        data_out1_fifo_cap,
        data_out1_full_n,
        data_out1_write,
        input_data_addr1,
        input_data_addr2,
        ROWS,
        COLS,
        ROWS_c_din,
        ROWS_c_num_data_valid,
        ROWS_c_fifo_cap,
        ROWS_c_full_n,
        ROWS_c_write,
        COLS_c_din,
        COLS_c_num_data_valid,
        COLS_c_fifo_cap,
        COLS_c_full_n,
        COLS_c_write
);

parameter    ap_ST_fsm_state1 = 168'd1;
parameter    ap_ST_fsm_state2 = 168'd2;
parameter    ap_ST_fsm_state3 = 168'd4;
parameter    ap_ST_fsm_state4 = 168'd8;
parameter    ap_ST_fsm_state5 = 168'd16;
parameter    ap_ST_fsm_state6 = 168'd32;
parameter    ap_ST_fsm_state7 = 168'd64;
parameter    ap_ST_fsm_state8 = 168'd128;
parameter    ap_ST_fsm_state9 = 168'd256;
parameter    ap_ST_fsm_state10 = 168'd512;
parameter    ap_ST_fsm_state11 = 168'd1024;
parameter    ap_ST_fsm_state12 = 168'd2048;
parameter    ap_ST_fsm_state13 = 168'd4096;
parameter    ap_ST_fsm_state14 = 168'd8192;
parameter    ap_ST_fsm_state15 = 168'd16384;
parameter    ap_ST_fsm_state16 = 168'd32768;
parameter    ap_ST_fsm_state17 = 168'd65536;
parameter    ap_ST_fsm_state18 = 168'd131072;
parameter    ap_ST_fsm_state19 = 168'd262144;
parameter    ap_ST_fsm_state20 = 168'd524288;
parameter    ap_ST_fsm_state21 = 168'd1048576;
parameter    ap_ST_fsm_state22 = 168'd2097152;
parameter    ap_ST_fsm_state23 = 168'd4194304;
parameter    ap_ST_fsm_state24 = 168'd8388608;
parameter    ap_ST_fsm_state25 = 168'd16777216;
parameter    ap_ST_fsm_state26 = 168'd33554432;
parameter    ap_ST_fsm_state27 = 168'd67108864;
parameter    ap_ST_fsm_state28 = 168'd134217728;
parameter    ap_ST_fsm_state29 = 168'd268435456;
parameter    ap_ST_fsm_state30 = 168'd536870912;
parameter    ap_ST_fsm_state31 = 168'd1073741824;
parameter    ap_ST_fsm_state32 = 168'd2147483648;
parameter    ap_ST_fsm_state33 = 168'd4294967296;
parameter    ap_ST_fsm_state34 = 168'd8589934592;
parameter    ap_ST_fsm_state35 = 168'd17179869184;
parameter    ap_ST_fsm_state36 = 168'd34359738368;
parameter    ap_ST_fsm_state37 = 168'd68719476736;
parameter    ap_ST_fsm_state38 = 168'd137438953472;
parameter    ap_ST_fsm_state39 = 168'd274877906944;
parameter    ap_ST_fsm_state40 = 168'd549755813888;
parameter    ap_ST_fsm_state41 = 168'd1099511627776;
parameter    ap_ST_fsm_state42 = 168'd2199023255552;
parameter    ap_ST_fsm_state43 = 168'd4398046511104;
parameter    ap_ST_fsm_state44 = 168'd8796093022208;
parameter    ap_ST_fsm_state45 = 168'd17592186044416;
parameter    ap_ST_fsm_state46 = 168'd35184372088832;
parameter    ap_ST_fsm_state47 = 168'd70368744177664;
parameter    ap_ST_fsm_state48 = 168'd140737488355328;
parameter    ap_ST_fsm_state49 = 168'd281474976710656;
parameter    ap_ST_fsm_state50 = 168'd562949953421312;
parameter    ap_ST_fsm_state51 = 168'd1125899906842624;
parameter    ap_ST_fsm_state52 = 168'd2251799813685248;
parameter    ap_ST_fsm_state53 = 168'd4503599627370496;
parameter    ap_ST_fsm_state54 = 168'd9007199254740992;
parameter    ap_ST_fsm_state55 = 168'd18014398509481984;
parameter    ap_ST_fsm_state56 = 168'd36028797018963968;
parameter    ap_ST_fsm_state57 = 168'd72057594037927936;
parameter    ap_ST_fsm_state58 = 168'd144115188075855872;
parameter    ap_ST_fsm_state59 = 168'd288230376151711744;
parameter    ap_ST_fsm_state60 = 168'd576460752303423488;
parameter    ap_ST_fsm_state61 = 168'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 168'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 168'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 168'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 168'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 168'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 168'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 168'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 168'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 168'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 168'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 168'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 168'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 168'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 168'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 168'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 168'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 168'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 168'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 168'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 168'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 168'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 168'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 168'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 168'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 168'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 168'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 168'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 168'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 168'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 168'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 168'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 168'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 168'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 168'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 168'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 168'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 168'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 168'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 168'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 168'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 168'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 168'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 168'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 168'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 168'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 168'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 168'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 168'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 168'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 168'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 168'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 168'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 168'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 168'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 168'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 168'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 168'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 168'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 168'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 168'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 168'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 168'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 168'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 168'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 168'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 168'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 168'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 168'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 168'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 168'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 168'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 168'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 168'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 168'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 168'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 168'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 168'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 168'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 168'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 168'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 168'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state143 = 168'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state144 = 168'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state145 = 168'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state146 = 168'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state147 = 168'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state148 = 168'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state149 = 168'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state150 = 168'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state151 = 168'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state152 = 168'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state153 = 168'd5708990770823839524233143877797980545530986496;
parameter    ap_ST_fsm_state154 = 168'd11417981541647679048466287755595961091061972992;
parameter    ap_ST_fsm_state155 = 168'd22835963083295358096932575511191922182123945984;
parameter    ap_ST_fsm_state156 = 168'd45671926166590716193865151022383844364247891968;
parameter    ap_ST_fsm_state157 = 168'd91343852333181432387730302044767688728495783936;
parameter    ap_ST_fsm_state158 = 168'd182687704666362864775460604089535377456991567872;
parameter    ap_ST_fsm_state159 = 168'd365375409332725729550921208179070754913983135744;
parameter    ap_ST_fsm_state160 = 168'd730750818665451459101842416358141509827966271488;
parameter    ap_ST_fsm_state161 = 168'd1461501637330902918203684832716283019655932542976;
parameter    ap_ST_fsm_state162 = 168'd2923003274661805836407369665432566039311865085952;
parameter    ap_ST_fsm_state163 = 168'd5846006549323611672814739330865132078623730171904;
parameter    ap_ST_fsm_state164 = 168'd11692013098647223345629478661730264157247460343808;
parameter    ap_ST_fsm_state165 = 168'd23384026197294446691258957323460528314494920687616;
parameter    ap_ST_fsm_state166 = 168'd46768052394588893382517914646921056628989841375232;
parameter    ap_ST_fsm_state167 = 168'd93536104789177786765035829293842113257979682750464;
parameter    ap_ST_fsm_state168 = 168'd187072209578355573530071658587684226515959365500928;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_concat_data_AWVALID;
input   m_axi_concat_data_AWREADY;
output  [63:0] m_axi_concat_data_AWADDR;
output  [0:0] m_axi_concat_data_AWID;
output  [31:0] m_axi_concat_data_AWLEN;
output  [2:0] m_axi_concat_data_AWSIZE;
output  [1:0] m_axi_concat_data_AWBURST;
output  [1:0] m_axi_concat_data_AWLOCK;
output  [3:0] m_axi_concat_data_AWCACHE;
output  [2:0] m_axi_concat_data_AWPROT;
output  [3:0] m_axi_concat_data_AWQOS;
output  [3:0] m_axi_concat_data_AWREGION;
output  [0:0] m_axi_concat_data_AWUSER;
output   m_axi_concat_data_WVALID;
input   m_axi_concat_data_WREADY;
output  [255:0] m_axi_concat_data_WDATA;
output  [31:0] m_axi_concat_data_WSTRB;
output   m_axi_concat_data_WLAST;
output  [0:0] m_axi_concat_data_WID;
output  [0:0] m_axi_concat_data_WUSER;
output   m_axi_concat_data_ARVALID;
input   m_axi_concat_data_ARREADY;
output  [63:0] m_axi_concat_data_ARADDR;
output  [0:0] m_axi_concat_data_ARID;
output  [31:0] m_axi_concat_data_ARLEN;
output  [2:0] m_axi_concat_data_ARSIZE;
output  [1:0] m_axi_concat_data_ARBURST;
output  [1:0] m_axi_concat_data_ARLOCK;
output  [3:0] m_axi_concat_data_ARCACHE;
output  [2:0] m_axi_concat_data_ARPROT;
output  [3:0] m_axi_concat_data_ARQOS;
output  [3:0] m_axi_concat_data_ARREGION;
output  [0:0] m_axi_concat_data_ARUSER;
input   m_axi_concat_data_RVALID;
output   m_axi_concat_data_RREADY;
input  [255:0] m_axi_concat_data_RDATA;
input   m_axi_concat_data_RLAST;
input  [0:0] m_axi_concat_data_RID;
input  [8:0] m_axi_concat_data_RFIFONUM;
input  [0:0] m_axi_concat_data_RUSER;
input  [1:0] m_axi_concat_data_RRESP;
input   m_axi_concat_data_BVALID;
output   m_axi_concat_data_BREADY;
input  [1:0] m_axi_concat_data_BRESP;
input  [0:0] m_axi_concat_data_BID;
input  [0:0] m_axi_concat_data_BUSER;
input  [63:0] inputs;
output  [255:0] data_out1_din;
input  [7:0] data_out1_num_data_valid;
input  [7:0] data_out1_fifo_cap;
input   data_out1_full_n;
output   data_out1_write;
input  [31:0] input_data_addr1;
input  [31:0] input_data_addr2;
input  [31:0] ROWS;
input  [31:0] COLS;
output  [31:0] ROWS_c_din;
input  [1:0] ROWS_c_num_data_valid;
input  [1:0] ROWS_c_fifo_cap;
input   ROWS_c_full_n;
output   ROWS_c_write;
output  [31:0] COLS_c_din;
input  [1:0] COLS_c_num_data_valid;
input  [1:0] COLS_c_fifo_cap;
input   COLS_c_full_n;
output   COLS_c_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_concat_data_ARVALID;
reg[63:0] m_axi_concat_data_ARADDR;
reg[31:0] m_axi_concat_data_ARLEN;
reg m_axi_concat_data_RREADY;
reg[255:0] data_out1_din;
reg data_out1_write;
reg ROWS_c_write;
reg COLS_c_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [167:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    concat_data_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    concat_data_blk_n_R;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state123;
wire    ap_CS_fsm_state126;
wire    ap_CS_fsm_state164;
reg    data_out1_blk_n;
wire    ap_CS_fsm_state167;
wire    ap_CS_fsm_state168;
reg    ROWS_c_blk_n;
reg    COLS_c_blk_n;
wire   [31:0] mul_ln13_fu_289_p2;
reg   [31:0] mul_ln13_reg_811;
reg   [26:0] ram_depth_reg_816;
wire   [4:0] trunc_ln16_fu_317_p1;
reg   [4:0] trunc_ln16_reg_824;
wire   [63:0] add_ln16_fu_321_p2;
reg   [63:0] add_ln16_reg_829;
wire   [4:0] trunc_ln16_1_fu_327_p1;
reg   [4:0] trunc_ln16_1_reg_834;
reg   [58:0] p_cast_reg_841;
wire   [31:0] zext_ln13_fu_346_p1;
reg   [31:0] zext_ln13_reg_846;
wire    ap_CS_fsm_state39;
wire  signed [32:0] sub_ln16_fu_366_p2;
reg  signed [32:0] sub_ln16_reg_863;
wire  signed [33:0] sub_ln16_cast10_fu_372_p1;
reg  signed [33:0] sub_ln16_cast10_reg_868;
wire   [9:0] empty_fu_376_p1;
reg   [9:0] empty_reg_874;
wire   [63:0] loop_index4_cast_fu_383_p1;
reg   [63:0] loop_index4_cast_reg_880;
wire    ap_CS_fsm_state40;
wire   [4:0] empty_40_fu_403_p1;
reg   [4:0] empty_40_reg_895;
wire   [0:0] exitcond12_fu_387_p2;
wire   [4:0] empty_41_fu_406_p2;
reg   [4:0] empty_41_reg_901;
reg   [255:0] concat_data_addr_read_reg_907;
reg   [4:0] residual_loop_index7_load_reg_912;
wire    ap_CS_fsm_state43;
reg   [58:0] p_cast5_reg_921;
wire   [0:0] exitcond11_fu_427_p2;
reg   [4:0] tmp_3_reg_926;
wire   [63:0] add_ln17_fu_493_p2;
reg   [63:0] add_ln17_reg_938;
reg   [58:0] p_cast3_reg_943;
reg   [255:0] concat_data_addr_2_read_reg_954;
wire   [63:0] loop_index_cast_fu_603_p1;
reg   [63:0] loop_index_cast_reg_965;
wire    ap_CS_fsm_state122;
reg   [255:0] concat_data_addr_1_read_reg_980;
reg   [58:0] p_cast1_reg_988;
wire    ap_CS_fsm_state125;
wire   [0:0] exitcond9_fu_639_p2;
wire   [4:0] empty_58_fu_679_p2;
reg   [4:0] empty_58_reg_993;
wire   [4:0] empty_61_fu_684_p2;
reg   [4:0] empty_61_reg_998;
reg   [4:0] tmp_6_reg_1004;
reg   [255:0] concat_data_addr_3_read_reg_1022;
wire   [63:0] zext_ln19_fu_778_p1;
reg   [63:0] zext_ln19_reg_1027;
wire    ap_CS_fsm_state166;
wire   [0:0] icmp_ln19_fu_783_p2;
reg   [4:0] ram1_address0;
reg    ram1_ce0;
reg   [31:0] ram1_we0;
reg   [255:0] ram1_d0;
wire   [255:0] ram1_q0;
reg   [4:0] ram2_address0;
reg    ram2_ce0;
reg   [31:0] ram2_we0;
reg   [255:0] ram2_d0;
wire   [255:0] ram2_q0;
wire    ap_CS_fsm_state42;
wire   [63:0] p_cast9_cast_fu_586_p1;
wire    ap_CS_fsm_state83;
wire    ap_CS_fsm_state124;
wire   [63:0] p_cast15_cast_fu_771_p1;
wire    ap_CS_fsm_state165;
wire  signed [63:0] p_cast_cast_fu_350_p1;
wire  signed [63:0] p_cast5_cast_fu_513_p1;
wire  signed [63:0] p_cast3_cast_fu_590_p1;
wire  signed [63:0] p_cast11_cast_fu_709_p1;
reg   [26:0] loop_index4_fu_112;
wire   [26:0] empty_39_fu_392_p2;
reg    ap_block_state1;
reg   [4:0] residual_loop_index7_fu_124;
wire   [4:0] empty_43_fu_432_p2;
reg   [26:0] loop_index_fu_128;
wire   [26:0] empty_53_fu_612_p2;
wire   [0:0] exitcond10_fu_607_p2;
reg   [4:0] residual_loop_index_fu_132;
wire   [4:0] empty_55_fu_644_p2;
reg   [26:0] i_fu_136;
wire   [26:0] add_ln19_fu_788_p2;
wire   [255:0] empty_51_fu_579_p2;
wire   [31:0] empty_50_fu_560_p2;
wire   [255:0] empty_63_fu_764_p2;
wire   [31:0] empty_62_fu_746_p2;
wire   [36:0] shl_ln_fu_305_p3;
wire   [63:0] zext_ln16_fu_313_p1;
wire   [32:0] zext_ln16_1_fu_360_p1;
wire   [32:0] zext_ln16_2_fu_363_p1;
wire   [9:0] residual_loop_index7_cast_fu_423_p1;
wire   [33:0] residual_loop_index7_cast11_fu_419_p1;
wire   [33:0] tmp_fu_443_p2;
wire  signed [63:0] tmp_cast_fu_448_p1;
wire   [63:0] empty_45_fu_452_p2;
wire   [9:0] empty_44_fu_438_p2;
wire   [36:0] shl_ln1_fu_482_p3;
wire   [63:0] zext_ln17_fu_489_p1;
wire   [4:0] empty_46_fu_523_p2;
wire   [7:0] tmp_1_fu_527_p3;
wire   [255:0] p_cast18_fu_535_p1;
wire   [255:0] empty_47_fu_539_p2;
wire   [7:0] empty_48_fu_544_p1;
wire   [4:0] empty_49_fu_552_p2;
wire   [31:0] p_cast19_fu_556_p1;
wire   [7:0] tmp_2_fu_567_p3;
wire   [255:0] p_cast7_cast_fu_548_p1;
wire   [255:0] p_cast20_fu_575_p1;
wire   [9:0] residual_loop_index_cast_fu_635_p1;
wire   [33:0] residual_loop_index_cast17_fu_631_p1;
wire   [33:0] tmp1_fu_655_p2;
wire  signed [63:0] tmp1_cast_fu_660_p1;
wire   [63:0] empty_57_fu_664_p2;
wire   [9:0] empty_56_fu_650_p2;
wire   [7:0] tmp_4_fu_719_p3;
wire   [255:0] p_cast22_fu_726_p1;
wire   [255:0] empty_59_fu_730_p2;
wire   [7:0] empty_60_fu_735_p1;
wire   [31:0] p_cast23_fu_743_p1;
wire   [7:0] tmp_5_fu_753_p3;
wire   [255:0] p_cast13_cast_fu_739_p1;
wire   [255:0] p_cast24_fu_760_p1;
reg   [167:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
reg    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
reg    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
wire    ap_ST_fsm_state74_blk;
wire    ap_ST_fsm_state75_blk;
wire    ap_ST_fsm_state76_blk;
wire    ap_ST_fsm_state77_blk;
wire    ap_ST_fsm_state78_blk;
wire    ap_ST_fsm_state79_blk;
wire    ap_ST_fsm_state80_blk;
wire    ap_ST_fsm_state81_blk;
reg    ap_ST_fsm_state82_blk;
wire    ap_ST_fsm_state83_blk;
reg    ap_ST_fsm_state84_blk;
wire    ap_ST_fsm_state85_blk;
wire    ap_ST_fsm_state86_blk;
wire    ap_ST_fsm_state87_blk;
wire    ap_ST_fsm_state88_blk;
wire    ap_ST_fsm_state89_blk;
wire    ap_ST_fsm_state90_blk;
wire    ap_ST_fsm_state91_blk;
wire    ap_ST_fsm_state92_blk;
wire    ap_ST_fsm_state93_blk;
wire    ap_ST_fsm_state94_blk;
wire    ap_ST_fsm_state95_blk;
wire    ap_ST_fsm_state96_blk;
wire    ap_ST_fsm_state97_blk;
wire    ap_ST_fsm_state98_blk;
wire    ap_ST_fsm_state99_blk;
wire    ap_ST_fsm_state100_blk;
wire    ap_ST_fsm_state101_blk;
wire    ap_ST_fsm_state102_blk;
wire    ap_ST_fsm_state103_blk;
wire    ap_ST_fsm_state104_blk;
wire    ap_ST_fsm_state105_blk;
wire    ap_ST_fsm_state106_blk;
wire    ap_ST_fsm_state107_blk;
wire    ap_ST_fsm_state108_blk;
wire    ap_ST_fsm_state109_blk;
wire    ap_ST_fsm_state110_blk;
wire    ap_ST_fsm_state111_blk;
wire    ap_ST_fsm_state112_blk;
wire    ap_ST_fsm_state113_blk;
wire    ap_ST_fsm_state114_blk;
wire    ap_ST_fsm_state115_blk;
wire    ap_ST_fsm_state116_blk;
wire    ap_ST_fsm_state117_blk;
wire    ap_ST_fsm_state118_blk;
wire    ap_ST_fsm_state119_blk;
wire    ap_ST_fsm_state120_blk;
wire    ap_ST_fsm_state121_blk;
wire    ap_ST_fsm_state122_blk;
reg    ap_ST_fsm_state123_blk;
wire    ap_ST_fsm_state124_blk;
wire    ap_ST_fsm_state125_blk;
reg    ap_ST_fsm_state126_blk;
wire    ap_ST_fsm_state127_blk;
wire    ap_ST_fsm_state128_blk;
wire    ap_ST_fsm_state129_blk;
wire    ap_ST_fsm_state130_blk;
wire    ap_ST_fsm_state131_blk;
wire    ap_ST_fsm_state132_blk;
wire    ap_ST_fsm_state133_blk;
wire    ap_ST_fsm_state134_blk;
wire    ap_ST_fsm_state135_blk;
wire    ap_ST_fsm_state136_blk;
wire    ap_ST_fsm_state137_blk;
wire    ap_ST_fsm_state138_blk;
wire    ap_ST_fsm_state139_blk;
wire    ap_ST_fsm_state140_blk;
wire    ap_ST_fsm_state141_blk;
wire    ap_ST_fsm_state142_blk;
wire    ap_ST_fsm_state143_blk;
wire    ap_ST_fsm_state144_blk;
wire    ap_ST_fsm_state145_blk;
wire    ap_ST_fsm_state146_blk;
wire    ap_ST_fsm_state147_blk;
wire    ap_ST_fsm_state148_blk;
wire    ap_ST_fsm_state149_blk;
wire    ap_ST_fsm_state150_blk;
wire    ap_ST_fsm_state151_blk;
wire    ap_ST_fsm_state152_blk;
wire    ap_ST_fsm_state153_blk;
wire    ap_ST_fsm_state154_blk;
wire    ap_ST_fsm_state155_blk;
wire    ap_ST_fsm_state156_blk;
wire    ap_ST_fsm_state157_blk;
wire    ap_ST_fsm_state158_blk;
wire    ap_ST_fsm_state159_blk;
wire    ap_ST_fsm_state160_blk;
wire    ap_ST_fsm_state161_blk;
wire    ap_ST_fsm_state162_blk;
wire    ap_ST_fsm_state163_blk;
reg    ap_ST_fsm_state164_blk;
wire    ap_ST_fsm_state165_blk;
wire    ap_ST_fsm_state166_blk;
reg    ap_ST_fsm_state167_blk;
reg    ap_ST_fsm_state168_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 168'd1;
end

concat_read_inputs_ap_uint_256_ap_int_8_32u_s_ram1_RAM_AUTO_1R1W #(
    .DataWidth( 256 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
ram1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(ram1_address0),
    .ce0(ram1_ce0),
    .we0(ram1_we0),
    .d0(ram1_d0),
    .q0(ram1_q0)
);

concat_read_inputs_ap_uint_256_ap_int_8_32u_s_ram1_RAM_AUTO_1R1W #(
    .DataWidth( 256 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
ram2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(ram2_address0),
    .ce0(ram2_ce0),
    .we0(ram2_we0),
    .d0(ram2_d0),
    .q0(ram2_q0)
);

concat_mul_32s_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_1_1_U5(
    .din0(COLS),
    .din1(ROWS),
    .dout(mul_ln13_fu_289_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln19_fu_783_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state166))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond9_fu_639_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state125))) begin
        i_fu_136 <= 27'd0;
    end else if (((icmp_ln19_fu_783_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state166))) begin
        i_fu_136 <= add_ln19_fu_788_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == COLS_c_full_n) | (1'b0 == ROWS_c_full_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        loop_index4_fu_112 <= 27'd0;
    end else if (((exitcond12_fu_387_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state40))) begin
        loop_index4_fu_112 <= empty_39_fu_392_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond11_fu_427_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
        loop_index_fu_128 <= 27'd0;
    end else if (((exitcond10_fu_607_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state122))) begin
        loop_index_fu_128 <= empty_53_fu_612_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond12_fu_387_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40))) begin
        residual_loop_index7_fu_124 <= 5'd0;
    end else if (((exitcond11_fu_427_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state43))) begin
        residual_loop_index7_fu_124 <= empty_43_fu_432_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond10_fu_607_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state122))) begin
        residual_loop_index_fu_132 <= 5'd0;
    end else if (((exitcond9_fu_639_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state125))) begin
        residual_loop_index_fu_132 <= empty_55_fu_644_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        add_ln16_reg_829 <= add_ln16_fu_321_p2;
        mul_ln13_reg_811 <= mul_ln13_fu_289_p2;
        p_cast_reg_841 <= {{add_ln16_fu_321_p2[63:5]}};
        ram_depth_reg_816 <= {{mul_ln13_fu_289_p2[31:5]}};
        trunc_ln16_1_reg_834 <= trunc_ln16_1_fu_327_p1;
        trunc_ln16_reg_824 <= trunc_ln16_fu_317_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond11_fu_427_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
        add_ln17_reg_938 <= add_ln17_fu_493_p2;
        p_cast3_reg_943 <= {{add_ln17_fu_493_p2[63:5]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state123)) begin
        concat_data_addr_1_read_reg_980 <= m_axi_concat_data_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        concat_data_addr_2_read_reg_954 <= m_axi_concat_data_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state164)) begin
        concat_data_addr_3_read_reg_1022 <= m_axi_concat_data_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        concat_data_addr_read_reg_907 <= m_axi_concat_data_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond12_fu_387_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40))) begin
        empty_40_reg_895 <= empty_40_fu_403_p1;
        empty_41_reg_901 <= empty_41_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond9_fu_639_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state125))) begin
        empty_58_reg_993 <= empty_58_fu_679_p2;
        empty_61_reg_998 <= empty_61_fu_684_p2;
        p_cast1_reg_988 <= {{empty_57_fu_664_p2[63:5]}};
        tmp_6_reg_1004 <= {{empty_56_fu_650_p2[9:5]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        empty_reg_874 <= empty_fu_376_p1;
        sub_ln16_cast10_reg_868 <= sub_ln16_cast10_fu_372_p1;
        sub_ln16_reg_863 <= sub_ln16_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        loop_index4_cast_reg_880[26 : 0] <= loop_index4_cast_fu_383_p1[26 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state122)) begin
        loop_index_cast_reg_965[26 : 0] <= loop_index_cast_fu_603_p1[26 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond11_fu_427_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state43))) begin
        p_cast5_reg_921 <= {{empty_45_fu_452_p2[63:5]}};
        tmp_3_reg_926 <= {{empty_44_fu_438_p2[9:5]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        residual_loop_index7_load_reg_912 <= residual_loop_index7_fu_124;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        zext_ln13_reg_846[26 : 0] <= zext_ln13_fu_346_p1[26 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state166)) begin
        zext_ln19_reg_1027[26 : 0] <= zext_ln19_fu_778_p1[26 : 0];
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        COLS_c_blk_n = COLS_c_full_n;
    end else begin
        COLS_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == COLS_c_full_n) | (1'b0 == ROWS_c_full_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        COLS_c_write = 1'b1;
    end else begin
        COLS_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ROWS_c_blk_n = ROWS_c_full_n;
    end else begin
        ROWS_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == COLS_c_full_n) | (1'b0 == ROWS_c_full_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ROWS_c_write = 1'b1;
    end else begin
        ROWS_c_write = 1'b0;
    end
end

assign ap_ST_fsm_state100_blk = 1'b0;

assign ap_ST_fsm_state101_blk = 1'b0;

assign ap_ST_fsm_state102_blk = 1'b0;

assign ap_ST_fsm_state103_blk = 1'b0;

assign ap_ST_fsm_state104_blk = 1'b0;

assign ap_ST_fsm_state105_blk = 1'b0;

assign ap_ST_fsm_state106_blk = 1'b0;

assign ap_ST_fsm_state107_blk = 1'b0;

assign ap_ST_fsm_state108_blk = 1'b0;

assign ap_ST_fsm_state109_blk = 1'b0;

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state110_blk = 1'b0;

assign ap_ST_fsm_state111_blk = 1'b0;

assign ap_ST_fsm_state112_blk = 1'b0;

assign ap_ST_fsm_state113_blk = 1'b0;

assign ap_ST_fsm_state114_blk = 1'b0;

assign ap_ST_fsm_state115_blk = 1'b0;

assign ap_ST_fsm_state116_blk = 1'b0;

assign ap_ST_fsm_state117_blk = 1'b0;

assign ap_ST_fsm_state118_blk = 1'b0;

assign ap_ST_fsm_state119_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state120_blk = 1'b0;

assign ap_ST_fsm_state121_blk = 1'b0;

assign ap_ST_fsm_state122_blk = 1'b0;

always @ (*) begin
    if ((m_axi_concat_data_RVALID == 1'b0)) begin
        ap_ST_fsm_state123_blk = 1'b1;
    end else begin
        ap_ST_fsm_state123_blk = 1'b0;
    end
end

assign ap_ST_fsm_state124_blk = 1'b0;

assign ap_ST_fsm_state125_blk = 1'b0;

always @ (*) begin
    if ((m_axi_concat_data_ARREADY == 1'b0)) begin
        ap_ST_fsm_state126_blk = 1'b1;
    end else begin
        ap_ST_fsm_state126_blk = 1'b0;
    end
end

assign ap_ST_fsm_state127_blk = 1'b0;

assign ap_ST_fsm_state128_blk = 1'b0;

assign ap_ST_fsm_state129_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state130_blk = 1'b0;

assign ap_ST_fsm_state131_blk = 1'b0;

assign ap_ST_fsm_state132_blk = 1'b0;

assign ap_ST_fsm_state133_blk = 1'b0;

assign ap_ST_fsm_state134_blk = 1'b0;

assign ap_ST_fsm_state135_blk = 1'b0;

assign ap_ST_fsm_state136_blk = 1'b0;

assign ap_ST_fsm_state137_blk = 1'b0;

assign ap_ST_fsm_state138_blk = 1'b0;

assign ap_ST_fsm_state139_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state140_blk = 1'b0;

assign ap_ST_fsm_state141_blk = 1'b0;

assign ap_ST_fsm_state142_blk = 1'b0;

assign ap_ST_fsm_state143_blk = 1'b0;

assign ap_ST_fsm_state144_blk = 1'b0;

assign ap_ST_fsm_state145_blk = 1'b0;

assign ap_ST_fsm_state146_blk = 1'b0;

assign ap_ST_fsm_state147_blk = 1'b0;

assign ap_ST_fsm_state148_blk = 1'b0;

assign ap_ST_fsm_state149_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state150_blk = 1'b0;

assign ap_ST_fsm_state151_blk = 1'b0;

assign ap_ST_fsm_state152_blk = 1'b0;

assign ap_ST_fsm_state153_blk = 1'b0;

assign ap_ST_fsm_state154_blk = 1'b0;

assign ap_ST_fsm_state155_blk = 1'b0;

assign ap_ST_fsm_state156_blk = 1'b0;

assign ap_ST_fsm_state157_blk = 1'b0;

assign ap_ST_fsm_state158_blk = 1'b0;

assign ap_ST_fsm_state159_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state160_blk = 1'b0;

assign ap_ST_fsm_state161_blk = 1'b0;

assign ap_ST_fsm_state162_blk = 1'b0;

assign ap_ST_fsm_state163_blk = 1'b0;

always @ (*) begin
    if ((m_axi_concat_data_RVALID == 1'b0)) begin
        ap_ST_fsm_state164_blk = 1'b1;
    end else begin
        ap_ST_fsm_state164_blk = 1'b0;
    end
end

assign ap_ST_fsm_state165_blk = 1'b0;

assign ap_ST_fsm_state166_blk = 1'b0;

always @ (*) begin
    if ((data_out1_full_n == 1'b0)) begin
        ap_ST_fsm_state167_blk = 1'b1;
    end else begin
        ap_ST_fsm_state167_blk = 1'b0;
    end
end

always @ (*) begin
    if ((data_out1_full_n == 1'b0)) begin
        ap_ST_fsm_state168_blk = 1'b1;
    end else begin
        ap_ST_fsm_state168_blk = 1'b0;
    end
end

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if (((1'b0 == COLS_c_full_n) | (1'b0 == ROWS_c_full_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

always @ (*) begin
    if ((m_axi_concat_data_ARREADY == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

always @ (*) begin
    if ((m_axi_concat_data_RVALID == 1'b0)) begin
        ap_ST_fsm_state41_blk = 1'b1;
    end else begin
        ap_ST_fsm_state41_blk = 1'b0;
    end
end

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

always @ (*) begin
    if ((m_axi_concat_data_ARREADY == 1'b0)) begin
        ap_ST_fsm_state44_blk = 1'b1;
    end else begin
        ap_ST_fsm_state44_blk = 1'b0;
    end
end

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

assign ap_ST_fsm_state72_blk = 1'b0;

assign ap_ST_fsm_state73_blk = 1'b0;

assign ap_ST_fsm_state74_blk = 1'b0;

assign ap_ST_fsm_state75_blk = 1'b0;

assign ap_ST_fsm_state76_blk = 1'b0;

assign ap_ST_fsm_state77_blk = 1'b0;

assign ap_ST_fsm_state78_blk = 1'b0;

assign ap_ST_fsm_state79_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state80_blk = 1'b0;

assign ap_ST_fsm_state81_blk = 1'b0;

always @ (*) begin
    if ((m_axi_concat_data_RVALID == 1'b0)) begin
        ap_ST_fsm_state82_blk = 1'b1;
    end else begin
        ap_ST_fsm_state82_blk = 1'b0;
    end
end

assign ap_ST_fsm_state83_blk = 1'b0;

always @ (*) begin
    if ((m_axi_concat_data_ARREADY == 1'b0)) begin
        ap_ST_fsm_state84_blk = 1'b1;
    end else begin
        ap_ST_fsm_state84_blk = 1'b0;
    end
end

assign ap_ST_fsm_state85_blk = 1'b0;

assign ap_ST_fsm_state86_blk = 1'b0;

assign ap_ST_fsm_state87_blk = 1'b0;

assign ap_ST_fsm_state88_blk = 1'b0;

assign ap_ST_fsm_state89_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state90_blk = 1'b0;

assign ap_ST_fsm_state91_blk = 1'b0;

assign ap_ST_fsm_state92_blk = 1'b0;

assign ap_ST_fsm_state93_blk = 1'b0;

assign ap_ST_fsm_state94_blk = 1'b0;

assign ap_ST_fsm_state95_blk = 1'b0;

assign ap_ST_fsm_state96_blk = 1'b0;

assign ap_ST_fsm_state97_blk = 1'b0;

assign ap_ST_fsm_state98_blk = 1'b0;

assign ap_ST_fsm_state99_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln19_fu_783_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state166))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_783_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state166))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state2))) begin
        concat_data_blk_n_AR = m_axi_concat_data_ARREADY;
    end else begin
        concat_data_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state164) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state41))) begin
        concat_data_blk_n_R = m_axi_concat_data_RVALID;
    end else begin
        concat_data_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state168) | (1'b1 == ap_CS_fsm_state167))) begin
        data_out1_blk_n = data_out1_full_n;
    end else begin
        data_out1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((data_out1_full_n == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state168)) begin
            data_out1_din = ram2_q0;
        end else if ((1'b1 == ap_CS_fsm_state167)) begin
            data_out1_din = ram1_q0;
        end else begin
            data_out1_din = 'bx;
        end
    end else begin
        data_out1_din = 'bx;
    end
end

always @ (*) begin
    if ((((data_out1_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state168)) | ((data_out1_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state167)))) begin
        data_out1_write = 1'b1;
    end else begin
        data_out1_write = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_concat_data_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state126)) begin
            m_axi_concat_data_ARADDR = p_cast11_cast_fu_709_p1;
        end else if ((1'b1 == ap_CS_fsm_state84)) begin
            m_axi_concat_data_ARADDR = p_cast3_cast_fu_590_p1;
        end else if ((1'b1 == ap_CS_fsm_state44)) begin
            m_axi_concat_data_ARADDR = p_cast5_cast_fu_513_p1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            m_axi_concat_data_ARADDR = p_cast_cast_fu_350_p1;
        end else begin
            m_axi_concat_data_ARADDR = 'bx;
        end
    end else begin
        m_axi_concat_data_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((m_axi_concat_data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state84))) begin
        m_axi_concat_data_ARLEN = zext_ln13_reg_846;
    end else if ((((m_axi_concat_data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state126)) | ((m_axi_concat_data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44)))) begin
        m_axi_concat_data_ARLEN = 32'd1;
    end else if (((m_axi_concat_data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_concat_data_ARLEN = zext_ln13_fu_346_p1;
    end else begin
        m_axi_concat_data_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((m_axi_concat_data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state126)) | ((m_axi_concat_data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state84)) | ((m_axi_concat_data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44)) | ((m_axi_concat_data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        m_axi_concat_data_ARVALID = 1'b1;
    end else begin
        m_axi_concat_data_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((m_axi_concat_data_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state164)) | ((m_axi_concat_data_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state123)) | ((m_axi_concat_data_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state82)) | ((m_axi_concat_data_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state41)))) begin
        m_axi_concat_data_RREADY = 1'b1;
    end else begin
        m_axi_concat_data_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state166)) begin
        ram1_address0 = zext_ln19_fu_778_p1;
    end else if ((1'b1 == ap_CS_fsm_state83)) begin
        ram1_address0 = p_cast9_cast_fu_586_p1;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        ram1_address0 = loop_index4_cast_reg_880;
    end else begin
        ram1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state166))) begin
        ram1_ce0 = 1'b1;
    end else begin
        ram1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        ram1_d0 = empty_51_fu_579_p2;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        ram1_d0 = concat_data_addr_read_reg_907;
    end else begin
        ram1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        ram1_we0 = empty_50_fu_560_p2;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        ram1_we0 = 32'd4294967295;
    end else begin
        ram1_we0 = 32'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state167)) begin
        ram2_address0 = zext_ln19_reg_1027;
    end else if ((1'b1 == ap_CS_fsm_state165)) begin
        ram2_address0 = p_cast15_cast_fu_771_p1;
    end else if ((1'b1 == ap_CS_fsm_state124)) begin
        ram2_address0 = loop_index_cast_reg_965;
    end else begin
        ram2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state165) | (1'b1 == ap_CS_fsm_state124) | ((data_out1_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state167)))) begin
        ram2_ce0 = 1'b1;
    end else begin
        ram2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state165)) begin
        ram2_d0 = empty_63_fu_764_p2;
    end else if ((1'b1 == ap_CS_fsm_state124)) begin
        ram2_d0 = concat_data_addr_1_read_reg_980;
    end else begin
        ram2_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state165)) begin
        ram2_we0 = empty_62_fu_746_p2;
    end else if ((1'b1 == ap_CS_fsm_state124)) begin
        ram2_we0 = 32'd4294967295;
    end else begin
        ram2_we0 = 32'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == COLS_c_full_n) | (1'b0 == ROWS_c_full_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((m_axi_concat_data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            if (((exitcond12_fu_387_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state40))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state41 : begin
            if (((m_axi_concat_data_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state43 : begin
            if (((exitcond11_fu_427_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state44 : begin
            if (((m_axi_concat_data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            if (((m_axi_concat_data_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state82))) begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state84 : begin
            if (((m_axi_concat_data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state84))) begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            if (((exitcond10_fu_607_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state122))) begin
                ap_NS_fsm = ap_ST_fsm_state125;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state123;
            end
        end
        ap_ST_fsm_state123 : begin
            if (((m_axi_concat_data_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state123))) begin
                ap_NS_fsm = ap_ST_fsm_state124;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state123;
            end
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state125 : begin
            if (((exitcond9_fu_639_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state125))) begin
                ap_NS_fsm = ap_ST_fsm_state166;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state126;
            end
        end
        ap_ST_fsm_state126 : begin
            if (((m_axi_concat_data_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state126))) begin
                ap_NS_fsm = ap_ST_fsm_state127;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state126;
            end
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state151;
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_state152 : begin
            ap_NS_fsm = ap_ST_fsm_state153;
        end
        ap_ST_fsm_state153 : begin
            ap_NS_fsm = ap_ST_fsm_state154;
        end
        ap_ST_fsm_state154 : begin
            ap_NS_fsm = ap_ST_fsm_state155;
        end
        ap_ST_fsm_state155 : begin
            ap_NS_fsm = ap_ST_fsm_state156;
        end
        ap_ST_fsm_state156 : begin
            ap_NS_fsm = ap_ST_fsm_state157;
        end
        ap_ST_fsm_state157 : begin
            ap_NS_fsm = ap_ST_fsm_state158;
        end
        ap_ST_fsm_state158 : begin
            ap_NS_fsm = ap_ST_fsm_state159;
        end
        ap_ST_fsm_state159 : begin
            ap_NS_fsm = ap_ST_fsm_state160;
        end
        ap_ST_fsm_state160 : begin
            ap_NS_fsm = ap_ST_fsm_state161;
        end
        ap_ST_fsm_state161 : begin
            ap_NS_fsm = ap_ST_fsm_state162;
        end
        ap_ST_fsm_state162 : begin
            ap_NS_fsm = ap_ST_fsm_state163;
        end
        ap_ST_fsm_state163 : begin
            ap_NS_fsm = ap_ST_fsm_state164;
        end
        ap_ST_fsm_state164 : begin
            if (((m_axi_concat_data_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state164))) begin
                ap_NS_fsm = ap_ST_fsm_state165;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state164;
            end
        end
        ap_ST_fsm_state165 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state166 : begin
            if (((icmp_ln19_fu_783_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state166))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state167;
            end
        end
        ap_ST_fsm_state167 : begin
            if (((data_out1_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state167))) begin
                ap_NS_fsm = ap_ST_fsm_state168;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state167;
            end
        end
        ap_ST_fsm_state168 : begin
            if (((data_out1_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state168))) begin
                ap_NS_fsm = ap_ST_fsm_state166;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state168;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign COLS_c_din = COLS;

assign ROWS_c_din = ROWS;

assign add_ln16_fu_321_p2 = (zext_ln16_fu_313_p1 + inputs);

assign add_ln17_fu_493_p2 = (zext_ln17_fu_489_p1 + inputs);

assign add_ln19_fu_788_p2 = (i_fu_136 + 27'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state122 = ap_CS_fsm[32'd121];

assign ap_CS_fsm_state123 = ap_CS_fsm[32'd122];

assign ap_CS_fsm_state124 = ap_CS_fsm[32'd123];

assign ap_CS_fsm_state125 = ap_CS_fsm[32'd124];

assign ap_CS_fsm_state126 = ap_CS_fsm[32'd125];

assign ap_CS_fsm_state164 = ap_CS_fsm[32'd163];

assign ap_CS_fsm_state165 = ap_CS_fsm[32'd164];

assign ap_CS_fsm_state166 = ap_CS_fsm[32'd165];

assign ap_CS_fsm_state167 = ap_CS_fsm[32'd166];

assign ap_CS_fsm_state168 = ap_CS_fsm[32'd167];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

always @ (*) begin
    ap_block_state1 = ((1'b0 == COLS_c_full_n) | (1'b0 == ROWS_c_full_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign empty_39_fu_392_p2 = (loop_index4_fu_112 + 27'd1);

assign empty_40_fu_403_p1 = sub_ln16_reg_863[4:0];

assign empty_41_fu_406_p2 = (empty_40_fu_403_p1 + trunc_ln16_reg_824);

assign empty_43_fu_432_p2 = (residual_loop_index7_fu_124 + 5'd1);

assign empty_44_fu_438_p2 = (empty_reg_874 + residual_loop_index7_cast_fu_423_p1);

assign empty_45_fu_452_p2 = ($signed(tmp_cast_fu_448_p1) + $signed(add_ln16_reg_829));

assign empty_46_fu_523_p2 = (empty_41_reg_901 + residual_loop_index7_load_reg_912);

assign empty_47_fu_539_p2 = concat_data_addr_2_read_reg_954 >> p_cast18_fu_535_p1;

assign empty_48_fu_544_p1 = empty_47_fu_539_p2[7:0];

assign empty_49_fu_552_p2 = (residual_loop_index7_load_reg_912 + empty_40_reg_895);

assign empty_50_fu_560_p2 = 32'd1 << p_cast19_fu_556_p1;

assign empty_51_fu_579_p2 = p_cast7_cast_fu_548_p1 << p_cast20_fu_575_p1;

assign empty_53_fu_612_p2 = (loop_index_fu_128 + 27'd1);

assign empty_55_fu_644_p2 = (residual_loop_index_fu_132 + 5'd1);

assign empty_56_fu_650_p2 = (empty_reg_874 + residual_loop_index_cast_fu_635_p1);

assign empty_57_fu_664_p2 = ($signed(tmp1_cast_fu_660_p1) + $signed(add_ln17_reg_938));

assign empty_58_fu_679_p2 = (empty_41_reg_901 + residual_loop_index_fu_132);

assign empty_59_fu_730_p2 = concat_data_addr_3_read_reg_1022 >> p_cast22_fu_726_p1;

assign empty_60_fu_735_p1 = empty_59_fu_730_p2[7:0];

assign empty_61_fu_684_p2 = (residual_loop_index_fu_132 + empty_40_reg_895);

assign empty_62_fu_746_p2 = 32'd1 << p_cast23_fu_743_p1;

assign empty_63_fu_764_p2 = p_cast13_cast_fu_739_p1 << p_cast24_fu_760_p1;

assign empty_fu_376_p1 = sub_ln16_fu_366_p2[9:0];

assign exitcond10_fu_607_p2 = ((loop_index_fu_128 == ram_depth_reg_816) ? 1'b1 : 1'b0);

assign exitcond11_fu_427_p2 = ((residual_loop_index7_fu_124 == trunc_ln16_1_reg_834) ? 1'b1 : 1'b0);

assign exitcond12_fu_387_p2 = ((loop_index4_fu_112 == ram_depth_reg_816) ? 1'b1 : 1'b0);

assign exitcond9_fu_639_p2 = ((residual_loop_index_fu_132 == trunc_ln16_1_reg_834) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_783_p2 = ((i_fu_136 == ram_depth_reg_816) ? 1'b1 : 1'b0);

assign loop_index4_cast_fu_383_p1 = loop_index4_fu_112;

assign loop_index_cast_fu_603_p1 = loop_index_fu_128;

assign m_axi_concat_data_ARBURST = 2'd0;

assign m_axi_concat_data_ARCACHE = 4'd0;

assign m_axi_concat_data_ARID = 1'd0;

assign m_axi_concat_data_ARLOCK = 2'd0;

assign m_axi_concat_data_ARPROT = 3'd0;

assign m_axi_concat_data_ARQOS = 4'd0;

assign m_axi_concat_data_ARREGION = 4'd0;

assign m_axi_concat_data_ARSIZE = 3'd0;

assign m_axi_concat_data_ARUSER = 1'd0;

assign m_axi_concat_data_AWADDR = 64'd0;

assign m_axi_concat_data_AWBURST = 2'd0;

assign m_axi_concat_data_AWCACHE = 4'd0;

assign m_axi_concat_data_AWID = 1'd0;

assign m_axi_concat_data_AWLEN = 32'd0;

assign m_axi_concat_data_AWLOCK = 2'd0;

assign m_axi_concat_data_AWPROT = 3'd0;

assign m_axi_concat_data_AWQOS = 4'd0;

assign m_axi_concat_data_AWREGION = 4'd0;

assign m_axi_concat_data_AWSIZE = 3'd0;

assign m_axi_concat_data_AWUSER = 1'd0;

assign m_axi_concat_data_AWVALID = 1'b0;

assign m_axi_concat_data_BREADY = 1'b0;

assign m_axi_concat_data_WDATA = 256'd0;

assign m_axi_concat_data_WID = 1'd0;

assign m_axi_concat_data_WLAST = 1'b0;

assign m_axi_concat_data_WSTRB = 32'd0;

assign m_axi_concat_data_WUSER = 1'd0;

assign m_axi_concat_data_WVALID = 1'b0;

assign p_cast11_cast_fu_709_p1 = $signed(p_cast1_reg_988);

assign p_cast13_cast_fu_739_p1 = empty_60_fu_735_p1;

assign p_cast15_cast_fu_771_p1 = tmp_6_reg_1004;

assign p_cast18_fu_535_p1 = tmp_1_fu_527_p3;

assign p_cast19_fu_556_p1 = empty_49_fu_552_p2;

assign p_cast20_fu_575_p1 = tmp_2_fu_567_p3;

assign p_cast22_fu_726_p1 = tmp_4_fu_719_p3;

assign p_cast23_fu_743_p1 = empty_61_reg_998;

assign p_cast24_fu_760_p1 = tmp_5_fu_753_p3;

assign p_cast3_cast_fu_590_p1 = $signed(p_cast3_reg_943);

assign p_cast5_cast_fu_513_p1 = $signed(p_cast5_reg_921);

assign p_cast7_cast_fu_548_p1 = empty_48_fu_544_p1;

assign p_cast9_cast_fu_586_p1 = tmp_3_reg_926;

assign p_cast_cast_fu_350_p1 = $signed(p_cast_reg_841);

assign residual_loop_index7_cast11_fu_419_p1 = residual_loop_index7_fu_124;

assign residual_loop_index7_cast_fu_423_p1 = residual_loop_index7_fu_124;

assign residual_loop_index_cast17_fu_631_p1 = residual_loop_index_fu_132;

assign residual_loop_index_cast_fu_635_p1 = residual_loop_index_fu_132;

assign shl_ln1_fu_482_p3 = {{input_data_addr2}, {5'd0}};

assign shl_ln_fu_305_p3 = {{input_data_addr1}, {5'd0}};

assign sub_ln16_cast10_fu_372_p1 = sub_ln16_fu_366_p2;

assign sub_ln16_fu_366_p2 = (zext_ln16_1_fu_360_p1 - zext_ln16_2_fu_363_p1);

assign tmp1_cast_fu_660_p1 = $signed(tmp1_fu_655_p2);

assign tmp1_fu_655_p2 = ($signed(sub_ln16_cast10_reg_868) + $signed(residual_loop_index_cast17_fu_631_p1));

assign tmp_1_fu_527_p3 = {{empty_46_fu_523_p2}, {3'd0}};

assign tmp_2_fu_567_p3 = {{empty_49_fu_552_p2}, {3'd0}};

assign tmp_4_fu_719_p3 = {{empty_58_reg_993}, {3'd0}};

assign tmp_5_fu_753_p3 = {{empty_61_reg_998}, {3'd0}};

assign tmp_cast_fu_448_p1 = $signed(tmp_fu_443_p2);

assign tmp_fu_443_p2 = ($signed(sub_ln16_cast10_reg_868) + $signed(residual_loop_index7_cast11_fu_419_p1));

assign trunc_ln16_1_fu_327_p1 = mul_ln13_fu_289_p2[4:0];

assign trunc_ln16_fu_317_p1 = inputs[4:0];

assign zext_ln13_fu_346_p1 = ram_depth_reg_816;

assign zext_ln16_1_fu_360_p1 = mul_ln13_reg_811;

assign zext_ln16_2_fu_363_p1 = trunc_ln16_1_reg_834;

assign zext_ln16_fu_313_p1 = shl_ln_fu_305_p3;

assign zext_ln17_fu_489_p1 = shl_ln1_fu_482_p3;

assign zext_ln19_fu_778_p1 = i_fu_136;

always @ (posedge ap_clk) begin
    zext_ln13_reg_846[31:27] <= 5'b00000;
    loop_index4_cast_reg_880[63:27] <= 37'b0000000000000000000000000000000000000;
    loop_index_cast_reg_965[63:27] <= 37'b0000000000000000000000000000000000000;
    zext_ln19_reg_1027[63:27] <= 37'b0000000000000000000000000000000000000;
end

endmodule //concat_read_inputs_ap_uint_256_ap_int_8_32u_s
