// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module concat_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_91_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_out1_dout,
        data_out1_num_data_valid,
        data_out1_fifo_cap,
        data_out1_empty_n,
        data_out1_read,
        m_axi_concat_data_AWVALID,
        m_axi_concat_data_AWREADY,
        m_axi_concat_data_AWADDR,
        m_axi_concat_data_AWID,
        m_axi_concat_data_AWLEN,
        m_axi_concat_data_AWSIZE,
        m_axi_concat_data_AWBURST,
        m_axi_concat_data_AWLOCK,
        m_axi_concat_data_AWCACHE,
        m_axi_concat_data_AWPROT,
        m_axi_concat_data_AWQOS,
        m_axi_concat_data_AWREGION,
        m_axi_concat_data_AWUSER,
        m_axi_concat_data_WVALID,
        m_axi_concat_data_WREADY,
        m_axi_concat_data_WDATA,
        m_axi_concat_data_WSTRB,
        m_axi_concat_data_WLAST,
        m_axi_concat_data_WID,
        m_axi_concat_data_WUSER,
        m_axi_concat_data_ARVALID,
        m_axi_concat_data_ARREADY,
        m_axi_concat_data_ARADDR,
        m_axi_concat_data_ARID,
        m_axi_concat_data_ARLEN,
        m_axi_concat_data_ARSIZE,
        m_axi_concat_data_ARBURST,
        m_axi_concat_data_ARLOCK,
        m_axi_concat_data_ARCACHE,
        m_axi_concat_data_ARPROT,
        m_axi_concat_data_ARQOS,
        m_axi_concat_data_ARREGION,
        m_axi_concat_data_ARUSER,
        m_axi_concat_data_RVALID,
        m_axi_concat_data_RREADY,
        m_axi_concat_data_RDATA,
        m_axi_concat_data_RLAST,
        m_axi_concat_data_RID,
        m_axi_concat_data_RFIFONUM,
        m_axi_concat_data_RUSER,
        m_axi_concat_data_RRESP,
        m_axi_concat_data_BVALID,
        m_axi_concat_data_BREADY,
        m_axi_concat_data_BRESP,
        m_axi_concat_data_BID,
        m_axi_concat_data_BUSER,
        loop_num,
        zext_ln96,
        outputs_load,
        count_out,
        count_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [255:0] data_out1_dout;
input  [7:0] data_out1_num_data_valid;
input  [7:0] data_out1_fifo_cap;
input   data_out1_empty_n;
output   data_out1_read;
output   m_axi_concat_data_AWVALID;
input   m_axi_concat_data_AWREADY;
output  [63:0] m_axi_concat_data_AWADDR;
output  [0:0] m_axi_concat_data_AWID;
output  [31:0] m_axi_concat_data_AWLEN;
output  [2:0] m_axi_concat_data_AWSIZE;
output  [1:0] m_axi_concat_data_AWBURST;
output  [1:0] m_axi_concat_data_AWLOCK;
output  [3:0] m_axi_concat_data_AWCACHE;
output  [2:0] m_axi_concat_data_AWPROT;
output  [3:0] m_axi_concat_data_AWQOS;
output  [3:0] m_axi_concat_data_AWREGION;
output  [0:0] m_axi_concat_data_AWUSER;
output   m_axi_concat_data_WVALID;
input   m_axi_concat_data_WREADY;
output  [255:0] m_axi_concat_data_WDATA;
output  [31:0] m_axi_concat_data_WSTRB;
output   m_axi_concat_data_WLAST;
output  [0:0] m_axi_concat_data_WID;
output  [0:0] m_axi_concat_data_WUSER;
output   m_axi_concat_data_ARVALID;
input   m_axi_concat_data_ARREADY;
output  [63:0] m_axi_concat_data_ARADDR;
output  [0:0] m_axi_concat_data_ARID;
output  [31:0] m_axi_concat_data_ARLEN;
output  [2:0] m_axi_concat_data_ARSIZE;
output  [1:0] m_axi_concat_data_ARBURST;
output  [1:0] m_axi_concat_data_ARLOCK;
output  [3:0] m_axi_concat_data_ARCACHE;
output  [2:0] m_axi_concat_data_ARPROT;
output  [3:0] m_axi_concat_data_ARQOS;
output  [3:0] m_axi_concat_data_ARREGION;
output  [0:0] m_axi_concat_data_ARUSER;
input   m_axi_concat_data_RVALID;
output   m_axi_concat_data_RREADY;
input  [255:0] m_axi_concat_data_RDATA;
input   m_axi_concat_data_RLAST;
input  [0:0] m_axi_concat_data_RID;
input  [8:0] m_axi_concat_data_RFIFONUM;
input  [0:0] m_axi_concat_data_RUSER;
input  [1:0] m_axi_concat_data_RRESP;
input   m_axi_concat_data_BVALID;
output   m_axi_concat_data_BREADY;
input  [1:0] m_axi_concat_data_BRESP;
input  [0:0] m_axi_concat_data_BID;
input  [0:0] m_axi_concat_data_BUSER;
input  [26:0] loop_num;
input  [26:0] zext_ln96;
input  [63:0] outputs_load;
output  [31:0] count_out;
output   count_out_ap_vld;

reg ap_idle;
reg data_out1_read;
reg m_axi_concat_data_AWVALID;
reg m_axi_concat_data_WVALID;
reg m_axi_concat_data_BREADY;
reg count_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
reg    ap_enable_reg_pp0_iter37;
reg    ap_enable_reg_pp0_iter38;
reg    ap_enable_reg_pp0_iter39;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] tmp_nbreadreq_fu_102_p3;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg   [0:0] tmp_reg_270;
reg    ap_block_state3_io;
wire    ap_block_state4_pp0_stage0_iter3;
reg   [0:0] tmp_reg_270_pp0_iter2_reg;
reg    ap_block_state4_io;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_state20_pp0_stage0_iter19;
wire    ap_block_state21_pp0_stage0_iter20;
wire    ap_block_state22_pp0_stage0_iter21;
wire    ap_block_state23_pp0_stage0_iter22;
wire    ap_block_state24_pp0_stage0_iter23;
wire    ap_block_state25_pp0_stage0_iter24;
wire    ap_block_state26_pp0_stage0_iter25;
wire    ap_block_state27_pp0_stage0_iter26;
wire    ap_block_state28_pp0_stage0_iter27;
wire    ap_block_state29_pp0_stage0_iter28;
wire    ap_block_state30_pp0_stage0_iter29;
wire    ap_block_state31_pp0_stage0_iter30;
wire    ap_block_state32_pp0_stage0_iter31;
wire    ap_block_state33_pp0_stage0_iter32;
wire    ap_block_state34_pp0_stage0_iter33;
wire    ap_block_state35_pp0_stage0_iter34;
wire    ap_block_state36_pp0_stage0_iter35;
wire    ap_block_state37_pp0_stage0_iter36;
wire    ap_block_state38_pp0_stage0_iter37;
wire    ap_block_state39_pp0_stage0_iter38;
reg   [0:0] tmp_reg_270_pp0_iter38_reg;
reg    ap_block_state40_pp0_stage0_iter39;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln91_fu_156_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    data_out1_blk_n;
wire    ap_block_pp0_stage0;
reg    concat_data_blk_n_AW;
reg    concat_data_blk_n_W;
reg    concat_data_blk_n_B;
reg    ap_block_pp0_stage0_11001;
wire   [27:0] zext_ln96_cast_fu_139_p1;
reg   [27:0] zext_ln96_cast_reg_256;
reg   [26:0] i_1_reg_261;
reg   [0:0] icmp_ln91_reg_266;
reg   [0:0] icmp_ln91_reg_266_pp0_iter1_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter2_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter3_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter4_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter5_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter6_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter7_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter8_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter9_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter10_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter11_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter12_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter13_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter14_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter15_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter16_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter17_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter18_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter19_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter20_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter21_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter22_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter23_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter24_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter25_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter26_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter27_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter28_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter29_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter30_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter31_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter32_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter33_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter34_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter35_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter36_reg;
reg   [0:0] icmp_ln91_reg_266_pp0_iter37_reg;
reg   [0:0] tmp_reg_270_pp0_iter3_reg;
reg   [0:0] tmp_reg_270_pp0_iter4_reg;
reg   [0:0] tmp_reg_270_pp0_iter5_reg;
reg   [0:0] tmp_reg_270_pp0_iter6_reg;
reg   [0:0] tmp_reg_270_pp0_iter7_reg;
reg   [0:0] tmp_reg_270_pp0_iter8_reg;
reg   [0:0] tmp_reg_270_pp0_iter9_reg;
reg   [0:0] tmp_reg_270_pp0_iter10_reg;
reg   [0:0] tmp_reg_270_pp0_iter11_reg;
reg   [0:0] tmp_reg_270_pp0_iter12_reg;
reg   [0:0] tmp_reg_270_pp0_iter13_reg;
reg   [0:0] tmp_reg_270_pp0_iter14_reg;
reg   [0:0] tmp_reg_270_pp0_iter15_reg;
reg   [0:0] tmp_reg_270_pp0_iter16_reg;
reg   [0:0] tmp_reg_270_pp0_iter17_reg;
reg   [0:0] tmp_reg_270_pp0_iter18_reg;
reg   [0:0] tmp_reg_270_pp0_iter19_reg;
reg   [0:0] tmp_reg_270_pp0_iter20_reg;
reg   [0:0] tmp_reg_270_pp0_iter21_reg;
reg   [0:0] tmp_reg_270_pp0_iter22_reg;
reg   [0:0] tmp_reg_270_pp0_iter23_reg;
reg   [0:0] tmp_reg_270_pp0_iter24_reg;
reg   [0:0] tmp_reg_270_pp0_iter25_reg;
reg   [0:0] tmp_reg_270_pp0_iter26_reg;
reg   [0:0] tmp_reg_270_pp0_iter27_reg;
reg   [0:0] tmp_reg_270_pp0_iter28_reg;
reg   [0:0] tmp_reg_270_pp0_iter29_reg;
reg   [0:0] tmp_reg_270_pp0_iter30_reg;
reg   [0:0] tmp_reg_270_pp0_iter31_reg;
reg   [0:0] tmp_reg_270_pp0_iter32_reg;
reg   [0:0] tmp_reg_270_pp0_iter33_reg;
reg   [0:0] tmp_reg_270_pp0_iter34_reg;
reg   [0:0] tmp_reg_270_pp0_iter35_reg;
reg   [0:0] tmp_reg_270_pp0_iter36_reg;
reg   [0:0] tmp_reg_270_pp0_iter37_reg;
reg   [255:0] p_Val2_s_reg_274;
reg   [255:0] p_Val2_s_reg_274_pp0_iter2_reg;
reg   [58:0] trunc_ln96_1_reg_279;
wire  signed [63:0] sext_ln96_fu_222_p1;
reg    ap_block_pp0_stage0_01001;
reg   [26:0] i_fu_76;
wire   [26:0] add_ln91_fu_162_p2;
wire    ap_loop_init;
reg   [26:0] ap_sig_allocacmp_i_1;
reg   [31:0] count_fu_80;
wire   [31:0] count_1_fu_211_p2;
wire   [27:0] zext_ln96_1_fu_176_p1;
wire   [27:0] add_ln96_fu_179_p2;
wire   [32:0] shl_ln_fu_184_p3;
wire   [63:0] zext_ln96_2_fu_192_p1;
wire   [63:0] add_ln96_1_fu_196_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg    ap_loop_exit_ready_pp0_iter18_reg;
reg    ap_loop_exit_ready_pp0_iter19_reg;
reg    ap_loop_exit_ready_pp0_iter20_reg;
reg    ap_loop_exit_ready_pp0_iter21_reg;
reg    ap_loop_exit_ready_pp0_iter22_reg;
reg    ap_loop_exit_ready_pp0_iter23_reg;
reg    ap_loop_exit_ready_pp0_iter24_reg;
reg    ap_loop_exit_ready_pp0_iter25_reg;
reg    ap_loop_exit_ready_pp0_iter26_reg;
reg    ap_loop_exit_ready_pp0_iter27_reg;
reg    ap_loop_exit_ready_pp0_iter28_reg;
reg    ap_loop_exit_ready_pp0_iter29_reg;
reg    ap_loop_exit_ready_pp0_iter30_reg;
reg    ap_loop_exit_ready_pp0_iter31_reg;
reg    ap_loop_exit_ready_pp0_iter32_reg;
reg    ap_loop_exit_ready_pp0_iter33_reg;
reg    ap_loop_exit_ready_pp0_iter34_reg;
reg    ap_loop_exit_ready_pp0_iter35_reg;
reg    ap_loop_exit_ready_pp0_iter36_reg;
reg    ap_loop_exit_ready_pp0_iter37_reg;
reg    ap_loop_exit_ready_pp0_iter38_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 ap_enable_reg_pp0_iter37 = 1'b0;
#0 ap_enable_reg_pp0_iter38 = 1'b0;
#0 ap_enable_reg_pp0_iter39 = 1'b0;
#0 ap_done_reg = 1'b0;
end

concat_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter38_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            count_fu_80 <= 32'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_nbreadreq_fu_102_p3 == 1'd1))) begin
            count_fu_80 <= count_1_fu_211_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln91_fu_156_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_76 <= add_ln91_fu_162_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_76 <= 27'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
        ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
        ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
        ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
        ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
        ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
        ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
        ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
        ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
        ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
        ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
        ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
        ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
        ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
        ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
        ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
        ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
        ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
        ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
        ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
        ap_loop_exit_ready_pp0_iter38_reg <= ap_loop_exit_ready_pp0_iter37_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln91_reg_266_pp0_iter10_reg <= icmp_ln91_reg_266_pp0_iter9_reg;
        icmp_ln91_reg_266_pp0_iter11_reg <= icmp_ln91_reg_266_pp0_iter10_reg;
        icmp_ln91_reg_266_pp0_iter12_reg <= icmp_ln91_reg_266_pp0_iter11_reg;
        icmp_ln91_reg_266_pp0_iter13_reg <= icmp_ln91_reg_266_pp0_iter12_reg;
        icmp_ln91_reg_266_pp0_iter14_reg <= icmp_ln91_reg_266_pp0_iter13_reg;
        icmp_ln91_reg_266_pp0_iter15_reg <= icmp_ln91_reg_266_pp0_iter14_reg;
        icmp_ln91_reg_266_pp0_iter16_reg <= icmp_ln91_reg_266_pp0_iter15_reg;
        icmp_ln91_reg_266_pp0_iter17_reg <= icmp_ln91_reg_266_pp0_iter16_reg;
        icmp_ln91_reg_266_pp0_iter18_reg <= icmp_ln91_reg_266_pp0_iter17_reg;
        icmp_ln91_reg_266_pp0_iter19_reg <= icmp_ln91_reg_266_pp0_iter18_reg;
        icmp_ln91_reg_266_pp0_iter20_reg <= icmp_ln91_reg_266_pp0_iter19_reg;
        icmp_ln91_reg_266_pp0_iter21_reg <= icmp_ln91_reg_266_pp0_iter20_reg;
        icmp_ln91_reg_266_pp0_iter22_reg <= icmp_ln91_reg_266_pp0_iter21_reg;
        icmp_ln91_reg_266_pp0_iter23_reg <= icmp_ln91_reg_266_pp0_iter22_reg;
        icmp_ln91_reg_266_pp0_iter24_reg <= icmp_ln91_reg_266_pp0_iter23_reg;
        icmp_ln91_reg_266_pp0_iter25_reg <= icmp_ln91_reg_266_pp0_iter24_reg;
        icmp_ln91_reg_266_pp0_iter26_reg <= icmp_ln91_reg_266_pp0_iter25_reg;
        icmp_ln91_reg_266_pp0_iter27_reg <= icmp_ln91_reg_266_pp0_iter26_reg;
        icmp_ln91_reg_266_pp0_iter28_reg <= icmp_ln91_reg_266_pp0_iter27_reg;
        icmp_ln91_reg_266_pp0_iter29_reg <= icmp_ln91_reg_266_pp0_iter28_reg;
        icmp_ln91_reg_266_pp0_iter2_reg <= icmp_ln91_reg_266_pp0_iter1_reg;
        icmp_ln91_reg_266_pp0_iter30_reg <= icmp_ln91_reg_266_pp0_iter29_reg;
        icmp_ln91_reg_266_pp0_iter31_reg <= icmp_ln91_reg_266_pp0_iter30_reg;
        icmp_ln91_reg_266_pp0_iter32_reg <= icmp_ln91_reg_266_pp0_iter31_reg;
        icmp_ln91_reg_266_pp0_iter33_reg <= icmp_ln91_reg_266_pp0_iter32_reg;
        icmp_ln91_reg_266_pp0_iter34_reg <= icmp_ln91_reg_266_pp0_iter33_reg;
        icmp_ln91_reg_266_pp0_iter35_reg <= icmp_ln91_reg_266_pp0_iter34_reg;
        icmp_ln91_reg_266_pp0_iter36_reg <= icmp_ln91_reg_266_pp0_iter35_reg;
        icmp_ln91_reg_266_pp0_iter37_reg <= icmp_ln91_reg_266_pp0_iter36_reg;
        icmp_ln91_reg_266_pp0_iter3_reg <= icmp_ln91_reg_266_pp0_iter2_reg;
        icmp_ln91_reg_266_pp0_iter4_reg <= icmp_ln91_reg_266_pp0_iter3_reg;
        icmp_ln91_reg_266_pp0_iter5_reg <= icmp_ln91_reg_266_pp0_iter4_reg;
        icmp_ln91_reg_266_pp0_iter6_reg <= icmp_ln91_reg_266_pp0_iter5_reg;
        icmp_ln91_reg_266_pp0_iter7_reg <= icmp_ln91_reg_266_pp0_iter6_reg;
        icmp_ln91_reg_266_pp0_iter8_reg <= icmp_ln91_reg_266_pp0_iter7_reg;
        icmp_ln91_reg_266_pp0_iter9_reg <= icmp_ln91_reg_266_pp0_iter8_reg;
        p_Val2_s_reg_274_pp0_iter2_reg <= p_Val2_s_reg_274;
        tmp_reg_270_pp0_iter10_reg <= tmp_reg_270_pp0_iter9_reg;
        tmp_reg_270_pp0_iter11_reg <= tmp_reg_270_pp0_iter10_reg;
        tmp_reg_270_pp0_iter12_reg <= tmp_reg_270_pp0_iter11_reg;
        tmp_reg_270_pp0_iter13_reg <= tmp_reg_270_pp0_iter12_reg;
        tmp_reg_270_pp0_iter14_reg <= tmp_reg_270_pp0_iter13_reg;
        tmp_reg_270_pp0_iter15_reg <= tmp_reg_270_pp0_iter14_reg;
        tmp_reg_270_pp0_iter16_reg <= tmp_reg_270_pp0_iter15_reg;
        tmp_reg_270_pp0_iter17_reg <= tmp_reg_270_pp0_iter16_reg;
        tmp_reg_270_pp0_iter18_reg <= tmp_reg_270_pp0_iter17_reg;
        tmp_reg_270_pp0_iter19_reg <= tmp_reg_270_pp0_iter18_reg;
        tmp_reg_270_pp0_iter20_reg <= tmp_reg_270_pp0_iter19_reg;
        tmp_reg_270_pp0_iter21_reg <= tmp_reg_270_pp0_iter20_reg;
        tmp_reg_270_pp0_iter22_reg <= tmp_reg_270_pp0_iter21_reg;
        tmp_reg_270_pp0_iter23_reg <= tmp_reg_270_pp0_iter22_reg;
        tmp_reg_270_pp0_iter24_reg <= tmp_reg_270_pp0_iter23_reg;
        tmp_reg_270_pp0_iter25_reg <= tmp_reg_270_pp0_iter24_reg;
        tmp_reg_270_pp0_iter26_reg <= tmp_reg_270_pp0_iter25_reg;
        tmp_reg_270_pp0_iter27_reg <= tmp_reg_270_pp0_iter26_reg;
        tmp_reg_270_pp0_iter28_reg <= tmp_reg_270_pp0_iter27_reg;
        tmp_reg_270_pp0_iter29_reg <= tmp_reg_270_pp0_iter28_reg;
        tmp_reg_270_pp0_iter2_reg <= tmp_reg_270;
        tmp_reg_270_pp0_iter30_reg <= tmp_reg_270_pp0_iter29_reg;
        tmp_reg_270_pp0_iter31_reg <= tmp_reg_270_pp0_iter30_reg;
        tmp_reg_270_pp0_iter32_reg <= tmp_reg_270_pp0_iter31_reg;
        tmp_reg_270_pp0_iter33_reg <= tmp_reg_270_pp0_iter32_reg;
        tmp_reg_270_pp0_iter34_reg <= tmp_reg_270_pp0_iter33_reg;
        tmp_reg_270_pp0_iter35_reg <= tmp_reg_270_pp0_iter34_reg;
        tmp_reg_270_pp0_iter36_reg <= tmp_reg_270_pp0_iter35_reg;
        tmp_reg_270_pp0_iter37_reg <= tmp_reg_270_pp0_iter36_reg;
        tmp_reg_270_pp0_iter38_reg <= tmp_reg_270_pp0_iter37_reg;
        tmp_reg_270_pp0_iter3_reg <= tmp_reg_270_pp0_iter2_reg;
        tmp_reg_270_pp0_iter4_reg <= tmp_reg_270_pp0_iter3_reg;
        tmp_reg_270_pp0_iter5_reg <= tmp_reg_270_pp0_iter4_reg;
        tmp_reg_270_pp0_iter6_reg <= tmp_reg_270_pp0_iter5_reg;
        tmp_reg_270_pp0_iter7_reg <= tmp_reg_270_pp0_iter6_reg;
        tmp_reg_270_pp0_iter8_reg <= tmp_reg_270_pp0_iter7_reg;
        tmp_reg_270_pp0_iter9_reg <= tmp_reg_270_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        i_1_reg_261 <= ap_sig_allocacmp_i_1;
        icmp_ln91_reg_266 <= icmp_ln91_fu_156_p2;
        icmp_ln91_reg_266_pp0_iter1_reg <= icmp_ln91_reg_266;
        tmp_reg_270 <= tmp_nbreadreq_fu_102_p3;
        zext_ln96_cast_reg_256[26 : 0] <= zext_ln96_cast_fu_139_p1[26 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_102_p3 == 1'd1))) begin
        p_Val2_s_reg_274 <= data_out1_dout;
        trunc_ln96_1_reg_279 <= {{add_ln96_1_fu_196_p2[63:5]}};
    end
end

always @ (*) begin
    if (((icmp_ln91_fu_156_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter38_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_idle_pp0 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter39 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b0) & (ap_enable_reg_pp0_iter37 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 27'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_reg_270 == 1'd1))) begin
        concat_data_blk_n_AW = m_axi_concat_data_AWREADY;
    end else begin
        concat_data_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_reg_270_pp0_iter38_reg == 1'd1) & (ap_enable_reg_pp0_iter39 == 1'b1))) begin
        concat_data_blk_n_B = m_axi_concat_data_BVALID;
    end else begin
        concat_data_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (tmp_reg_270_pp0_iter2_reg == 1'd1))) begin
        concat_data_blk_n_W = m_axi_concat_data_WREADY;
    end else begin
        concat_data_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln91_reg_266_pp0_iter37_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        count_out_ap_vld = 1'b1;
    end else begin
        count_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_102_p3 == 1'd1))) begin
        data_out1_blk_n = data_out1_empty_n;
    end else begin
        data_out1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_nbreadreq_fu_102_p3 == 1'd1))) begin
        data_out1_read = 1'b1;
    end else begin
        data_out1_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_reg_270 == 1'd1))) begin
        m_axi_concat_data_AWVALID = 1'b1;
    end else begin
        m_axi_concat_data_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_270_pp0_iter38_reg == 1'd1) & (ap_enable_reg_pp0_iter39 == 1'b1))) begin
        m_axi_concat_data_BREADY = 1'b1;
    end else begin
        m_axi_concat_data_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_270_pp0_iter2_reg == 1'd1))) begin
        m_axi_concat_data_WVALID = 1'b1;
    end else begin
        m_axi_concat_data_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln91_fu_162_p2 = (ap_sig_allocacmp_i_1 + 27'd1);

assign add_ln96_1_fu_196_p2 = (outputs_load + zext_ln96_2_fu_192_p1);

assign add_ln96_fu_179_p2 = (zext_ln96_1_fu_176_p1 + zext_ln96_cast_reg_256);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((tmp_reg_270_pp0_iter38_reg == 1'd1) & (m_axi_concat_data_BVALID == 1'b0) & (ap_enable_reg_pp0_iter39 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_nbreadreq_fu_102_p3 == 1'd1) & (data_out1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((tmp_reg_270_pp0_iter38_reg == 1'd1) & (m_axi_concat_data_BVALID == 1'b0) & (ap_enable_reg_pp0_iter39 == 1'b1)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_io)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_nbreadreq_fu_102_p3 == 1'd1) & (data_out1_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((tmp_reg_270_pp0_iter38_reg == 1'd1) & (m_axi_concat_data_BVALID == 1'b0) & (ap_enable_reg_pp0_iter39 == 1'b1)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_io)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_io)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_nbreadreq_fu_102_p3 == 1'd1) & (data_out1_empty_n == 1'b0)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((tmp_nbreadreq_fu_102_p3 == 1'd1) & (data_out1_empty_n == 1'b0));
end

assign ap_block_state30_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter38 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((tmp_reg_270 == 1'd1) & (m_axi_concat_data_AWREADY == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state40_pp0_stage0_iter39 = ((tmp_reg_270_pp0_iter38_reg == 1'd1) & (m_axi_concat_data_BVALID == 1'b0));
end

always @ (*) begin
    ap_block_state4_io = ((tmp_reg_270_pp0_iter2_reg == 1'd1) & (m_axi_concat_data_WREADY == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign count_1_fu_211_p2 = (count_fu_80 + 32'd1);

assign count_out = count_fu_80;

assign icmp_ln91_fu_156_p2 = ((ap_sig_allocacmp_i_1 == loop_num) ? 1'b1 : 1'b0);

assign m_axi_concat_data_ARADDR = 64'd0;

assign m_axi_concat_data_ARBURST = 2'd0;

assign m_axi_concat_data_ARCACHE = 4'd0;

assign m_axi_concat_data_ARID = 1'd0;

assign m_axi_concat_data_ARLEN = 32'd0;

assign m_axi_concat_data_ARLOCK = 2'd0;

assign m_axi_concat_data_ARPROT = 3'd0;

assign m_axi_concat_data_ARQOS = 4'd0;

assign m_axi_concat_data_ARREGION = 4'd0;

assign m_axi_concat_data_ARSIZE = 3'd0;

assign m_axi_concat_data_ARUSER = 1'd0;

assign m_axi_concat_data_ARVALID = 1'b0;

assign m_axi_concat_data_AWADDR = sext_ln96_fu_222_p1;

assign m_axi_concat_data_AWBURST = 2'd0;

assign m_axi_concat_data_AWCACHE = 4'd0;

assign m_axi_concat_data_AWID = 1'd0;

assign m_axi_concat_data_AWLEN = 32'd1;

assign m_axi_concat_data_AWLOCK = 2'd0;

assign m_axi_concat_data_AWPROT = 3'd0;

assign m_axi_concat_data_AWQOS = 4'd0;

assign m_axi_concat_data_AWREGION = 4'd0;

assign m_axi_concat_data_AWSIZE = 3'd0;

assign m_axi_concat_data_AWUSER = 1'd0;

assign m_axi_concat_data_RREADY = 1'b0;

assign m_axi_concat_data_WDATA = p_Val2_s_reg_274_pp0_iter2_reg;

assign m_axi_concat_data_WID = 1'd0;

assign m_axi_concat_data_WLAST = 1'b0;

assign m_axi_concat_data_WSTRB = 32'd4294967295;

assign m_axi_concat_data_WUSER = 1'd0;

assign sext_ln96_fu_222_p1 = $signed(trunc_ln96_1_reg_279);

assign shl_ln_fu_184_p3 = {{add_ln96_fu_179_p2}, {5'd0}};

assign tmp_nbreadreq_fu_102_p3 = data_out1_empty_n;

assign zext_ln96_1_fu_176_p1 = i_1_reg_261;

assign zext_ln96_2_fu_192_p1 = shl_ln_fu_184_p3;

assign zext_ln96_cast_fu_139_p1 = zext_ln96;

always @ (posedge ap_clk) begin
    zext_ln96_cast_reg_256[27] <= 1'b0;
end

endmodule //concat_store_ap_uint_256_ap_int_8_ap_int_8_32u_Pipeline_VITIS_LOOP_91_1
