-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity reshape_read_inputs_ap_uint_256_ap_int_8_32u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    m_axi_reshape_data_AWVALID : OUT STD_LOGIC;
    m_axi_reshape_data_AWREADY : IN STD_LOGIC;
    m_axi_reshape_data_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_reshape_data_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_reshape_data_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_reshape_data_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_reshape_data_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_reshape_data_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_reshape_data_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_reshape_data_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_reshape_data_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_reshape_data_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_reshape_data_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_reshape_data_WVALID : OUT STD_LOGIC;
    m_axi_reshape_data_WREADY : IN STD_LOGIC;
    m_axi_reshape_data_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    m_axi_reshape_data_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_reshape_data_WLAST : OUT STD_LOGIC;
    m_axi_reshape_data_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_reshape_data_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_reshape_data_ARVALID : OUT STD_LOGIC;
    m_axi_reshape_data_ARREADY : IN STD_LOGIC;
    m_axi_reshape_data_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_reshape_data_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_reshape_data_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_reshape_data_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_reshape_data_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_reshape_data_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_reshape_data_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_reshape_data_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_reshape_data_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_reshape_data_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_reshape_data_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_reshape_data_RVALID : IN STD_LOGIC;
    m_axi_reshape_data_RREADY : OUT STD_LOGIC;
    m_axi_reshape_data_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    m_axi_reshape_data_RLAST : IN STD_LOGIC;
    m_axi_reshape_data_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_reshape_data_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_reshape_data_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_reshape_data_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_reshape_data_BVALID : IN STD_LOGIC;
    m_axi_reshape_data_BREADY : OUT STD_LOGIC;
    m_axi_reshape_data_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_reshape_data_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_reshape_data_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    inputs : IN STD_LOGIC_VECTOR (63 downto 0);
    data_in1_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    data_in1_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    data_in1_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    data_in1_full_n : IN STD_LOGIC;
    data_in1_write : OUT STD_LOGIC;
    input_data_addr : IN STD_LOGIC_VECTOR (31 downto 0);
    ROWS : IN STD_LOGIC_VECTOR (31 downto 0);
    COLS : IN STD_LOGIC_VECTOR (31 downto 0);
    input_data_addr_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    input_data_addr_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    input_data_addr_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    input_data_addr_c_full_n : IN STD_LOGIC;
    input_data_addr_c_write : OUT STD_LOGIC;
    ROWS_c9_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    ROWS_c9_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    ROWS_c9_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    ROWS_c9_full_n : IN STD_LOGIC;
    ROWS_c9_write : OUT STD_LOGIC;
    COLS_c10_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    COLS_c10_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    COLS_c10_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    COLS_c10_full_n : IN STD_LOGIC;
    COLS_c10_write : OUT STD_LOGIC );
end;


architecture behav of reshape_read_inputs_ap_uint_256_ap_int_8_32u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv27_1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal reshape_data_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal reshape_data_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal data_in1_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal input_data_addr_c_blk_n : STD_LOGIC;
    signal ROWS_c9_blk_n : STD_LOGIC;
    signal COLS_c10_blk_n : STD_LOGIC;
    signal mul_ln13_fu_229_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln13_reg_534 : STD_LOGIC_VECTOR (31 downto 0);
    signal ram_depth_reg_539 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln15_fu_257_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln15_reg_546 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln15_fu_261_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln15_reg_551 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln15_1_fu_267_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln15_1_reg_556 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_cast_reg_562 : STD_LOGIC_VECTOR (58 downto 0);
    signal zext_ln13_fu_286_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln15_fu_306_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln15_reg_578 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal sub_ln15_cast5_fu_312_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sub_ln15_cast5_reg_583 : STD_LOGIC_VECTOR (33 downto 0);
    signal empty_fu_316_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_reg_588 : STD_LOGIC_VECTOR (9 downto 0);
    signal loop_index_cast_fu_323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index_cast_reg_593 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal empty_111_fu_343_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_111_reg_608 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond6_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal reshape_data_addr_read_reg_614 : STD_LOGIC_VECTOR (255 downto 0);
    signal p_cast4_reg_622 : STD_LOGIC_VECTOR (58 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal exitcond5_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_116_fu_407_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_116_reg_627 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_119_fu_412_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_119_reg_632 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_32_reg_638 : STD_LOGIC_VECTOR (4 downto 0);
    signal reshape_data_addr_32_read_reg_656 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal icmp_ln17_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ram_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal ram_ce0 : STD_LOGIC;
    signal ram_we0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ram_d0 : STD_LOGIC_VECTOR (255 downto 0);
    signal ram_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal p_cast8_cast_fu_499_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal zext_ln17_fu_506_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_cast_fu_290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast4_cast_fu_437_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loop_index_fu_110 : STD_LOGIC_VECTOR (26 downto 0);
    signal empty_110_fu_332_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal residual_loop_index_fu_118 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_113_fu_367_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_fu_122 : STD_LOGIC_VECTOR (26 downto 0);
    signal add_ln17_fu_516_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal empty_121_fu_492_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal empty_120_fu_474_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_245_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal zext_ln15_fu_253_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln15_1_fu_300_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln15_2_fu_303_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal residual_loop_index_cast_fu_358_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal residual_loop_index_cast6_fu_354_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_fu_378_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_cast_fu_383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_115_fu_387_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp1_fu_402_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_114_fu_373_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_447_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_cast11_fu_454_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal empty_117_fu_458_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal empty_118_fu_463_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_cast12_fu_471_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_481_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_cast6_cast_fu_467_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal p_cast13_fu_488_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component reshape_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component reshape_read_inputs_ap_uint_256_ap_int_8_32u_s_ram_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC_VECTOR (31 downto 0);
        d0 : IN STD_LOGIC_VECTOR (255 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;



begin
    ram_U : component reshape_read_inputs_ap_uint_256_ap_int_8_32u_s_ram_RAM_AUTO_1R1W
    generic map (
        DataWidth => 256,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ram_address0,
        ce0 => ram_ce0,
        we0 => ram_we0,
        d0 => ram_d0,
        q0 => ram_q0);

    mul_32s_32s_32_1_1_U3 : component reshape_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => COLS,
        din1 => ROWS,
        dout => mul_ln13_fu_229_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln17_fu_511_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_362_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                i_fu_122 <= ap_const_lv27_0;
            elsif (((icmp_ln17_fu_511_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                i_fu_122 <= add_ln17_fu_516_p2;
            end if; 
        end if;
    end process;

    loop_index_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = COLS_c10_full_n) or (ap_const_logic_0 = ROWS_c9_full_n) or (real_start = ap_const_logic_0) or (input_data_addr_c_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                loop_index_fu_110 <= ap_const_lv27_0;
            elsif (((exitcond6_fu_327_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                loop_index_fu_110 <= empty_110_fu_332_p2;
            end if; 
        end if;
    end process;

    residual_loop_index_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_327_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                residual_loop_index_fu_118 <= ap_const_lv5_0;
            elsif (((exitcond5_fu_362_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                residual_loop_index_fu_118 <= empty_113_fu_367_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                add_ln15_reg_551 <= add_ln15_fu_261_p2;
                mul_ln13_reg_534 <= mul_ln13_fu_229_p2;
                p_cast_reg_562 <= add_ln15_fu_261_p2(63 downto 5);
                ram_depth_reg_539 <= mul_ln13_fu_229_p2(31 downto 5);
                trunc_ln15_1_reg_556 <= trunc_ln15_1_fu_267_p1;
                trunc_ln15_reg_546 <= trunc_ln15_fu_257_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_327_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                empty_111_reg_608 <= empty_111_fu_343_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_362_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                empty_116_reg_627 <= empty_116_fu_407_p2;
                empty_119_reg_632 <= empty_119_fu_412_p2;
                p_cast4_reg_622 <= empty_115_fu_387_p2(63 downto 5);
                tmp_32_reg_638 <= empty_114_fu_373_p2(9 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                empty_reg_588 <= empty_fu_316_p1;
                sub_ln15_cast5_reg_583 <= sub_ln15_cast5_fu_312_p1;
                sub_ln15_reg_578 <= sub_ln15_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                    loop_index_cast_reg_593(26 downto 0) <= loop_index_cast_fu_323_p1(26 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                reshape_data_addr_32_read_reg_656 <= m_axi_reshape_data_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                reshape_data_addr_read_reg_614 <= m_axi_reshape_data_RDATA;
            end if;
        end if;
    end process;
    loop_index_cast_reg_593(63 downto 27) <= "0000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, m_axi_reshape_data_ARREADY, m_axi_reshape_data_RVALID, data_in1_full_n, input_data_addr_c_full_n, ROWS_c9_full_n, COLS_c10_full_n, ap_CS_fsm_state2, ap_CS_fsm_state10, ap_CS_fsm_state13, ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state9, exitcond6_fu_327_p2, ap_CS_fsm_state12, exitcond5_fu_362_p2, ap_CS_fsm_state22, icmp_ln17_fu_511_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = COLS_c10_full_n) or (ap_const_logic_0 = ROWS_c9_full_n) or (real_start = ap_const_logic_0) or (input_data_addr_c_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((m_axi_reshape_data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((exitcond6_fu_327_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((m_axi_reshape_data_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state12 => 
                if (((exitcond5_fu_362_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if (((m_axi_reshape_data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((m_axi_reshape_data_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state22 => 
                if (((icmp_ln17_fu_511_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state23) and (data_in1_full_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    COLS_c10_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, COLS_c10_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            COLS_c10_blk_n <= COLS_c10_full_n;
        else 
            COLS_c10_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    COLS_c10_din <= COLS;

    COLS_c10_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, input_data_addr_c_full_n, ROWS_c9_full_n, COLS_c10_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = COLS_c10_full_n) or (ap_const_logic_0 = ROWS_c9_full_n) or (real_start = ap_const_logic_0) or (input_data_addr_c_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            COLS_c10_write <= ap_const_logic_1;
        else 
            COLS_c10_write <= ap_const_logic_0;
        end if; 
    end process;


    ROWS_c9_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, ROWS_c9_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ROWS_c9_blk_n <= ROWS_c9_full_n;
        else 
            ROWS_c9_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ROWS_c9_din <= ROWS;

    ROWS_c9_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, input_data_addr_c_full_n, ROWS_c9_full_n, COLS_c10_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = COLS_c10_full_n) or (ap_const_logic_0 = ROWS_c9_full_n) or (real_start = ap_const_logic_0) or (input_data_addr_c_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ROWS_c9_write <= ap_const_logic_1;
        else 
            ROWS_c9_write <= ap_const_logic_0;
        end if; 
    end process;

    add_ln15_fu_261_p2 <= std_logic_vector(unsigned(zext_ln15_fu_253_p1) + unsigned(inputs));
    add_ln17_fu_516_p2 <= std_logic_vector(unsigned(i_fu_122) + unsigned(ap_const_lv27_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(m_axi_reshape_data_RVALID)
    begin
        if ((m_axi_reshape_data_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;

    ap_ST_fsm_state13_blk_assign_proc : process(m_axi_reshape_data_ARREADY)
    begin
        if ((m_axi_reshape_data_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(real_start, ap_done_reg, input_data_addr_c_full_n, ROWS_c9_full_n, COLS_c10_full_n)
    begin
        if (((ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = COLS_c10_full_n) or (ap_const_logic_0 = ROWS_c9_full_n) or (real_start = ap_const_logic_0) or (input_data_addr_c_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state20_blk_assign_proc : process(m_axi_reshape_data_RVALID)
    begin
        if ((m_axi_reshape_data_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state20_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state20_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;

    ap_ST_fsm_state23_blk_assign_proc : process(data_in1_full_n)
    begin
        if ((data_in1_full_n = ap_const_logic_0)) then 
            ap_ST_fsm_state23_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state23_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(m_axi_reshape_data_ARREADY)
    begin
        if ((m_axi_reshape_data_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, input_data_addr_c_full_n, ROWS_c9_full_n, COLS_c10_full_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = COLS_c10_full_n) or (ap_const_logic_0 = ROWS_c9_full_n) or (real_start = ap_const_logic_0) or (input_data_addr_c_full_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state22, icmp_ln17_fu_511_p2)
    begin
        if (((icmp_ln17_fu_511_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    data_in1_blk_n_assign_proc : process(data_in1_full_n, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            data_in1_blk_n <= data_in1_full_n;
        else 
            data_in1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_in1_din <= ram_q0;

    data_in1_write_assign_proc : process(data_in1_full_n, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) and (data_in1_full_n = ap_const_logic_1))) then 
            data_in1_write <= ap_const_logic_1;
        else 
            data_in1_write <= ap_const_logic_0;
        end if; 
    end process;

    empty_110_fu_332_p2 <= std_logic_vector(unsigned(loop_index_fu_110) + unsigned(ap_const_lv27_1));
    empty_111_fu_343_p1 <= sub_ln15_reg_578(5 - 1 downto 0);
    empty_113_fu_367_p2 <= std_logic_vector(unsigned(residual_loop_index_fu_118) + unsigned(ap_const_lv5_1));
    empty_114_fu_373_p2 <= std_logic_vector(unsigned(empty_reg_588) + unsigned(residual_loop_index_cast_fu_358_p1));
    empty_115_fu_387_p2 <= std_logic_vector(signed(tmp_cast_fu_383_p1) + signed(add_ln15_reg_551));
    empty_116_fu_407_p2 <= std_logic_vector(unsigned(tmp1_fu_402_p2) + unsigned(empty_111_reg_608));
    empty_117_fu_458_p2 <= std_logic_vector(shift_right(unsigned(reshape_data_addr_32_read_reg_656),to_integer(unsigned('0' & p_cast11_fu_454_p1(31-1 downto 0)))));
    empty_118_fu_463_p1 <= empty_117_fu_458_p2(8 - 1 downto 0);
    empty_119_fu_412_p2 <= std_logic_vector(unsigned(residual_loop_index_fu_118) + unsigned(empty_111_reg_608));
    empty_120_fu_474_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & p_cast12_fu_471_p1(31-1 downto 0)))));
    empty_121_fu_492_p2 <= std_logic_vector(shift_left(unsigned(p_cast6_cast_fu_467_p1),to_integer(unsigned('0' & p_cast13_fu_488_p1(31-1 downto 0)))));
    empty_fu_316_p1 <= sub_ln15_fu_306_p2(10 - 1 downto 0);
    exitcond5_fu_362_p2 <= "1" when (residual_loop_index_fu_118 = trunc_ln15_1_reg_556) else "0";
    exitcond6_fu_327_p2 <= "1" when (loop_index_fu_110 = ram_depth_reg_539) else "0";
    icmp_ln17_fu_511_p2 <= "1" when (i_fu_122 = ram_depth_reg_539) else "0";

    input_data_addr_c_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, input_data_addr_c_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_data_addr_c_blk_n <= input_data_addr_c_full_n;
        else 
            input_data_addr_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    input_data_addr_c_din <= input_data_addr;

    input_data_addr_c_write_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, input_data_addr_c_full_n, ROWS_c9_full_n, COLS_c10_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_const_logic_0 = COLS_c10_full_n) or (ap_const_logic_0 = ROWS_c9_full_n) or (real_start = ap_const_logic_0) or (input_data_addr_c_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            input_data_addr_c_write <= ap_const_logic_1;
        else 
            input_data_addr_c_write <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state22, icmp_ln17_fu_511_p2)
    begin
        if (((icmp_ln17_fu_511_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    loop_index_cast_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loop_index_fu_110),64));

    m_axi_reshape_data_ARADDR_assign_proc : process(m_axi_reshape_data_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state13, p_cast_cast_fu_290_p1, p_cast4_cast_fu_437_p1)
    begin
        if ((m_axi_reshape_data_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                m_axi_reshape_data_ARADDR <= p_cast4_cast_fu_437_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                m_axi_reshape_data_ARADDR <= p_cast_cast_fu_290_p1;
            else 
                m_axi_reshape_data_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_reshape_data_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_reshape_data_ARBURST <= ap_const_lv2_0;
    m_axi_reshape_data_ARCACHE <= ap_const_lv4_0;
    m_axi_reshape_data_ARID <= ap_const_lv1_0;

    m_axi_reshape_data_ARLEN_assign_proc : process(m_axi_reshape_data_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state13, zext_ln13_fu_286_p1)
    begin
        if ((m_axi_reshape_data_ARREADY = ap_const_logic_1)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                m_axi_reshape_data_ARLEN <= ap_const_lv32_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                m_axi_reshape_data_ARLEN <= zext_ln13_fu_286_p1;
            else 
                m_axi_reshape_data_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_reshape_data_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_reshape_data_ARLOCK <= ap_const_lv2_0;
    m_axi_reshape_data_ARPROT <= ap_const_lv3_0;
    m_axi_reshape_data_ARQOS <= ap_const_lv4_0;
    m_axi_reshape_data_ARREGION <= ap_const_lv4_0;
    m_axi_reshape_data_ARSIZE <= ap_const_lv3_0;
    m_axi_reshape_data_ARUSER <= ap_const_lv1_0;

    m_axi_reshape_data_ARVALID_assign_proc : process(m_axi_reshape_data_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state13)
    begin
        if ((((m_axi_reshape_data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((m_axi_reshape_data_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            m_axi_reshape_data_ARVALID <= ap_const_logic_1;
        else 
            m_axi_reshape_data_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_reshape_data_AWADDR <= ap_const_lv64_0;
    m_axi_reshape_data_AWBURST <= ap_const_lv2_0;
    m_axi_reshape_data_AWCACHE <= ap_const_lv4_0;
    m_axi_reshape_data_AWID <= ap_const_lv1_0;
    m_axi_reshape_data_AWLEN <= ap_const_lv32_0;
    m_axi_reshape_data_AWLOCK <= ap_const_lv2_0;
    m_axi_reshape_data_AWPROT <= ap_const_lv3_0;
    m_axi_reshape_data_AWQOS <= ap_const_lv4_0;
    m_axi_reshape_data_AWREGION <= ap_const_lv4_0;
    m_axi_reshape_data_AWSIZE <= ap_const_lv3_0;
    m_axi_reshape_data_AWUSER <= ap_const_lv1_0;
    m_axi_reshape_data_AWVALID <= ap_const_logic_0;
    m_axi_reshape_data_BREADY <= ap_const_logic_0;

    m_axi_reshape_data_RREADY_assign_proc : process(m_axi_reshape_data_RVALID, ap_CS_fsm_state10, ap_CS_fsm_state20)
    begin
        if ((((m_axi_reshape_data_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((m_axi_reshape_data_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10)))) then 
            m_axi_reshape_data_RREADY <= ap_const_logic_1;
        else 
            m_axi_reshape_data_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_reshape_data_WDATA <= ap_const_lv256_lc_1;
    m_axi_reshape_data_WID <= ap_const_lv1_0;
    m_axi_reshape_data_WLAST <= ap_const_logic_0;
    m_axi_reshape_data_WSTRB <= ap_const_lv32_0;
    m_axi_reshape_data_WUSER <= ap_const_lv1_0;
    m_axi_reshape_data_WVALID <= ap_const_logic_0;
    p_cast11_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_447_p3),256));
    p_cast12_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_119_reg_632),32));
    p_cast13_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_481_p3),256));
        p_cast4_cast_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast4_reg_622),64));

    p_cast6_cast_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_118_fu_463_p1),256));
    p_cast8_cast_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_reg_638),64));
        p_cast_cast_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast_reg_562),64));


    ram_address0_assign_proc : process(loop_index_cast_reg_593, ap_CS_fsm_state22, ap_CS_fsm_state11, p_cast8_cast_fu_499_p1, ap_CS_fsm_state21, zext_ln17_fu_506_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ram_address0 <= zext_ln17_fu_506_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            ram_address0 <= p_cast8_cast_fu_499_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ram_address0 <= loop_index_cast_reg_593(5 - 1 downto 0);
        else 
            ram_address0 <= "XXXXX";
        end if; 
    end process;


    ram_ce0_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state11, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            ram_ce0 <= ap_const_logic_1;
        else 
            ram_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ram_d0_assign_proc : process(reshape_data_addr_read_reg_614, ap_CS_fsm_state11, ap_CS_fsm_state21, empty_121_fu_492_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            ram_d0 <= empty_121_fu_492_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ram_d0 <= reshape_data_addr_read_reg_614;
        else 
            ram_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ram_we0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state21, empty_120_fu_474_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            ram_we0 <= empty_120_fu_474_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ram_we0 <= ap_const_lv32_FFFFFFFF;
        else 
            ram_we0 <= ap_const_lv32_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    reshape_data_blk_n_AR_assign_proc : process(m_axi_reshape_data_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            reshape_data_blk_n_AR <= m_axi_reshape_data_ARREADY;
        else 
            reshape_data_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    reshape_data_blk_n_R_assign_proc : process(m_axi_reshape_data_RVALID, ap_CS_fsm_state10, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            reshape_data_blk_n_R <= m_axi_reshape_data_RVALID;
        else 
            reshape_data_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    residual_loop_index_cast6_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(residual_loop_index_fu_118),34));
    residual_loop_index_cast_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(residual_loop_index_fu_118),10));
    shl_ln_fu_245_p3 <= (input_data_addr & ap_const_lv5_0);
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

        sub_ln15_cast5_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln15_fu_306_p2),34));

    sub_ln15_fu_306_p2 <= std_logic_vector(unsigned(zext_ln15_1_fu_300_p1) - unsigned(zext_ln15_2_fu_303_p1));
    tmp1_fu_402_p2 <= std_logic_vector(unsigned(trunc_ln15_reg_546) + unsigned(residual_loop_index_fu_118));
    tmp_31_fu_481_p3 <= (empty_119_reg_632 & ap_const_lv3_0);
        tmp_cast_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_378_p2),64));

    tmp_fu_378_p2 <= std_logic_vector(signed(sub_ln15_cast5_reg_583) + signed(residual_loop_index_cast6_fu_354_p1));
    tmp_s_fu_447_p3 <= (empty_116_reg_627 & ap_const_lv3_0);
    trunc_ln15_1_fu_267_p1 <= mul_ln13_fu_229_p2(5 - 1 downto 0);
    trunc_ln15_fu_257_p1 <= inputs(5 - 1 downto 0);
    zext_ln13_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ram_depth_reg_539),32));
    zext_ln15_1_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln13_reg_534),33));
    zext_ln15_2_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln15_1_reg_556),33));
    zext_ln15_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_245_p3),64));
    zext_ln17_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_122),64));
end behav;
