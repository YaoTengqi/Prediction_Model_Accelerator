-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity layernorm_p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    outputs_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    outputs_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    outputs_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    outputs_empty_n : IN STD_LOGIC;
    outputs_read : OUT STD_LOGIC;
    addr_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    addr_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    addr_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    addr_empty_n : IN STD_LOGIC;
    addr_read : OUT STD_LOGIC;
    m_axi_ln_data_AWVALID : OUT STD_LOGIC;
    m_axi_ln_data_AWREADY : IN STD_LOGIC;
    m_axi_ln_data_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_ln_data_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ln_data_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ln_data_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ln_data_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ln_data_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ln_data_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ln_data_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ln_data_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ln_data_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ln_data_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ln_data_WVALID : OUT STD_LOGIC;
    m_axi_ln_data_WREADY : IN STD_LOGIC;
    m_axi_ln_data_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    m_axi_ln_data_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ln_data_WLAST : OUT STD_LOGIC;
    m_axi_ln_data_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ln_data_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ln_data_ARVALID : OUT STD_LOGIC;
    m_axi_ln_data_ARREADY : IN STD_LOGIC;
    m_axi_ln_data_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_ln_data_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ln_data_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_ln_data_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ln_data_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ln_data_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ln_data_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ln_data_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ln_data_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ln_data_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ln_data_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ln_data_RVALID : IN STD_LOGIC;
    m_axi_ln_data_RREADY : OUT STD_LOGIC;
    m_axi_ln_data_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
    m_axi_ln_data_RLAST : IN STD_LOGIC;
    m_axi_ln_data_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ln_data_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
    m_axi_ln_data_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ln_data_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ln_data_BVALID : IN STD_LOGIC;
    m_axi_ln_data_BREADY : OUT STD_LOGIC;
    m_axi_ln_data_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ln_data_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_ln_data_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    store_temp10_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    store_temp10_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    store_temp10_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    store_temp10_empty_n : IN STD_LOGIC;
    store_temp10_read : OUT STD_LOGIC;
    done : OUT STD_LOGIC_VECTOR (31 downto 0);
    done_ap_vld : OUT STD_LOGIC );
end;


architecture behav of layernorm_p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln293_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_phi_mux_do_init_phi_fu_146_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal do_init_reg_142 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_io : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter34 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter35 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter36 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter37 : BOOLEAN;
    signal ap_block_state40_pp0_stage0_iter38 : BOOLEAN;
    signal icmp_ln293_reg_272 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter38_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state41_pp0_stage0_iter39 : BOOLEAN;
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal addr_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ln_data_blk_n_W : STD_LOGIC;
    signal ln_data_blk_n_B : STD_LOGIC;
    signal ln_data_blk_n_AW : STD_LOGIC;
    signal outputs_blk_n : STD_LOGIC;
    signal store_temp10_blk_n : STD_LOGIC;
    signal j1_reg_158 : STD_LOGIC_VECTOR (8 downto 0);
    signal ln_data_addr_rewind_idx_reg_172 : STD_LOGIC_VECTOR (63 downto 0);
    signal ln_data_addr_phi_idx_reg_186 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_198_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_267 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln293_reg_272_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln293_reg_272_pp0_iter37_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln293_fu_248_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln293_reg_276 : STD_LOGIC_VECTOR (63 downto 0);
    signal l_x_reg_282 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_phi_mux_j1_phi_fu_162_p6 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_ln_data_addr_rewind_idx_phi_fu_176_p6 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter0_ln_data_addr_phi_idx_reg_186 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter1_ln_data_addr_phi_idx_reg_186 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter2_ln_data_addr_phi_idx_reg_186 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal done_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal tmp_fu_210_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal and_ln_fu_220_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln293_fu_228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln293_fu_232_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_238_p4 : STD_LOGIC_VECTOR (58 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_idle_pp0_0to38 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_201 : BOOLEAN;
    signal ap_condition_472 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter39 = ap_const_logic_1) and (icmp_ln293_reg_272_pp0_iter38_reg = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    done_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                done_preg(0) <= '0';
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter39 = ap_const_logic_1) and (icmp_ln293_reg_272_pp0_iter38_reg = ap_const_lv1_1))) then 
                    done_preg(0) <= '1';
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter2_ln_data_addr_phi_idx_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_472)) then
                if ((ap_phi_mux_do_init_phi_fu_146_p6 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter2_ln_data_addr_phi_idx_reg_186 <= sext_ln293_fu_248_p1;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_ln_data_addr_phi_idx_reg_186 <= ap_phi_reg_pp0_iter1_ln_data_addr_phi_idx_reg_186;
                end if;
            end if; 
        end if;
    end process;

    do_init_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln293_reg_272_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                do_init_reg_142 <= ap_const_lv1_0;
            elsif ((((icmp_ln293_reg_272_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                do_init_reg_142 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    j1_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln293_reg_272 = ap_const_lv1_0))) then 
                j1_reg_158 <= j_reg_267;
            elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln293_reg_272 = ap_const_lv1_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                j1_reg_158 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    ln_data_addr_phi_idx_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                if ((do_init_reg_142 = ap_const_lv1_0)) then 
                    ln_data_addr_phi_idx_reg_186 <= ap_phi_mux_ln_data_addr_rewind_idx_phi_fu_176_p6;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ln_data_addr_phi_idx_reg_186 <= ap_phi_reg_pp0_iter2_ln_data_addr_phi_idx_reg_186;
                end if;
            end if; 
        end if;
    end process;

    ln_data_addr_rewind_idx_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln293_reg_272_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                ln_data_addr_rewind_idx_reg_172 <= ln_data_addr_phi_idx_reg_186;
            elsif ((((icmp_ln293_reg_272_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                ln_data_addr_rewind_idx_reg_172 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter1_ln_data_addr_phi_idx_reg_186 <= ap_phi_reg_pp0_iter0_ln_data_addr_phi_idx_reg_186;
                j_reg_267 <= j_fu_198_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln293_reg_272 <= icmp_ln293_fu_204_p2;
                icmp_ln293_reg_272_pp0_iter1_reg <= icmp_ln293_reg_272;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln293_reg_272_pp0_iter10_reg <= icmp_ln293_reg_272_pp0_iter9_reg;
                icmp_ln293_reg_272_pp0_iter11_reg <= icmp_ln293_reg_272_pp0_iter10_reg;
                icmp_ln293_reg_272_pp0_iter12_reg <= icmp_ln293_reg_272_pp0_iter11_reg;
                icmp_ln293_reg_272_pp0_iter13_reg <= icmp_ln293_reg_272_pp0_iter12_reg;
                icmp_ln293_reg_272_pp0_iter14_reg <= icmp_ln293_reg_272_pp0_iter13_reg;
                icmp_ln293_reg_272_pp0_iter15_reg <= icmp_ln293_reg_272_pp0_iter14_reg;
                icmp_ln293_reg_272_pp0_iter16_reg <= icmp_ln293_reg_272_pp0_iter15_reg;
                icmp_ln293_reg_272_pp0_iter17_reg <= icmp_ln293_reg_272_pp0_iter16_reg;
                icmp_ln293_reg_272_pp0_iter18_reg <= icmp_ln293_reg_272_pp0_iter17_reg;
                icmp_ln293_reg_272_pp0_iter19_reg <= icmp_ln293_reg_272_pp0_iter18_reg;
                icmp_ln293_reg_272_pp0_iter20_reg <= icmp_ln293_reg_272_pp0_iter19_reg;
                icmp_ln293_reg_272_pp0_iter21_reg <= icmp_ln293_reg_272_pp0_iter20_reg;
                icmp_ln293_reg_272_pp0_iter22_reg <= icmp_ln293_reg_272_pp0_iter21_reg;
                icmp_ln293_reg_272_pp0_iter23_reg <= icmp_ln293_reg_272_pp0_iter22_reg;
                icmp_ln293_reg_272_pp0_iter24_reg <= icmp_ln293_reg_272_pp0_iter23_reg;
                icmp_ln293_reg_272_pp0_iter25_reg <= icmp_ln293_reg_272_pp0_iter24_reg;
                icmp_ln293_reg_272_pp0_iter26_reg <= icmp_ln293_reg_272_pp0_iter25_reg;
                icmp_ln293_reg_272_pp0_iter27_reg <= icmp_ln293_reg_272_pp0_iter26_reg;
                icmp_ln293_reg_272_pp0_iter28_reg <= icmp_ln293_reg_272_pp0_iter27_reg;
                icmp_ln293_reg_272_pp0_iter29_reg <= icmp_ln293_reg_272_pp0_iter28_reg;
                icmp_ln293_reg_272_pp0_iter2_reg <= icmp_ln293_reg_272_pp0_iter1_reg;
                icmp_ln293_reg_272_pp0_iter30_reg <= icmp_ln293_reg_272_pp0_iter29_reg;
                icmp_ln293_reg_272_pp0_iter31_reg <= icmp_ln293_reg_272_pp0_iter30_reg;
                icmp_ln293_reg_272_pp0_iter32_reg <= icmp_ln293_reg_272_pp0_iter31_reg;
                icmp_ln293_reg_272_pp0_iter33_reg <= icmp_ln293_reg_272_pp0_iter32_reg;
                icmp_ln293_reg_272_pp0_iter34_reg <= icmp_ln293_reg_272_pp0_iter33_reg;
                icmp_ln293_reg_272_pp0_iter35_reg <= icmp_ln293_reg_272_pp0_iter34_reg;
                icmp_ln293_reg_272_pp0_iter36_reg <= icmp_ln293_reg_272_pp0_iter35_reg;
                icmp_ln293_reg_272_pp0_iter37_reg <= icmp_ln293_reg_272_pp0_iter36_reg;
                icmp_ln293_reg_272_pp0_iter38_reg <= icmp_ln293_reg_272_pp0_iter37_reg;
                icmp_ln293_reg_272_pp0_iter3_reg <= icmp_ln293_reg_272_pp0_iter2_reg;
                icmp_ln293_reg_272_pp0_iter4_reg <= icmp_ln293_reg_272_pp0_iter3_reg;
                icmp_ln293_reg_272_pp0_iter5_reg <= icmp_ln293_reg_272_pp0_iter4_reg;
                icmp_ln293_reg_272_pp0_iter6_reg <= icmp_ln293_reg_272_pp0_iter5_reg;
                icmp_ln293_reg_272_pp0_iter7_reg <= icmp_ln293_reg_272_pp0_iter6_reg;
                icmp_ln293_reg_272_pp0_iter8_reg <= icmp_ln293_reg_272_pp0_iter7_reg;
                icmp_ln293_reg_272_pp0_iter9_reg <= icmp_ln293_reg_272_pp0_iter8_reg;
                l_x_reg_282 <= store_temp10_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_do_init_phi_fu_146_p6 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sext_ln293_reg_276 <= sext_ln293_fu_248_p1;
            end if;
        end if;
    end process;
    done_preg(31 downto 1) <= "0000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_reset_idle_pp0 = ap_const_logic_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln293_fu_232_p2 <= std_logic_vector(unsigned(outputs_dout) + unsigned(zext_ln293_fu_228_p1));

    addr_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_phi_mux_do_init_phi_fu_146_p6, addr_empty_n, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_phi_mux_do_init_phi_fu_146_p6 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            addr_blk_n <= addr_empty_n;
        else 
            addr_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    addr_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_phi_mux_do_init_phi_fu_146_p6, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_phi_mux_do_init_phi_fu_146_p6 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            addr_read <= ap_const_logic_1;
        else 
            addr_read <= ap_const_logic_0;
        end if; 
    end process;

    and_ln_fu_220_p3 <= (tmp_fu_210_p4 & ap_const_lv5_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_done_reg, outputs_empty_n, ap_phi_mux_do_init_phi_fu_146_p6, addr_empty_n, ap_enable_reg_pp0_iter1, m_axi_ln_data_BVALID, store_temp10_empty_n, ap_enable_reg_pp0_iter2, icmp_ln293_reg_272_pp0_iter38_reg, ap_enable_reg_pp0_iter39)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_phi_mux_do_init_phi_fu_146_p6 = ap_const_lv1_1) and (ap_const_logic_0 = addr_empty_n)) or ((ap_phi_mux_do_init_phi_fu_146_p6 = ap_const_lv1_1) and (outputs_empty_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter39 = ap_const_logic_1) and (icmp_ln293_reg_272_pp0_iter38_reg = ap_const_lv1_1) and (m_axi_ln_data_BVALID = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (store_temp10_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_done_reg, outputs_empty_n, ap_phi_mux_do_init_phi_fu_146_p6, addr_empty_n, ap_enable_reg_pp0_iter1, m_axi_ln_data_WREADY, m_axi_ln_data_BVALID, store_temp10_empty_n, ap_block_state4_io, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, icmp_ln293_reg_272_pp0_iter38_reg, ap_enable_reg_pp0_iter39)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_phi_mux_do_init_phi_fu_146_p6 = ap_const_lv1_1) and (ap_const_logic_0 = addr_empty_n)) or ((ap_phi_mux_do_init_phi_fu_146_p6 = ap_const_lv1_1) and (outputs_empty_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter39 = ap_const_logic_1) and (icmp_ln293_reg_272_pp0_iter38_reg = ap_const_lv1_1) and (m_axi_ln_data_BVALID = ap_const_logic_0)) or ((m_axi_ln_data_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state4_io) or (store_temp10_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_done_reg, outputs_empty_n, ap_phi_mux_do_init_phi_fu_146_p6, addr_empty_n, ap_enable_reg_pp0_iter1, m_axi_ln_data_WREADY, m_axi_ln_data_BVALID, store_temp10_empty_n, ap_block_state4_io, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, icmp_ln293_reg_272_pp0_iter38_reg, ap_enable_reg_pp0_iter39)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_phi_mux_do_init_phi_fu_146_p6 = ap_const_lv1_1) and (ap_const_logic_0 = addr_empty_n)) or ((ap_phi_mux_do_init_phi_fu_146_p6 = ap_const_lv1_1) and (outputs_empty_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter39 = ap_const_logic_1) and (icmp_ln293_reg_272_pp0_iter38_reg = ap_const_lv1_1) and (m_axi_ln_data_BVALID = ap_const_logic_0)) or ((m_axi_ln_data_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state4_io) or (store_temp10_empty_n = ap_const_logic_0))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(outputs_empty_n, ap_phi_mux_do_init_phi_fu_146_p6, addr_empty_n)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((ap_phi_mux_do_init_phi_fu_146_p6 = ap_const_lv1_1) and (ap_const_logic_0 = addr_empty_n)) or ((ap_phi_mux_do_init_phi_fu_146_p6 = ap_const_lv1_1) and (outputs_empty_n = ap_const_logic_0)));
    end process;

        ap_block_state40_pp0_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state41_pp0_stage0_iter39_assign_proc : process(m_axi_ln_data_BVALID, icmp_ln293_reg_272_pp0_iter38_reg)
    begin
                ap_block_state41_pp0_stage0_iter39 <= ((icmp_ln293_reg_272_pp0_iter38_reg = ap_const_lv1_1) and (m_axi_ln_data_BVALID = ap_const_logic_0));
    end process;


    ap_block_state4_io_assign_proc : process(m_axi_ln_data_AWREADY, do_init_reg_142)
    begin
                ap_block_state4_io <= ((m_axi_ln_data_AWREADY = ap_const_logic_0) and (do_init_reg_142 = ap_const_lv1_1));
    end process;


    ap_block_state4_pp0_stage0_iter2_assign_proc : process(store_temp10_empty_n)
    begin
                ap_block_state4_pp0_stage0_iter2 <= (store_temp10_empty_n = ap_const_logic_0);
    end process;

        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_201_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_201 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_condition_472_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_472 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_done_assign_proc : process(ap_done_reg, icmp_ln293_reg_272_pp0_iter38_reg, ap_enable_reg_pp0_iter39, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter39 = ap_const_logic_1) and (icmp_ln293_reg_272_pp0_iter38_reg = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to38_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0_0to38 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to38 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_do_init_phi_fu_146_p6_assign_proc : process(do_init_reg_142, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, icmp_ln293_reg_272_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
            if ((icmp_ln293_reg_272_pp0_iter1_reg = ap_const_lv1_1)) then 
                ap_phi_mux_do_init_phi_fu_146_p6 <= ap_const_lv1_1;
            elsif ((icmp_ln293_reg_272_pp0_iter1_reg = ap_const_lv1_0)) then 
                ap_phi_mux_do_init_phi_fu_146_p6 <= ap_const_lv1_0;
            else 
                ap_phi_mux_do_init_phi_fu_146_p6 <= do_init_reg_142;
            end if;
        else 
            ap_phi_mux_do_init_phi_fu_146_p6 <= do_init_reg_142;
        end if; 
    end process;


    ap_phi_mux_j1_phi_fu_162_p6_assign_proc : process(icmp_ln293_reg_272, j1_reg_158, j_reg_267, ap_condition_201)
    begin
        if ((ap_const_boolean_1 = ap_condition_201)) then
            if ((icmp_ln293_reg_272 = ap_const_lv1_1)) then 
                ap_phi_mux_j1_phi_fu_162_p6 <= ap_const_lv9_0;
            elsif ((icmp_ln293_reg_272 = ap_const_lv1_0)) then 
                ap_phi_mux_j1_phi_fu_162_p6 <= j_reg_267;
            else 
                ap_phi_mux_j1_phi_fu_162_p6 <= j1_reg_158;
            end if;
        else 
            ap_phi_mux_j1_phi_fu_162_p6 <= j1_reg_158;
        end if; 
    end process;


    ap_phi_mux_ln_data_addr_rewind_idx_phi_fu_176_p6_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, ln_data_addr_rewind_idx_reg_172, ln_data_addr_phi_idx_reg_186, icmp_ln293_reg_272_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
            if ((icmp_ln293_reg_272_pp0_iter2_reg = ap_const_lv1_1)) then 
                ap_phi_mux_ln_data_addr_rewind_idx_phi_fu_176_p6 <= ap_const_lv64_0;
            elsif ((icmp_ln293_reg_272_pp0_iter2_reg = ap_const_lv1_0)) then 
                ap_phi_mux_ln_data_addr_rewind_idx_phi_fu_176_p6 <= ln_data_addr_phi_idx_reg_186;
            else 
                ap_phi_mux_ln_data_addr_rewind_idx_phi_fu_176_p6 <= ln_data_addr_rewind_idx_reg_172;
            end if;
        else 
            ap_phi_mux_ln_data_addr_rewind_idx_phi_fu_176_p6 <= ln_data_addr_rewind_idx_reg_172;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_ln_data_addr_phi_idx_reg_186 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(icmp_ln293_fu_204_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln293_fu_204_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to38)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to38 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    done_assign_proc : process(icmp_ln293_reg_272_pp0_iter38_reg, ap_enable_reg_pp0_iter39, ap_block_pp0_stage0_01001, done_preg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter39 = ap_const_logic_1) and (icmp_ln293_reg_272_pp0_iter38_reg = ap_const_lv1_1))) then 
            done <= ap_const_lv32_1;
        else 
            done <= done_preg;
        end if; 
    end process;


    done_ap_vld_assign_proc : process(icmp_ln293_reg_272_pp0_iter38_reg, ap_enable_reg_pp0_iter39, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter39 = ap_const_logic_1) and (icmp_ln293_reg_272_pp0_iter38_reg = ap_const_lv1_1))) then 
            done_ap_vld <= ap_const_logic_1;
        else 
            done_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln293_fu_204_p2 <= "1" when (ap_phi_mux_j1_phi_fu_162_p6 = ap_const_lv9_1FF) else "0";
    j_fu_198_p2 <= std_logic_vector(unsigned(ap_phi_mux_j1_phi_fu_162_p6) + unsigned(ap_const_lv9_1));

    ln_data_blk_n_AW_assign_proc : process(m_axi_ln_data_AWREADY, do_init_reg_142, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (do_init_reg_142 = ap_const_lv1_1))) then 
            ln_data_blk_n_AW <= m_axi_ln_data_AWREADY;
        else 
            ln_data_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    ln_data_blk_n_B_assign_proc : process(m_axi_ln_data_BVALID, icmp_ln293_reg_272_pp0_iter38_reg, ap_enable_reg_pp0_iter39, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_1) and (icmp_ln293_reg_272_pp0_iter38_reg = ap_const_lv1_1))) then 
            ln_data_blk_n_B <= m_axi_ln_data_BVALID;
        else 
            ln_data_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    ln_data_blk_n_W_assign_proc : process(m_axi_ln_data_WREADY, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ln_data_blk_n_W <= m_axi_ln_data_WREADY;
        else 
            ln_data_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    m_axi_ln_data_ARADDR <= ap_const_lv64_0;
    m_axi_ln_data_ARBURST <= ap_const_lv2_0;
    m_axi_ln_data_ARCACHE <= ap_const_lv4_0;
    m_axi_ln_data_ARID <= ap_const_lv1_0;
    m_axi_ln_data_ARLEN <= ap_const_lv32_0;
    m_axi_ln_data_ARLOCK <= ap_const_lv2_0;
    m_axi_ln_data_ARPROT <= ap_const_lv3_0;
    m_axi_ln_data_ARQOS <= ap_const_lv4_0;
    m_axi_ln_data_ARREGION <= ap_const_lv4_0;
    m_axi_ln_data_ARSIZE <= ap_const_lv3_0;
    m_axi_ln_data_ARUSER <= ap_const_lv1_0;
    m_axi_ln_data_ARVALID <= ap_const_logic_0;
    m_axi_ln_data_AWADDR <= sext_ln293_reg_276;
    m_axi_ln_data_AWBURST <= ap_const_lv2_0;
    m_axi_ln_data_AWCACHE <= ap_const_lv4_0;
    m_axi_ln_data_AWID <= ap_const_lv1_0;
    m_axi_ln_data_AWLEN <= ap_const_lv32_200;
    m_axi_ln_data_AWLOCK <= ap_const_lv2_0;
    m_axi_ln_data_AWPROT <= ap_const_lv3_0;
    m_axi_ln_data_AWQOS <= ap_const_lv4_0;
    m_axi_ln_data_AWREGION <= ap_const_lv4_0;
    m_axi_ln_data_AWSIZE <= ap_const_lv3_0;
    m_axi_ln_data_AWUSER <= ap_const_lv1_0;

    m_axi_ln_data_AWVALID_assign_proc : process(do_init_reg_142, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (do_init_reg_142 = ap_const_lv1_1))) then 
            m_axi_ln_data_AWVALID <= ap_const_logic_1;
        else 
            m_axi_ln_data_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_ln_data_BREADY_assign_proc : process(icmp_ln293_reg_272_pp0_iter38_reg, ap_enable_reg_pp0_iter39, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter39 = ap_const_logic_1) and (icmp_ln293_reg_272_pp0_iter38_reg = ap_const_lv1_1))) then 
            m_axi_ln_data_BREADY <= ap_const_logic_1;
        else 
            m_axi_ln_data_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_ln_data_RREADY <= ap_const_logic_0;
    m_axi_ln_data_WDATA <= l_x_reg_282;
    m_axi_ln_data_WID <= ap_const_lv1_0;
    m_axi_ln_data_WLAST <= ap_const_logic_0;
    m_axi_ln_data_WSTRB <= ap_const_lv32_FFFFFFFF;
    m_axi_ln_data_WUSER <= ap_const_lv1_0;

    m_axi_ln_data_WVALID_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            m_axi_ln_data_WVALID <= ap_const_logic_1;
        else 
            m_axi_ln_data_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    outputs_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, outputs_empty_n, ap_phi_mux_do_init_phi_fu_146_p6, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_phi_mux_do_init_phi_fu_146_p6 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            outputs_blk_n <= outputs_empty_n;
        else 
            outputs_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    outputs_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_phi_mux_do_init_phi_fu_146_p6, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_phi_mux_do_init_phi_fu_146_p6 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            outputs_read <= ap_const_logic_1;
        else 
            outputs_read <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln293_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_238_p4),64));


    store_temp10_blk_n_assign_proc : process(store_temp10_empty_n, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            store_temp10_blk_n <= store_temp10_empty_n;
        else 
            store_temp10_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    store_temp10_read_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            store_temp10_read <= ap_const_logic_1;
        else 
            store_temp10_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_210_p4 <= addr_dout(31 downto 5);
    trunc_ln_fu_238_p4 <= add_ln293_fu_232_p2(63 downto 5);
    zext_ln293_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_220_p3),64));
end behav;
