-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity layernorm_p_anonymous_namespace_StdDev_ap_int_8_float_5u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cols_log_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    cols_log_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    cols_log_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    cols_log_empty_n : IN STD_LOGIC;
    cols_log_read : OUT STD_LOGIC;
    rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    rows_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    rows_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    rows_empty_n : IN STD_LOGIC;
    rows_read : OUT STD_LOGIC;
    data_copy_b2_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    data_copy_b2_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    data_copy_b2_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    data_copy_b2_empty_n : IN STD_LOGIC;
    data_copy_b2_read : OUT STD_LOGIC;
    mean_a6_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    mean_a6_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    mean_a6_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    mean_a6_empty_n : IN STD_LOGIC;
    mean_a6_read : OUT STD_LOGIC;
    stddev8_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    stddev8_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    stddev8_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    stddev8_full_n : IN STD_LOGIC;
    stddev8_write : OUT STD_LOGIC;
    rows_c17_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    rows_c17_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    rows_c17_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    rows_c17_full_n : IN STD_LOGIC;
    rows_c17_write : OUT STD_LOGIC;
    cols_log_c20_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    cols_log_c20_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    cols_log_c20_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    cols_log_c20_full_n : IN STD_LOGIC;
    cols_log_c20_write : OUT STD_LOGIC );
end;


architecture behav of layernorm_p_anonymous_namespace_StdDev_ap_int_8_float_5u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (60 downto 0) := "0000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (60 downto 0) := "0000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (60 downto 0) := "0000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (60 downto 0) := "0000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (60 downto 0) := "0000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (60 downto 0) := "0000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (60 downto 0) := "0001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (60 downto 0) := "0010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (60 downto 0) := "0100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (60 downto 0) := "1000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv64_3EE4F8B580000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111011100100111110001011010110000000000000000000000000000000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_97 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010111";
    constant ap_const_lv32_98 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_B7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110111";
    constant ap_const_lv32_B8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_C7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000111";
    constant ap_const_lv32_C8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_D7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010111";
    constant ap_const_lv32_D8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_E7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100111";
    constant ap_const_lv32_E8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101000";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_F7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110111";
    constant ap_const_lv32_F8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv27_1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cols_log_blk_n : STD_LOGIC;
    signal rows_blk_n : STD_LOGIC;
    signal data_copy_b2_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal mean_a6_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal stddev8_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal icmp_ln160_1_reg_1250 : STD_LOGIC_VECTOR (0 downto 0);
    signal rows_c17_blk_n : STD_LOGIC;
    signal cols_log_c20_blk_n : STD_LOGIC;
    signal j4_reg_256 : STD_LOGIC_VECTOR (26 downto 0);
    signal diff_sum2_reg_267 : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_log_read_reg_1223 : STD_LOGIC_VECTOR (31 downto 0);
    signal rows_read_reg_1228 : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_fu_314_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln_reg_1239 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp1_reg_1245 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln160_1_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mean_a6_read_reg_1254 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln165_1_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_1_reg_1259 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_340_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_1263 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_val_V_1_reg_1269 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state7_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal l_val_V_3_reg_1274 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_5_reg_1279 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_7_reg_1284 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_9_reg_1289 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_11_reg_1294 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_13_reg_1299 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_15_reg_1304 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_17_reg_1309 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_19_reg_1314 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_21_reg_1319 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_23_reg_1324 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_25_reg_1329 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_27_reg_1334 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_29_reg_1339 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_31_reg_1344 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln1496_1_fu_664_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1496_1_reg_1349 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_fu_727_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal j_reg_1369 : STD_LOGIC_VECTOR (26 downto 0);
    signal icmp_ln165_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1374 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1374_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1374_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_1374_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_999_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal grp_fu_1005_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1011_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1017_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1023_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1029_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1035_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1041_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1047_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1053_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1059_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1065_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1071_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1077_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1083_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1089_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal diff_sum_fu_984_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal diff_sum_reg_1458 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal icmp_ln160_fu_990_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_reg_1464 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_305_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_reg_1468 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_298_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal div_reg_1473 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal grp_fu_293_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp_reg_1478 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal grp_fu_309_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_1483 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal k6_reg_245 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state65 : BOOLEAN;
    signal ap_phi_mux_j4_phi_fu_260_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_phi_mux_diff_sum3_phi_fu_282_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal diff_sum3_reg_278 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal l_val_V_fu_346_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_2_fu_360_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_4_fu_380_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_6_fu_400_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_8_fu_420_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_10_fu_440_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_12_fu_460_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_14_fu_480_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_16_fu_500_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_18_fu_520_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_20_fu_540_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_22_fu_560_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_24_fu_580_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_26_fu_600_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_28_fu_620_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_val_V_30_fu_640_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1095_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1103_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln173_1_fu_789_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln173_fu_786_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln173_2_fu_792_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1111_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1119_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln173_4_fu_805_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln173_3_fu_802_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln173_5_fu_808_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln173_5_fu_814_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln173_2_fu_798_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln173_6_fu_818_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_1127_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1135_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln173_8_fu_831_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln173_7_fu_828_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln173_9_fu_834_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1143_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1151_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln173_11_fu_847_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln173_10_fu_844_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln173_12_fu_850_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln173_12_fu_856_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln173_9_fu_840_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln173_13_fu_860_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln173_13_fu_866_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln173_6_fu_824_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln173_14_fu_870_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1159_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1167_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln173_16_fu_883_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln173_15_fu_880_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln173_17_fu_886_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1175_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1183_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln173_19_fu_899_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln173_18_fu_896_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln173_20_fu_902_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln173_20_fu_908_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln173_17_fu_892_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln173_21_fu_912_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_1191_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1199_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln173_23_fu_925_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln173_22_fu_922_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln173_24_fu_928_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1207_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1215_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln173_26_fu_941_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln173_25_fu_938_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln173_27_fu_944_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln173_27_fu_950_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln173_24_fu_934_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln173_28_fu_954_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln173_28_fu_960_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln173_21_fu_918_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal add_ln173_29_fu_964_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln173_29_fu_970_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln173_14_fu_876_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln173_30_fu_974_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln173_30_fu_980_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_290_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_999_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1005_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1011_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1017_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1023_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1029_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1035_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1041_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1047_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1053_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1059_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1065_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1071_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1077_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1083_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1089_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1095_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1103_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1111_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1119_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1127_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1135_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1143_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1151_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1159_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1167_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1175_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1183_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1191_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1199_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1207_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1215_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_290_ce : STD_LOGIC;
    signal grp_fu_999_ce : STD_LOGIC;
    signal grp_fu_1005_ce : STD_LOGIC;
    signal grp_fu_1011_ce : STD_LOGIC;
    signal grp_fu_1017_ce : STD_LOGIC;
    signal grp_fu_1023_ce : STD_LOGIC;
    signal grp_fu_1029_ce : STD_LOGIC;
    signal grp_fu_1035_ce : STD_LOGIC;
    signal grp_fu_1041_ce : STD_LOGIC;
    signal grp_fu_1047_ce : STD_LOGIC;
    signal grp_fu_1053_ce : STD_LOGIC;
    signal grp_fu_1059_ce : STD_LOGIC;
    signal grp_fu_1065_ce : STD_LOGIC;
    signal grp_fu_1071_ce : STD_LOGIC;
    signal grp_fu_1077_ce : STD_LOGIC;
    signal grp_fu_1083_ce : STD_LOGIC;
    signal grp_fu_1089_ce : STD_LOGIC;
    signal grp_fu_1095_ce : STD_LOGIC;
    signal grp_fu_1103_ce : STD_LOGIC;
    signal grp_fu_1111_ce : STD_LOGIC;
    signal grp_fu_1119_ce : STD_LOGIC;
    signal grp_fu_1127_ce : STD_LOGIC;
    signal grp_fu_1135_ce : STD_LOGIC;
    signal grp_fu_1143_ce : STD_LOGIC;
    signal grp_fu_1151_ce : STD_LOGIC;
    signal grp_fu_1159_ce : STD_LOGIC;
    signal grp_fu_1167_ce : STD_LOGIC;
    signal grp_fu_1175_ce : STD_LOGIC;
    signal grp_fu_1183_ce : STD_LOGIC;
    signal grp_fu_1191_ce : STD_LOGIC;
    signal grp_fu_1199_ce : STD_LOGIC;
    signal grp_fu_1207_ce : STD_LOGIC;
    signal grp_fu_1215_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (60 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component layernorm_fptrunc_64ns_32_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component layernorm_dadd_64ns_64ns_64_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component layernorm_ddiv_64ns_64ns_64_22_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component layernorm_uitodp_32ns_64_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component layernorm_sitodp_32ns_64_4_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component layernorm_dsqrt_64ns_64ns_64_21_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component layernorm_am_submul_8s_8s_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component layernorm_ama_submuladd_8s_8s_18s_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    fptrunc_64ns_32_2_no_dsp_1_U67 : component layernorm_fptrunc_64ns_32_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_reg_1483,
        ce => grp_fu_290_ce,
        dout => grp_fu_290_p1);

    dadd_64ns_64ns_64_5_full_dsp_1_U68 : component layernorm_dadd_64ns_64ns_64_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => div_reg_1473,
        din1 => ap_const_lv64_3EE4F8B580000000,
        ce => ap_const_logic_1,
        dout => grp_fu_293_p2);

    ddiv_64ns_64ns_64_22_no_dsp_1_U69 : component layernorm_ddiv_64ns_64ns_64_22_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 22,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_reg_1468,
        din1 => temp1_reg_1245,
        ce => ap_const_logic_1,
        dout => grp_fu_298_p2);

    uitodp_32ns_64_4_no_dsp_1_U70 : component layernorm_uitodp_32ns_64_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => cols_fu_314_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_302_p1);

    sitodp_32ns_64_4_no_dsp_1_U71 : component layernorm_sitodp_32ns_64_4_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_mux_diff_sum3_phi_fu_282_p4,
        ce => ap_const_logic_1,
        dout => grp_fu_305_p1);

    dsqrt_64ns_64ns_64_21_no_dsp_1_U72 : component layernorm_dsqrt_64ns_64ns_64_21_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 21,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_0,
        din1 => temp_reg_1478,
        ce => ap_const_logic_1,
        dout => grp_fu_309_p2);

    am_submul_8s_8s_18_4_1_U73 : component layernorm_am_submul_8s_8s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => l_val_V_fu_346_p1,
        din1 => grp_fu_999_p1,
        ce => grp_fu_999_ce,
        dout => grp_fu_999_p2);

    am_submul_8s_8s_18_4_1_U74 : component layernorm_am_submul_8s_8s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => l_val_V_2_fu_360_p4,
        din1 => grp_fu_1005_p1,
        ce => grp_fu_1005_ce,
        dout => grp_fu_1005_p2);

    am_submul_8s_8s_18_4_1_U75 : component layernorm_am_submul_8s_8s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => l_val_V_4_fu_380_p4,
        din1 => grp_fu_1011_p1,
        ce => grp_fu_1011_ce,
        dout => grp_fu_1011_p2);

    am_submul_8s_8s_18_4_1_U76 : component layernorm_am_submul_8s_8s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => l_val_V_6_fu_400_p4,
        din1 => grp_fu_1017_p1,
        ce => grp_fu_1017_ce,
        dout => grp_fu_1017_p2);

    am_submul_8s_8s_18_4_1_U77 : component layernorm_am_submul_8s_8s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => l_val_V_8_fu_420_p4,
        din1 => grp_fu_1023_p1,
        ce => grp_fu_1023_ce,
        dout => grp_fu_1023_p2);

    am_submul_8s_8s_18_4_1_U78 : component layernorm_am_submul_8s_8s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => l_val_V_10_fu_440_p4,
        din1 => grp_fu_1029_p1,
        ce => grp_fu_1029_ce,
        dout => grp_fu_1029_p2);

    am_submul_8s_8s_18_4_1_U79 : component layernorm_am_submul_8s_8s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => l_val_V_12_fu_460_p4,
        din1 => grp_fu_1035_p1,
        ce => grp_fu_1035_ce,
        dout => grp_fu_1035_p2);

    am_submul_8s_8s_18_4_1_U80 : component layernorm_am_submul_8s_8s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => l_val_V_14_fu_480_p4,
        din1 => grp_fu_1041_p1,
        ce => grp_fu_1041_ce,
        dout => grp_fu_1041_p2);

    am_submul_8s_8s_18_4_1_U81 : component layernorm_am_submul_8s_8s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => l_val_V_16_fu_500_p4,
        din1 => grp_fu_1047_p1,
        ce => grp_fu_1047_ce,
        dout => grp_fu_1047_p2);

    am_submul_8s_8s_18_4_1_U82 : component layernorm_am_submul_8s_8s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => l_val_V_18_fu_520_p4,
        din1 => grp_fu_1053_p1,
        ce => grp_fu_1053_ce,
        dout => grp_fu_1053_p2);

    am_submul_8s_8s_18_4_1_U83 : component layernorm_am_submul_8s_8s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => l_val_V_20_fu_540_p4,
        din1 => grp_fu_1059_p1,
        ce => grp_fu_1059_ce,
        dout => grp_fu_1059_p2);

    am_submul_8s_8s_18_4_1_U84 : component layernorm_am_submul_8s_8s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => l_val_V_22_fu_560_p4,
        din1 => grp_fu_1065_p1,
        ce => grp_fu_1065_ce,
        dout => grp_fu_1065_p2);

    am_submul_8s_8s_18_4_1_U85 : component layernorm_am_submul_8s_8s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => l_val_V_24_fu_580_p4,
        din1 => grp_fu_1071_p1,
        ce => grp_fu_1071_ce,
        dout => grp_fu_1071_p2);

    am_submul_8s_8s_18_4_1_U86 : component layernorm_am_submul_8s_8s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => l_val_V_26_fu_600_p4,
        din1 => grp_fu_1077_p1,
        ce => grp_fu_1077_ce,
        dout => grp_fu_1077_p2);

    am_submul_8s_8s_18_4_1_U87 : component layernorm_am_submul_8s_8s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => l_val_V_28_fu_620_p4,
        din1 => grp_fu_1083_p1,
        ce => grp_fu_1083_ce,
        dout => grp_fu_1083_p2);

    am_submul_8s_8s_18_4_1_U88 : component layernorm_am_submul_8s_8s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => l_val_V_30_fu_640_p4,
        din1 => grp_fu_1089_p1,
        ce => grp_fu_1089_ce,
        dout => grp_fu_1089_p2);

    ama_submuladd_8s_8s_18s_18_4_1_U89 : component layernorm_ama_submuladd_8s_8s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => l_val_V_1_reg_1269,
        din1 => grp_fu_1095_p1,
        din2 => grp_fu_999_p2,
        ce => grp_fu_1095_ce,
        dout => grp_fu_1095_p3);

    ama_submuladd_8s_8s_18s_18_4_1_U90 : component layernorm_ama_submuladd_8s_8s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => l_val_V_3_reg_1274,
        din1 => grp_fu_1103_p1,
        din2 => grp_fu_1005_p2,
        ce => grp_fu_1103_ce,
        dout => grp_fu_1103_p3);

    ama_submuladd_8s_8s_18s_18_4_1_U91 : component layernorm_ama_submuladd_8s_8s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => l_val_V_5_reg_1279,
        din1 => grp_fu_1111_p1,
        din2 => grp_fu_1011_p2,
        ce => grp_fu_1111_ce,
        dout => grp_fu_1111_p3);

    ama_submuladd_8s_8s_18s_18_4_1_U92 : component layernorm_ama_submuladd_8s_8s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => l_val_V_7_reg_1284,
        din1 => grp_fu_1119_p1,
        din2 => grp_fu_1017_p2,
        ce => grp_fu_1119_ce,
        dout => grp_fu_1119_p3);

    ama_submuladd_8s_8s_18s_18_4_1_U93 : component layernorm_ama_submuladd_8s_8s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => l_val_V_9_reg_1289,
        din1 => grp_fu_1127_p1,
        din2 => grp_fu_1023_p2,
        ce => grp_fu_1127_ce,
        dout => grp_fu_1127_p3);

    ama_submuladd_8s_8s_18s_18_4_1_U94 : component layernorm_ama_submuladd_8s_8s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => l_val_V_11_reg_1294,
        din1 => grp_fu_1135_p1,
        din2 => grp_fu_1029_p2,
        ce => grp_fu_1135_ce,
        dout => grp_fu_1135_p3);

    ama_submuladd_8s_8s_18s_18_4_1_U95 : component layernorm_ama_submuladd_8s_8s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => l_val_V_13_reg_1299,
        din1 => grp_fu_1143_p1,
        din2 => grp_fu_1035_p2,
        ce => grp_fu_1143_ce,
        dout => grp_fu_1143_p3);

    ama_submuladd_8s_8s_18s_18_4_1_U96 : component layernorm_ama_submuladd_8s_8s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => l_val_V_15_reg_1304,
        din1 => grp_fu_1151_p1,
        din2 => grp_fu_1041_p2,
        ce => grp_fu_1151_ce,
        dout => grp_fu_1151_p3);

    ama_submuladd_8s_8s_18s_18_4_1_U97 : component layernorm_ama_submuladd_8s_8s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => l_val_V_17_reg_1309,
        din1 => grp_fu_1159_p1,
        din2 => grp_fu_1047_p2,
        ce => grp_fu_1159_ce,
        dout => grp_fu_1159_p3);

    ama_submuladd_8s_8s_18s_18_4_1_U98 : component layernorm_ama_submuladd_8s_8s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => l_val_V_19_reg_1314,
        din1 => grp_fu_1167_p1,
        din2 => grp_fu_1053_p2,
        ce => grp_fu_1167_ce,
        dout => grp_fu_1167_p3);

    ama_submuladd_8s_8s_18s_18_4_1_U99 : component layernorm_ama_submuladd_8s_8s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => l_val_V_21_reg_1319,
        din1 => grp_fu_1175_p1,
        din2 => grp_fu_1059_p2,
        ce => grp_fu_1175_ce,
        dout => grp_fu_1175_p3);

    ama_submuladd_8s_8s_18s_18_4_1_U100 : component layernorm_ama_submuladd_8s_8s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => l_val_V_23_reg_1324,
        din1 => grp_fu_1183_p1,
        din2 => grp_fu_1065_p2,
        ce => grp_fu_1183_ce,
        dout => grp_fu_1183_p3);

    ama_submuladd_8s_8s_18s_18_4_1_U101 : component layernorm_ama_submuladd_8s_8s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => l_val_V_25_reg_1329,
        din1 => grp_fu_1191_p1,
        din2 => grp_fu_1071_p2,
        ce => grp_fu_1191_ce,
        dout => grp_fu_1191_p3);

    ama_submuladd_8s_8s_18s_18_4_1_U102 : component layernorm_ama_submuladd_8s_8s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => l_val_V_27_reg_1334,
        din1 => grp_fu_1199_p1,
        din2 => grp_fu_1077_p2,
        ce => grp_fu_1199_ce,
        dout => grp_fu_1199_p3);

    ama_submuladd_8s_8s_18s_18_4_1_U103 : component layernorm_ama_submuladd_8s_8s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => l_val_V_29_reg_1339,
        din1 => grp_fu_1207_p1,
        din2 => grp_fu_1083_p2,
        ce => grp_fu_1207_ce,
        dout => grp_fu_1207_p3);

    ama_submuladd_8s_8s_18s_18_4_1_U104 : component layernorm_ama_submuladd_8s_8s_18s_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => l_val_V_31_reg_1344,
        din1 => grp_fu_1215_p1,
        din2 => grp_fu_1089_p2,
        ce => grp_fu_1215_ce,
        dout => grp_fu_1215_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((icmp_ln160_1_reg_1250 = ap_const_lv1_0) and (stddev8_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state65) and ((icmp_ln160_reg_1464 = ap_const_lv1_1) or (icmp_ln160_1_reg_1250 = ap_const_lv1_1)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln165_1_fu_335_p2 = ap_const_lv1_0) and (mean_a6_empty_n = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln165_1_fu_335_p2 = ap_const_lv1_0) and (mean_a6_empty_n = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    diff_sum2_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln165_1_fu_335_p2 = ap_const_lv1_0) and (mean_a6_empty_n = ap_const_logic_1))) then 
                diff_sum2_reg_267 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln165_reg_1374_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                diff_sum2_reg_267 <= diff_sum_fu_984_p2;
            end if; 
        end if;
    end process;

    diff_sum3_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln165_1_reg_1259 = ap_const_lv1_0))) then 
                diff_sum3_reg_278 <= diff_sum_reg_1458;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln165_1_fu_335_p2 = ap_const_lv1_1) and (mean_a6_empty_n = ap_const_logic_1))) then 
                diff_sum3_reg_278 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    j4_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln165_1_fu_335_p2 = ap_const_lv1_0) and (mean_a6_empty_n = ap_const_logic_1))) then 
                j4_reg_256 <= ap_const_lv27_0;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln165_reg_1374 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j4_reg_256 <= j_reg_1369;
            end if; 
        end if;
    end process;

    k6_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln160_1_fu_330_p2 = ap_const_lv1_0))) then 
                k6_reg_245 <= ap_const_lv32_0;
            elsif ((not(((icmp_ln160_1_reg_1250 = ap_const_lv1_0) and (stddev8_full_n = ap_const_logic_0))) and (icmp_ln160_reg_1464 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state65) and (icmp_ln160_1_reg_1250 = ap_const_lv1_0))) then 
                k6_reg_245 <= k_reg_1263;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                cols_log_read_reg_1223 <= cols_log_dout;
                rows_read_reg_1228 <= rows_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                conv_reg_1468 <= grp_fu_305_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                diff_sum_reg_1458 <= diff_sum_fu_984_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                div_reg_1473 <= grp_fu_298_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                icmp_ln160_1_reg_1250 <= icmp_ln160_1_fu_330_p2;
                temp1_reg_1245 <= grp_fu_302_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                icmp_ln160_reg_1464 <= icmp_ln160_fu_990_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                icmp_ln165_1_reg_1259 <= icmp_ln165_1_fu_335_p2;
                mean_a6_read_reg_1254 <= mean_a6_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln165_reg_1374 <= icmp_ln165_fu_733_p2;
                icmp_ln165_reg_1374_pp0_iter1_reg <= icmp_ln165_reg_1374;
                l_val_V_11_reg_1294 <= data_copy_b2_dout(95 downto 88);
                l_val_V_13_reg_1299 <= data_copy_b2_dout(111 downto 104);
                l_val_V_15_reg_1304 <= data_copy_b2_dout(127 downto 120);
                l_val_V_17_reg_1309 <= data_copy_b2_dout(143 downto 136);
                l_val_V_19_reg_1314 <= data_copy_b2_dout(159 downto 152);
                l_val_V_1_reg_1269 <= data_copy_b2_dout(15 downto 8);
                l_val_V_21_reg_1319 <= data_copy_b2_dout(175 downto 168);
                l_val_V_23_reg_1324 <= data_copy_b2_dout(191 downto 184);
                l_val_V_25_reg_1329 <= data_copy_b2_dout(207 downto 200);
                l_val_V_27_reg_1334 <= data_copy_b2_dout(223 downto 216);
                l_val_V_29_reg_1339 <= data_copy_b2_dout(239 downto 232);
                l_val_V_31_reg_1344 <= data_copy_b2_dout(255 downto 248);
                l_val_V_3_reg_1274 <= data_copy_b2_dout(31 downto 24);
                l_val_V_5_reg_1279 <= data_copy_b2_dout(47 downto 40);
                l_val_V_7_reg_1284 <= data_copy_b2_dout(63 downto 56);
                l_val_V_9_reg_1289 <= data_copy_b2_dout(79 downto 72);
                sext_ln1496_1_reg_1349 <= sext_ln1496_1_fu_664_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln165_reg_1374_pp0_iter2_reg <= icmp_ln165_reg_1374_pp0_iter1_reg;
                icmp_ln165_reg_1374_pp0_iter3_reg <= icmp_ln165_reg_1374_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                j_reg_1369 <= j_fu_727_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (mean_a6_empty_n = ap_const_logic_1))) then
                k_reg_1263 <= k_fu_340_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                temp_reg_1478 <= grp_fu_293_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then
                tmp_reg_1483 <= grp_fu_309_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                trunc_ln_reg_1239 <= cols_fu_314_p2(31 downto 5);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, cols_log_empty_n, rows_empty_n, mean_a6_empty_n, stddev8_full_n, rows_c17_full_n, cols_log_c20_full_n, ap_CS_fsm_state6, ap_CS_fsm_state65, icmp_ln160_1_reg_1250, ap_CS_fsm_state5, icmp_ln160_1_fu_330_p2, icmp_ln165_1_fu_335_p2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, icmp_ln160_reg_1464, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((rows_empty_n = ap_const_logic_0) or (cols_log_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (cols_log_c20_full_n = ap_const_logic_0) or (rows_c17_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln160_1_fu_330_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln165_1_fu_335_p2 = ap_const_lv1_0) and (mean_a6_empty_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln165_1_fu_335_p2 = ap_const_lv1_1) and (mean_a6_empty_n = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                if ((not(((icmp_ln160_1_reg_1250 = ap_const_lv1_0) and (stddev8_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state65) and ((icmp_ln160_reg_1464 = ap_const_lv1_1) or (icmp_ln160_1_reg_1250 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((icmp_ln160_1_reg_1250 = ap_const_lv1_0) and (stddev8_full_n = ap_const_logic_0))) and (icmp_ln160_reg_1464 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state65) and (icmp_ln160_1_reg_1250 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln173_12_fu_850_p2 <= std_logic_vector(signed(sext_ln173_11_fu_847_p1) + signed(sext_ln173_10_fu_844_p1));
    add_ln173_13_fu_860_p2 <= std_logic_vector(signed(sext_ln173_12_fu_856_p1) + signed(sext_ln173_9_fu_840_p1));
    add_ln173_14_fu_870_p2 <= std_logic_vector(signed(sext_ln173_13_fu_866_p1) + signed(sext_ln173_6_fu_824_p1));
    add_ln173_17_fu_886_p2 <= std_logic_vector(signed(sext_ln173_16_fu_883_p1) + signed(sext_ln173_15_fu_880_p1));
    add_ln173_20_fu_902_p2 <= std_logic_vector(signed(sext_ln173_19_fu_899_p1) + signed(sext_ln173_18_fu_896_p1));
    add_ln173_21_fu_912_p2 <= std_logic_vector(signed(sext_ln173_20_fu_908_p1) + signed(sext_ln173_17_fu_892_p1));
    add_ln173_24_fu_928_p2 <= std_logic_vector(signed(sext_ln173_23_fu_925_p1) + signed(sext_ln173_22_fu_922_p1));
    add_ln173_27_fu_944_p2 <= std_logic_vector(signed(sext_ln173_26_fu_941_p1) + signed(sext_ln173_25_fu_938_p1));
    add_ln173_28_fu_954_p2 <= std_logic_vector(signed(sext_ln173_27_fu_950_p1) + signed(sext_ln173_24_fu_934_p1));
    add_ln173_29_fu_964_p2 <= std_logic_vector(signed(sext_ln173_28_fu_960_p1) + signed(sext_ln173_21_fu_918_p1));
    add_ln173_2_fu_792_p2 <= std_logic_vector(signed(sext_ln173_1_fu_789_p1) + signed(sext_ln173_fu_786_p1));
    add_ln173_30_fu_974_p2 <= std_logic_vector(signed(sext_ln173_29_fu_970_p1) + signed(sext_ln173_14_fu_876_p1));
    add_ln173_5_fu_808_p2 <= std_logic_vector(signed(sext_ln173_4_fu_805_p1) + signed(sext_ln173_3_fu_802_p1));
    add_ln173_6_fu_818_p2 <= std_logic_vector(signed(sext_ln173_5_fu_814_p1) + signed(sext_ln173_2_fu_798_p1));
    add_ln173_9_fu_834_p2 <= std_logic_vector(signed(sext_ln173_8_fu_831_p1) + signed(sext_ln173_7_fu_828_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(7);
    ap_CS_fsm_state15 <= ap_CS_fsm(10);
    ap_CS_fsm_state16 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state37 <= ap_CS_fsm(32);
    ap_CS_fsm_state38 <= ap_CS_fsm(33);
    ap_CS_fsm_state42 <= ap_CS_fsm(37);
    ap_CS_fsm_state43 <= ap_CS_fsm(38);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state63 <= ap_CS_fsm(58);
    ap_CS_fsm_state64 <= ap_CS_fsm(59);
    ap_CS_fsm_state65 <= ap_CS_fsm(60);
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, cols_log_empty_n, rows_empty_n, rows_c17_full_n, cols_log_c20_full_n)
    begin
        if (((rows_empty_n = ap_const_logic_0) or (cols_log_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (cols_log_c20_full_n = ap_const_logic_0) or (rows_c17_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;

    ap_ST_fsm_state65_blk_assign_proc : process(stddev8_full_n, icmp_ln160_1_reg_1250)
    begin
        if (((icmp_ln160_1_reg_1250 = ap_const_lv1_0) and (stddev8_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state65_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state65_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(mean_a6_empty_n)
    begin
        if ((mean_a6_empty_n = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(data_copy_b2_empty_n, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage0_11001 <= ((data_copy_b2_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(data_copy_b2_empty_n, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage0_subdone <= ((data_copy_b2_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, cols_log_empty_n, rows_empty_n, rows_c17_full_n, cols_log_c20_full_n)
    begin
                ap_block_state1 <= ((rows_empty_n = ap_const_logic_0) or (cols_log_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (cols_log_c20_full_n = ap_const_logic_0) or (rows_c17_full_n = ap_const_logic_0));
    end process;

        ap_block_state10_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state65_assign_proc : process(stddev8_full_n, icmp_ln160_1_reg_1250)
    begin
                ap_block_state65 <= ((icmp_ln160_1_reg_1250 = ap_const_lv1_0) and (stddev8_full_n = ap_const_logic_0));
    end process;


    ap_block_state7_pp0_stage0_iter0_assign_proc : process(data_copy_b2_empty_n)
    begin
                ap_block_state7_pp0_stage0_iter0 <= (data_copy_b2_empty_n = ap_const_logic_0);
    end process;

        ap_block_state8_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln165_fu_733_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln165_fu_733_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, stddev8_full_n, ap_CS_fsm_state65, icmp_ln160_1_reg_1250, icmp_ln160_reg_1464)
    begin
        if ((not(((icmp_ln160_1_reg_1250 = ap_const_lv1_0) and (stddev8_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state65) and ((icmp_ln160_reg_1464 = ap_const_lv1_1) or (icmp_ln160_1_reg_1250 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_diff_sum3_phi_fu_282_p4_assign_proc : process(icmp_ln165_1_reg_1259, diff_sum_reg_1458, ap_CS_fsm_state12, diff_sum3_reg_278)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln165_1_reg_1259 = ap_const_lv1_0))) then 
            ap_phi_mux_diff_sum3_phi_fu_282_p4 <= diff_sum_reg_1458;
        else 
            ap_phi_mux_diff_sum3_phi_fu_282_p4 <= diff_sum3_reg_278;
        end if; 
    end process;


    ap_phi_mux_j4_phi_fu_260_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j4_reg_256, j_reg_1369, icmp_ln165_reg_1374, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln165_reg_1374 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_j4_phi_fu_260_p4 <= j_reg_1369;
        else 
            ap_phi_mux_j4_phi_fu_260_p4 <= j4_reg_256;
        end if; 
    end process;


    ap_ready_assign_proc : process(stddev8_full_n, ap_CS_fsm_state65, icmp_ln160_1_reg_1250, icmp_ln160_reg_1464)
    begin
        if ((not(((icmp_ln160_1_reg_1250 = ap_const_lv1_0) and (stddev8_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state65) and ((icmp_ln160_reg_1464 = ap_const_lv1_1) or (icmp_ln160_1_reg_1250 = ap_const_lv1_1)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cols_fu_314_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & cols_log_read_reg_1223(31-1 downto 0)))));

    cols_log_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cols_log_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cols_log_blk_n <= cols_log_empty_n;
        else 
            cols_log_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    cols_log_c20_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cols_log_c20_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cols_log_c20_blk_n <= cols_log_c20_full_n;
        else 
            cols_log_c20_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cols_log_c20_din <= cols_log_dout;

    cols_log_c20_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cols_log_empty_n, rows_empty_n, rows_c17_full_n, cols_log_c20_full_n)
    begin
        if ((not(((rows_empty_n = ap_const_logic_0) or (cols_log_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (cols_log_c20_full_n = ap_const_logic_0) or (rows_c17_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cols_log_c20_write <= ap_const_logic_1;
        else 
            cols_log_c20_write <= ap_const_logic_0;
        end if; 
    end process;


    cols_log_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cols_log_empty_n, rows_empty_n, rows_c17_full_n, cols_log_c20_full_n)
    begin
        if ((not(((rows_empty_n = ap_const_logic_0) or (cols_log_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (cols_log_c20_full_n = ap_const_logic_0) or (rows_c17_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cols_log_read <= ap_const_logic_1;
        else 
            cols_log_read <= ap_const_logic_0;
        end if; 
    end process;


    data_copy_b2_blk_n_assign_proc : process(data_copy_b2_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            data_copy_b2_blk_n <= data_copy_b2_empty_n;
        else 
            data_copy_b2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_copy_b2_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            data_copy_b2_read <= ap_const_logic_1;
        else 
            data_copy_b2_read <= ap_const_logic_0;
        end if; 
    end process;

    diff_sum_fu_984_p2 <= std_logic_vector(unsigned(diff_sum2_reg_267) + unsigned(sext_ln173_30_fu_980_p1));

    grp_fu_1005_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1005_ce <= ap_const_logic_1;
        else 
            grp_fu_1005_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1005_p1 <= sext_ln1496_1_fu_664_p1(8 - 1 downto 0);

    grp_fu_1011_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1011_ce <= ap_const_logic_1;
        else 
            grp_fu_1011_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1011_p1 <= sext_ln1496_1_fu_664_p1(8 - 1 downto 0);

    grp_fu_1017_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1017_ce <= ap_const_logic_1;
        else 
            grp_fu_1017_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1017_p1 <= sext_ln1496_1_fu_664_p1(8 - 1 downto 0);

    grp_fu_1023_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1023_ce <= ap_const_logic_1;
        else 
            grp_fu_1023_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1023_p1 <= sext_ln1496_1_fu_664_p1(8 - 1 downto 0);

    grp_fu_1029_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1029_ce <= ap_const_logic_1;
        else 
            grp_fu_1029_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1029_p1 <= sext_ln1496_1_fu_664_p1(8 - 1 downto 0);

    grp_fu_1035_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1035_ce <= ap_const_logic_1;
        else 
            grp_fu_1035_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1035_p1 <= sext_ln1496_1_fu_664_p1(8 - 1 downto 0);

    grp_fu_1041_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1041_ce <= ap_const_logic_1;
        else 
            grp_fu_1041_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1041_p1 <= sext_ln1496_1_fu_664_p1(8 - 1 downto 0);

    grp_fu_1047_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1047_ce <= ap_const_logic_1;
        else 
            grp_fu_1047_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1047_p1 <= sext_ln1496_1_fu_664_p1(8 - 1 downto 0);

    grp_fu_1053_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1053_ce <= ap_const_logic_1;
        else 
            grp_fu_1053_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1053_p1 <= sext_ln1496_1_fu_664_p1(8 - 1 downto 0);

    grp_fu_1059_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1059_ce <= ap_const_logic_1;
        else 
            grp_fu_1059_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1059_p1 <= sext_ln1496_1_fu_664_p1(8 - 1 downto 0);

    grp_fu_1065_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1065_ce <= ap_const_logic_1;
        else 
            grp_fu_1065_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1065_p1 <= sext_ln1496_1_fu_664_p1(8 - 1 downto 0);

    grp_fu_1071_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1071_ce <= ap_const_logic_1;
        else 
            grp_fu_1071_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1071_p1 <= sext_ln1496_1_fu_664_p1(8 - 1 downto 0);

    grp_fu_1077_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1077_ce <= ap_const_logic_1;
        else 
            grp_fu_1077_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1077_p1 <= sext_ln1496_1_fu_664_p1(8 - 1 downto 0);

    grp_fu_1083_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1083_ce <= ap_const_logic_1;
        else 
            grp_fu_1083_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1083_p1 <= sext_ln1496_1_fu_664_p1(8 - 1 downto 0);

    grp_fu_1089_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1089_ce <= ap_const_logic_1;
        else 
            grp_fu_1089_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1089_p1 <= sext_ln1496_1_fu_664_p1(8 - 1 downto 0);

    grp_fu_1095_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1095_ce <= ap_const_logic_1;
        else 
            grp_fu_1095_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1095_p1 <= sext_ln1496_1_reg_1349(8 - 1 downto 0);

    grp_fu_1103_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1103_ce <= ap_const_logic_1;
        else 
            grp_fu_1103_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1103_p1 <= sext_ln1496_1_reg_1349(8 - 1 downto 0);

    grp_fu_1111_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1111_ce <= ap_const_logic_1;
        else 
            grp_fu_1111_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1111_p1 <= sext_ln1496_1_reg_1349(8 - 1 downto 0);

    grp_fu_1119_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1119_ce <= ap_const_logic_1;
        else 
            grp_fu_1119_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1119_p1 <= sext_ln1496_1_reg_1349(8 - 1 downto 0);

    grp_fu_1127_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1127_ce <= ap_const_logic_1;
        else 
            grp_fu_1127_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1127_p1 <= sext_ln1496_1_reg_1349(8 - 1 downto 0);

    grp_fu_1135_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1135_ce <= ap_const_logic_1;
        else 
            grp_fu_1135_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1135_p1 <= sext_ln1496_1_reg_1349(8 - 1 downto 0);

    grp_fu_1143_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1143_ce <= ap_const_logic_1;
        else 
            grp_fu_1143_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1143_p1 <= sext_ln1496_1_reg_1349(8 - 1 downto 0);

    grp_fu_1151_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1151_ce <= ap_const_logic_1;
        else 
            grp_fu_1151_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1151_p1 <= sext_ln1496_1_reg_1349(8 - 1 downto 0);

    grp_fu_1159_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1159_ce <= ap_const_logic_1;
        else 
            grp_fu_1159_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1159_p1 <= sext_ln1496_1_reg_1349(8 - 1 downto 0);

    grp_fu_1167_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1167_ce <= ap_const_logic_1;
        else 
            grp_fu_1167_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1167_p1 <= sext_ln1496_1_reg_1349(8 - 1 downto 0);

    grp_fu_1175_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1175_ce <= ap_const_logic_1;
        else 
            grp_fu_1175_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1175_p1 <= sext_ln1496_1_reg_1349(8 - 1 downto 0);

    grp_fu_1183_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1183_ce <= ap_const_logic_1;
        else 
            grp_fu_1183_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1183_p1 <= sext_ln1496_1_reg_1349(8 - 1 downto 0);

    grp_fu_1191_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1191_ce <= ap_const_logic_1;
        else 
            grp_fu_1191_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1191_p1 <= sext_ln1496_1_reg_1349(8 - 1 downto 0);

    grp_fu_1199_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1199_ce <= ap_const_logic_1;
        else 
            grp_fu_1199_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1199_p1 <= sext_ln1496_1_reg_1349(8 - 1 downto 0);

    grp_fu_1207_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1207_ce <= ap_const_logic_1;
        else 
            grp_fu_1207_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1207_p1 <= sext_ln1496_1_reg_1349(8 - 1 downto 0);

    grp_fu_1215_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_1215_ce <= ap_const_logic_1;
        else 
            grp_fu_1215_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1215_p1 <= sext_ln1496_1_reg_1349(8 - 1 downto 0);

    grp_fu_290_ce_assign_proc : process(stddev8_full_n, ap_CS_fsm_state65, icmp_ln160_1_reg_1250, ap_CS_fsm_state64)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state64) or (not(((icmp_ln160_1_reg_1250 = ap_const_lv1_0) and (stddev8_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state65)))) then 
            grp_fu_290_ce <= ap_const_logic_1;
        else 
            grp_fu_290_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_999_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_999_ce <= ap_const_logic_1;
        else 
            grp_fu_999_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_999_p1 <= sext_ln1496_1_fu_664_p1(8 - 1 downto 0);
    icmp_ln160_1_fu_330_p2 <= "1" when (rows_read_reg_1228 = ap_const_lv32_0) else "0";
    icmp_ln160_fu_990_p2 <= "1" when (k_reg_1263 = rows_read_reg_1228) else "0";
    icmp_ln165_1_fu_335_p2 <= "1" when (trunc_ln_reg_1239 = ap_const_lv27_0) else "0";
    icmp_ln165_fu_733_p2 <= "1" when (j_fu_727_p2 = trunc_ln_reg_1239) else "0";
    j_fu_727_p2 <= std_logic_vector(unsigned(ap_phi_mux_j4_phi_fu_260_p4) + unsigned(ap_const_lv27_1));
    k_fu_340_p2 <= std_logic_vector(unsigned(k6_reg_245) + unsigned(ap_const_lv32_1));
    l_val_V_10_fu_440_p4 <= data_copy_b2_dout(87 downto 80);
    l_val_V_12_fu_460_p4 <= data_copy_b2_dout(103 downto 96);
    l_val_V_14_fu_480_p4 <= data_copy_b2_dout(119 downto 112);
    l_val_V_16_fu_500_p4 <= data_copy_b2_dout(135 downto 128);
    l_val_V_18_fu_520_p4 <= data_copy_b2_dout(151 downto 144);
    l_val_V_20_fu_540_p4 <= data_copy_b2_dout(167 downto 160);
    l_val_V_22_fu_560_p4 <= data_copy_b2_dout(183 downto 176);
    l_val_V_24_fu_580_p4 <= data_copy_b2_dout(199 downto 192);
    l_val_V_26_fu_600_p4 <= data_copy_b2_dout(215 downto 208);
    l_val_V_28_fu_620_p4 <= data_copy_b2_dout(231 downto 224);
    l_val_V_2_fu_360_p4 <= data_copy_b2_dout(23 downto 16);
    l_val_V_30_fu_640_p4 <= data_copy_b2_dout(247 downto 240);
    l_val_V_4_fu_380_p4 <= data_copy_b2_dout(39 downto 32);
    l_val_V_6_fu_400_p4 <= data_copy_b2_dout(55 downto 48);
    l_val_V_8_fu_420_p4 <= data_copy_b2_dout(71 downto 64);
    l_val_V_fu_346_p1 <= data_copy_b2_dout(8 - 1 downto 0);

    mean_a6_blk_n_assign_proc : process(mean_a6_empty_n, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            mean_a6_blk_n <= mean_a6_empty_n;
        else 
            mean_a6_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mean_a6_read_assign_proc : process(mean_a6_empty_n, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (mean_a6_empty_n = ap_const_logic_1))) then 
            mean_a6_read <= ap_const_logic_1;
        else 
            mean_a6_read <= ap_const_logic_0;
        end if; 
    end process;


    rows_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_blk_n <= rows_empty_n;
        else 
            rows_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    rows_c17_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_c17_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_c17_blk_n <= rows_c17_full_n;
        else 
            rows_c17_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    rows_c17_din <= rows_dout;

    rows_c17_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cols_log_empty_n, rows_empty_n, rows_c17_full_n, cols_log_c20_full_n)
    begin
        if ((not(((rows_empty_n = ap_const_logic_0) or (cols_log_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (cols_log_c20_full_n = ap_const_logic_0) or (rows_c17_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_c17_write <= ap_const_logic_1;
        else 
            rows_c17_write <= ap_const_logic_0;
        end if; 
    end process;


    rows_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cols_log_empty_n, rows_empty_n, rows_c17_full_n, cols_log_c20_full_n)
    begin
        if ((not(((rows_empty_n = ap_const_logic_0) or (cols_log_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (cols_log_c20_full_n = ap_const_logic_0) or (rows_c17_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_read <= ap_const_logic_1;
        else 
            rows_read <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln1496_1_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mean_a6_read_reg_1254),9));

        sext_ln173_10_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1143_p3),19));

        sext_ln173_11_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1151_p3),19));

        sext_ln173_12_fu_856_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln173_12_fu_850_p2),20));

        sext_ln173_13_fu_866_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln173_13_fu_860_p2),21));

        sext_ln173_14_fu_876_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln173_14_fu_870_p2),22));

        sext_ln173_15_fu_880_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1159_p3),19));

        sext_ln173_16_fu_883_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1167_p3),19));

        sext_ln173_17_fu_892_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln173_17_fu_886_p2),20));

        sext_ln173_18_fu_896_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1175_p3),19));

        sext_ln173_19_fu_899_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1183_p3),19));

        sext_ln173_1_fu_789_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1103_p3),19));

        sext_ln173_20_fu_908_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln173_20_fu_902_p2),20));

        sext_ln173_21_fu_918_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln173_21_fu_912_p2),21));

        sext_ln173_22_fu_922_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1191_p3),19));

        sext_ln173_23_fu_925_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1199_p3),19));

        sext_ln173_24_fu_934_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln173_24_fu_928_p2),20));

        sext_ln173_25_fu_938_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1207_p3),19));

        sext_ln173_26_fu_941_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1215_p3),19));

        sext_ln173_27_fu_950_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln173_27_fu_944_p2),20));

        sext_ln173_28_fu_960_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln173_28_fu_954_p2),21));

        sext_ln173_29_fu_970_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln173_29_fu_964_p2),22));

        sext_ln173_2_fu_798_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln173_2_fu_792_p2),20));

        sext_ln173_30_fu_980_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln173_30_fu_974_p2),32));

        sext_ln173_3_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1111_p3),19));

        sext_ln173_4_fu_805_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1119_p3),19));

        sext_ln173_5_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln173_5_fu_808_p2),20));

        sext_ln173_6_fu_824_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln173_6_fu_818_p2),21));

        sext_ln173_7_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1127_p3),19));

        sext_ln173_8_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1135_p3),19));

        sext_ln173_9_fu_840_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln173_9_fu_834_p2),20));

        sext_ln173_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1095_p3),19));


    stddev8_blk_n_assign_proc : process(stddev8_full_n, ap_CS_fsm_state65, icmp_ln160_1_reg_1250)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state65) and (icmp_ln160_1_reg_1250 = ap_const_lv1_0))) then 
            stddev8_blk_n <= stddev8_full_n;
        else 
            stddev8_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stddev8_din <= grp_fu_290_p1;

    stddev8_write_assign_proc : process(stddev8_full_n, ap_CS_fsm_state65, icmp_ln160_1_reg_1250)
    begin
        if ((not(((icmp_ln160_1_reg_1250 = ap_const_lv1_0) and (stddev8_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state65) and (icmp_ln160_1_reg_1250 = ap_const_lv1_0))) then 
            stddev8_write <= ap_const_logic_1;
        else 
            stddev8_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
