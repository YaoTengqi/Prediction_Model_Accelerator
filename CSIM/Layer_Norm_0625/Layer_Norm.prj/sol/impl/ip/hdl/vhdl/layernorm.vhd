-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity layernorm is
generic (
    C_S_AXI_LN_ADDR_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_LN_ADDR_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_LN_DATA_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_LN_DATA_ID_WIDTH : INTEGER := 1;
    C_M_AXI_LN_DATA_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_LN_DATA_DATA_WIDTH : INTEGER := 256;
    C_M_AXI_LN_DATA_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_LN_DATA_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_LN_DATA_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_LN_DATA_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_LN_PARAS_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_LN_PARAS_ID_WIDTH : INTEGER := 1;
    C_M_AXI_LN_PARAS_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_LN_PARAS_DATA_WIDTH : INTEGER := 256;
    C_M_AXI_LN_PARAS_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_LN_PARAS_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_LN_PARAS_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_LN_PARAS_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_LN_DATA_USER_VALUE : INTEGER := 0;
    C_M_AXI_LN_DATA_PROT_VALUE : INTEGER := 0;
    C_M_AXI_LN_DATA_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_LN_PARAS_USER_VALUE : INTEGER := 0;
    C_M_AXI_LN_PARAS_PROT_VALUE : INTEGER := 0;
    C_M_AXI_LN_PARAS_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_ln_addr_AWVALID : IN STD_LOGIC;
    s_axi_ln_addr_AWREADY : OUT STD_LOGIC;
    s_axi_ln_addr_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_LN_ADDR_ADDR_WIDTH-1 downto 0);
    s_axi_ln_addr_WVALID : IN STD_LOGIC;
    s_axi_ln_addr_WREADY : OUT STD_LOGIC;
    s_axi_ln_addr_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_LN_ADDR_DATA_WIDTH-1 downto 0);
    s_axi_ln_addr_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_LN_ADDR_DATA_WIDTH/8-1 downto 0);
    s_axi_ln_addr_ARVALID : IN STD_LOGIC;
    s_axi_ln_addr_ARREADY : OUT STD_LOGIC;
    s_axi_ln_addr_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_LN_ADDR_ADDR_WIDTH-1 downto 0);
    s_axi_ln_addr_RVALID : OUT STD_LOGIC;
    s_axi_ln_addr_RREADY : IN STD_LOGIC;
    s_axi_ln_addr_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_LN_ADDR_DATA_WIDTH-1 downto 0);
    s_axi_ln_addr_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_ln_addr_BVALID : OUT STD_LOGIC;
    s_axi_ln_addr_BREADY : IN STD_LOGIC;
    s_axi_ln_addr_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    m_axi_ln_data_AWVALID : OUT STD_LOGIC;
    m_axi_ln_data_AWREADY : IN STD_LOGIC;
    m_axi_ln_data_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_LN_DATA_ADDR_WIDTH-1 downto 0);
    m_axi_ln_data_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_LN_DATA_ID_WIDTH-1 downto 0);
    m_axi_ln_data_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ln_data_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ln_data_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ln_data_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ln_data_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ln_data_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ln_data_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ln_data_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ln_data_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_LN_DATA_AWUSER_WIDTH-1 downto 0);
    m_axi_ln_data_WVALID : OUT STD_LOGIC;
    m_axi_ln_data_WREADY : IN STD_LOGIC;
    m_axi_ln_data_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_LN_DATA_DATA_WIDTH-1 downto 0);
    m_axi_ln_data_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_LN_DATA_DATA_WIDTH/8-1 downto 0);
    m_axi_ln_data_WLAST : OUT STD_LOGIC;
    m_axi_ln_data_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_LN_DATA_ID_WIDTH-1 downto 0);
    m_axi_ln_data_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_LN_DATA_WUSER_WIDTH-1 downto 0);
    m_axi_ln_data_ARVALID : OUT STD_LOGIC;
    m_axi_ln_data_ARREADY : IN STD_LOGIC;
    m_axi_ln_data_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_LN_DATA_ADDR_WIDTH-1 downto 0);
    m_axi_ln_data_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_LN_DATA_ID_WIDTH-1 downto 0);
    m_axi_ln_data_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ln_data_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ln_data_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ln_data_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ln_data_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ln_data_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ln_data_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ln_data_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ln_data_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_LN_DATA_ARUSER_WIDTH-1 downto 0);
    m_axi_ln_data_RVALID : IN STD_LOGIC;
    m_axi_ln_data_RREADY : OUT STD_LOGIC;
    m_axi_ln_data_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_LN_DATA_DATA_WIDTH-1 downto 0);
    m_axi_ln_data_RLAST : IN STD_LOGIC;
    m_axi_ln_data_RID : IN STD_LOGIC_VECTOR (C_M_AXI_LN_DATA_ID_WIDTH-1 downto 0);
    m_axi_ln_data_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_LN_DATA_RUSER_WIDTH-1 downto 0);
    m_axi_ln_data_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ln_data_BVALID : IN STD_LOGIC;
    m_axi_ln_data_BREADY : OUT STD_LOGIC;
    m_axi_ln_data_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ln_data_BID : IN STD_LOGIC_VECTOR (C_M_AXI_LN_DATA_ID_WIDTH-1 downto 0);
    m_axi_ln_data_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_LN_DATA_BUSER_WIDTH-1 downto 0);
    m_axi_ln_paras_AWVALID : OUT STD_LOGIC;
    m_axi_ln_paras_AWREADY : IN STD_LOGIC;
    m_axi_ln_paras_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_LN_PARAS_ADDR_WIDTH-1 downto 0);
    m_axi_ln_paras_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_LN_PARAS_ID_WIDTH-1 downto 0);
    m_axi_ln_paras_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ln_paras_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ln_paras_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ln_paras_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ln_paras_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ln_paras_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ln_paras_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ln_paras_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ln_paras_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_LN_PARAS_AWUSER_WIDTH-1 downto 0);
    m_axi_ln_paras_WVALID : OUT STD_LOGIC;
    m_axi_ln_paras_WREADY : IN STD_LOGIC;
    m_axi_ln_paras_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_LN_PARAS_DATA_WIDTH-1 downto 0);
    m_axi_ln_paras_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_LN_PARAS_DATA_WIDTH/8-1 downto 0);
    m_axi_ln_paras_WLAST : OUT STD_LOGIC;
    m_axi_ln_paras_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_LN_PARAS_ID_WIDTH-1 downto 0);
    m_axi_ln_paras_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_LN_PARAS_WUSER_WIDTH-1 downto 0);
    m_axi_ln_paras_ARVALID : OUT STD_LOGIC;
    m_axi_ln_paras_ARREADY : IN STD_LOGIC;
    m_axi_ln_paras_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_LN_PARAS_ADDR_WIDTH-1 downto 0);
    m_axi_ln_paras_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_LN_PARAS_ID_WIDTH-1 downto 0);
    m_axi_ln_paras_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_ln_paras_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ln_paras_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ln_paras_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ln_paras_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ln_paras_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_ln_paras_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ln_paras_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_ln_paras_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_LN_PARAS_ARUSER_WIDTH-1 downto 0);
    m_axi_ln_paras_RVALID : IN STD_LOGIC;
    m_axi_ln_paras_RREADY : OUT STD_LOGIC;
    m_axi_ln_paras_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_LN_PARAS_DATA_WIDTH-1 downto 0);
    m_axi_ln_paras_RLAST : IN STD_LOGIC;
    m_axi_ln_paras_RID : IN STD_LOGIC_VECTOR (C_M_AXI_LN_PARAS_ID_WIDTH-1 downto 0);
    m_axi_ln_paras_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_LN_PARAS_RUSER_WIDTH-1 downto 0);
    m_axi_ln_paras_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ln_paras_BVALID : IN STD_LOGIC;
    m_axi_ln_paras_BREADY : OUT STD_LOGIC;
    m_axi_ln_paras_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_ln_paras_BID : IN STD_LOGIC_VECTOR (C_M_AXI_LN_PARAS_ID_WIDTH-1 downto 0);
    m_axi_ln_paras_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_LN_PARAS_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of layernorm is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "layernorm_layernorm,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=137,HLS_SYN_DSP=0,HLS_SYN_FF=24456,HLS_SYN_LUT=48708,HLS_VERSION=2022_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal input_data_addr : STD_LOGIC_VECTOR (31 downto 0);
    signal gama_addr : STD_LOGIC_VECTOR (31 downto 0);
    signal beta_addr : STD_LOGIC_VECTOR (31 downto 0);
    signal output_data_addr : STD_LOGIC_VECTOR (31 downto 0);
    signal rows : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_log : STD_LOGIC_VECTOR (31 downto 0);
    signal q_value : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_value : STD_LOGIC_VECTOR (31 downto 0);
    signal inputs : STD_LOGIC_VECTOR (63 downto 0);
    signal outputs : STD_LOGIC_VECTOR (63 downto 0);
    signal paras : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ln_data_AWREADY : STD_LOGIC;
    signal ln_data_WREADY : STD_LOGIC;
    signal ln_data_ARREADY : STD_LOGIC;
    signal ln_data_RVALID : STD_LOGIC;
    signal ln_data_RDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal ln_data_RLAST : STD_LOGIC;
    signal ln_data_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal ln_data_RFIFONUM : STD_LOGIC_VECTOR (12 downto 0);
    signal ln_data_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ln_data_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ln_data_BVALID : STD_LOGIC;
    signal ln_data_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ln_data_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal ln_data_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ln_paras_AWREADY : STD_LOGIC;
    signal ln_paras_WREADY : STD_LOGIC;
    signal ln_paras_ARREADY : STD_LOGIC;
    signal ln_paras_RVALID : STD_LOGIC;
    signal ln_paras_RDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal ln_paras_RLAST : STD_LOGIC;
    signal ln_paras_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal ln_paras_RFIFONUM : STD_LOGIC_VECTOR (12 downto 0);
    signal ln_paras_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ln_paras_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal ln_paras_BVALID : STD_LOGIC;
    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_start_out : STD_LOGIC;
    signal entry_proc_U0_start_write : STD_LOGIC;
    signal entry_proc_U0_output_data_addr_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc_U0_output_data_addr_c_write : STD_LOGIC;
    signal entry_proc_U0_outputs_c_din : STD_LOGIC_VECTOR (63 downto 0);
    signal entry_proc_U0_outputs_c_write : STD_LOGIC;
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_ap_start : STD_LOGIC;
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_start_full_n : STD_LOGIC;
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_ap_done : STD_LOGIC;
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_ap_continue : STD_LOGIC;
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_ap_idle : STD_LOGIC;
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_ap_ready : STD_LOGIC;
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_start_out : STD_LOGIC;
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_start_write : STD_LOGIC;
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWVALID : STD_LOGIC;
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_WVALID : STD_LOGIC;
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_WLAST : STD_LOGIC;
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARVALID : STD_LOGIC;
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_RREADY : STD_LOGIC;
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_BREADY : STD_LOGIC;
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_data_copy_a1_din : STD_LOGIC_VECTOR (255 downto 0);
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_data_copy_a1_write : STD_LOGIC;
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_data_copy_b2_din : STD_LOGIC_VECTOR (255 downto 0);
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_data_copy_b2_write : STD_LOGIC;
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_data_copy_c3_din : STD_LOGIC_VECTOR (255 downto 0);
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_data_copy_c3_write : STD_LOGIC;
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_rows_c19_din : STD_LOGIC_VECTOR (31 downto 0);
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_rows_c19_write : STD_LOGIC;
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_cols_log_c22_din : STD_LOGIC_VECTOR (31 downto 0);
    signal p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_cols_log_c22_write : STD_LOGIC;
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_ap_start : STD_LOGIC;
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_ap_done : STD_LOGIC;
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_ap_continue : STD_LOGIC;
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_ap_idle : STD_LOGIC;
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_ap_ready : STD_LOGIC;
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_AWVALID : STD_LOGIC;
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_WVALID : STD_LOGIC;
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_WLAST : STD_LOGIC;
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_ARVALID : STD_LOGIC;
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_RREADY : STD_LOGIC;
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_BREADY : STD_LOGIC;
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_gamma4_din : STD_LOGIC_VECTOR (255 downto 0);
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_gamma4_write : STD_LOGIC;
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_beta5_din : STD_LOGIC_VECTOR (255 downto 0);
    signal p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_beta5_write : STD_LOGIC;
    signal p_anonymous_namespace_Mean_ap_int_8_5u_U0_ap_start : STD_LOGIC;
    signal p_anonymous_namespace_Mean_ap_int_8_5u_U0_ap_done : STD_LOGIC;
    signal p_anonymous_namespace_Mean_ap_int_8_5u_U0_ap_continue : STD_LOGIC;
    signal p_anonymous_namespace_Mean_ap_int_8_5u_U0_ap_idle : STD_LOGIC;
    signal p_anonymous_namespace_Mean_ap_int_8_5u_U0_ap_ready : STD_LOGIC;
    signal p_anonymous_namespace_Mean_ap_int_8_5u_U0_cols_log_read : STD_LOGIC;
    signal p_anonymous_namespace_Mean_ap_int_8_5u_U0_rows_read : STD_LOGIC;
    signal p_anonymous_namespace_Mean_ap_int_8_5u_U0_data_copy_a1_read : STD_LOGIC;
    signal p_anonymous_namespace_Mean_ap_int_8_5u_U0_mean_a6_din : STD_LOGIC_VECTOR (7 downto 0);
    signal p_anonymous_namespace_Mean_ap_int_8_5u_U0_mean_a6_write : STD_LOGIC;
    signal p_anonymous_namespace_Mean_ap_int_8_5u_U0_mean_b7_din : STD_LOGIC_VECTOR (7 downto 0);
    signal p_anonymous_namespace_Mean_ap_int_8_5u_U0_mean_b7_write : STD_LOGIC;
    signal p_anonymous_namespace_Mean_ap_int_8_5u_U0_rows_c18_din : STD_LOGIC_VECTOR (31 downto 0);
    signal p_anonymous_namespace_Mean_ap_int_8_5u_U0_rows_c18_write : STD_LOGIC;
    signal p_anonymous_namespace_Mean_ap_int_8_5u_U0_cols_log_c21_din : STD_LOGIC_VECTOR (31 downto 0);
    signal p_anonymous_namespace_Mean_ap_int_8_5u_U0_cols_log_c21_write : STD_LOGIC;
    signal p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_ap_start : STD_LOGIC;
    signal p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_ap_done : STD_LOGIC;
    signal p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_ap_continue : STD_LOGIC;
    signal p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_ap_idle : STD_LOGIC;
    signal p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_ap_ready : STD_LOGIC;
    signal p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_cols_log_read : STD_LOGIC;
    signal p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_rows_read : STD_LOGIC;
    signal p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_data_copy_b2_read : STD_LOGIC;
    signal p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_mean_a6_read : STD_LOGIC;
    signal p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_stddev8_din : STD_LOGIC_VECTOR (31 downto 0);
    signal p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_stddev8_write : STD_LOGIC;
    signal p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_rows_c17_din : STD_LOGIC_VECTOR (31 downto 0);
    signal p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_rows_c17_write : STD_LOGIC;
    signal p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_cols_log_c20_din : STD_LOGIC_VECTOR (31 downto 0);
    signal p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_cols_log_c20_write : STD_LOGIC;
    signal p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_ap_start : STD_LOGIC;
    signal p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_ap_done : STD_LOGIC;
    signal p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_ap_continue : STD_LOGIC;
    signal p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_ap_idle : STD_LOGIC;
    signal p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_ap_ready : STD_LOGIC;
    signal p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_start_out : STD_LOGIC;
    signal p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_start_write : STD_LOGIC;
    signal p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_cols_log_read : STD_LOGIC;
    signal p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_rows_read : STD_LOGIC;
    signal p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_data_copy_c3_read : STD_LOGIC;
    signal p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_mean_b7_read : STD_LOGIC;
    signal p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_stddev8_read : STD_LOGIC;
    signal p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_gamma4_read : STD_LOGIC;
    signal p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_beta5_read : STD_LOGIC;
    signal p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_norm9_din : STD_LOGIC_VECTOR (255 downto 0);
    signal p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_norm9_write : STD_LOGIC;
    signal p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_rows_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_rows_c_write : STD_LOGIC;
    signal p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_cols_log_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_cols_log_c_write : STD_LOGIC;
    signal p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_ap_start : STD_LOGIC;
    signal p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_ap_done : STD_LOGIC;
    signal p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_ap_continue : STD_LOGIC;
    signal p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_ap_idle : STD_LOGIC;
    signal p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_ap_ready : STD_LOGIC;
    signal p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_cols_log_read : STD_LOGIC;
    signal p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_rows_read : STD_LOGIC;
    signal p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_norm9_read : STD_LOGIC;
    signal p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_store_temp10_din : STD_LOGIC_VECTOR (255 downto 0);
    signal p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_store_temp10_write : STD_LOGIC;
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_ap_start : STD_LOGIC;
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_ap_done : STD_LOGIC;
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_ap_continue : STD_LOGIC;
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_ap_idle : STD_LOGIC;
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_ap_ready : STD_LOGIC;
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_outputs_read : STD_LOGIC;
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_addr_read : STD_LOGIC;
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWVALID : STD_LOGIC;
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_WVALID : STD_LOGIC;
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_WDATA : STD_LOGIC_VECTOR (255 downto 0);
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_WSTRB : STD_LOGIC_VECTOR (31 downto 0);
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_WLAST : STD_LOGIC;
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARVALID : STD_LOGIC;
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_RREADY : STD_LOGIC;
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_BREADY : STD_LOGIC;
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_store_temp10_read : STD_LOGIC;
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_done : STD_LOGIC_VECTOR (31 downto 0);
    signal p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_done_ap_vld : STD_LOGIC;
    signal output_data_addr_c_full_n : STD_LOGIC;
    signal output_data_addr_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal output_data_addr_c_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal output_data_addr_c_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal output_data_addr_c_empty_n : STD_LOGIC;
    signal outputs_c_full_n : STD_LOGIC;
    signal outputs_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal outputs_c_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal outputs_c_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal outputs_c_empty_n : STD_LOGIC;
    signal data_copy_a_full_n : STD_LOGIC;
    signal data_copy_a_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal data_copy_a_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal data_copy_a_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal data_copy_a_empty_n : STD_LOGIC;
    signal data_copy_b_full_n : STD_LOGIC;
    signal data_copy_b_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal data_copy_b_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal data_copy_b_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal data_copy_b_empty_n : STD_LOGIC;
    signal data_copy_c_full_n : STD_LOGIC;
    signal data_copy_c_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal data_copy_c_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal data_copy_c_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal data_copy_c_empty_n : STD_LOGIC;
    signal rows_c19_full_n : STD_LOGIC;
    signal rows_c19_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rows_c19_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal rows_c19_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal rows_c19_empty_n : STD_LOGIC;
    signal cols_log_c22_full_n : STD_LOGIC;
    signal cols_log_c22_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_log_c22_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal cols_log_c22_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal cols_log_c22_empty_n : STD_LOGIC;
    signal gamma_full_n : STD_LOGIC;
    signal gamma_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal gamma_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal gamma_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal gamma_empty_n : STD_LOGIC;
    signal beta_full_n : STD_LOGIC;
    signal beta_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal beta_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal beta_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal beta_empty_n : STD_LOGIC;
    signal mean_a_full_n : STD_LOGIC;
    signal mean_a_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal mean_a_num_data_valid : STD_LOGIC_VECTOR (5 downto 0);
    signal mean_a_fifo_cap : STD_LOGIC_VECTOR (5 downto 0);
    signal mean_a_empty_n : STD_LOGIC;
    signal mean_b_full_n : STD_LOGIC;
    signal mean_b_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal mean_b_num_data_valid : STD_LOGIC_VECTOR (5 downto 0);
    signal mean_b_fifo_cap : STD_LOGIC_VECTOR (5 downto 0);
    signal mean_b_empty_n : STD_LOGIC;
    signal rows_c18_full_n : STD_LOGIC;
    signal rows_c18_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rows_c18_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal rows_c18_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal rows_c18_empty_n : STD_LOGIC;
    signal cols_log_c21_full_n : STD_LOGIC;
    signal cols_log_c21_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_log_c21_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal cols_log_c21_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal cols_log_c21_empty_n : STD_LOGIC;
    signal stddev_full_n : STD_LOGIC;
    signal stddev_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal stddev_num_data_valid : STD_LOGIC_VECTOR (5 downto 0);
    signal stddev_fifo_cap : STD_LOGIC_VECTOR (5 downto 0);
    signal stddev_empty_n : STD_LOGIC;
    signal rows_c17_full_n : STD_LOGIC;
    signal rows_c17_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rows_c17_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal rows_c17_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal rows_c17_empty_n : STD_LOGIC;
    signal cols_log_c20_full_n : STD_LOGIC;
    signal cols_log_c20_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_log_c20_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal cols_log_c20_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal cols_log_c20_empty_n : STD_LOGIC;
    signal norm_full_n : STD_LOGIC;
    signal norm_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal norm_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal norm_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal norm_empty_n : STD_LOGIC;
    signal rows_c_full_n : STD_LOGIC;
    signal rows_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal rows_c_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal rows_c_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal rows_c_empty_n : STD_LOGIC;
    signal cols_log_c_full_n : STD_LOGIC;
    signal cols_log_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_log_c_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal cols_log_c_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal cols_log_c_empty_n : STD_LOGIC;
    signal store_temp_full_n : STD_LOGIC;
    signal store_temp_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal store_temp_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal store_temp_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal store_temp_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_ap_ready : STD_LOGIC;
    signal start_for_p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_full_n : STD_LOGIC;
    signal start_for_p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_empty_n : STD_LOGIC;
    signal start_for_p_anonymous_namespace_Mean_ap_int_8_5u_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_p_anonymous_namespace_Mean_ap_int_8_5u_U0_full_n : STD_LOGIC;
    signal start_for_p_anonymous_namespace_Mean_ap_int_8_5u_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_p_anonymous_namespace_Mean_ap_int_8_5u_U0_empty_n : STD_LOGIC;
    signal start_for_p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_full_n : STD_LOGIC;
    signal start_for_p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_empty_n : STD_LOGIC;
    signal start_for_p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_full_n : STD_LOGIC;
    signal start_for_p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_empty_n : STD_LOGIC;
    signal start_for_p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_full_n : STD_LOGIC;
    signal start_for_p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component layernorm_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        output_data_addr : IN STD_LOGIC_VECTOR (31 downto 0);
        output_data_addr_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_data_addr_c_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        output_data_addr_c_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        output_data_addr_c_full_n : IN STD_LOGIC;
        output_data_addr_c_write : OUT STD_LOGIC;
        outputs : IN STD_LOGIC_VECTOR (63 downto 0);
        outputs_c_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        outputs_c_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        outputs_c_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        outputs_c_full_n : IN STD_LOGIC;
        outputs_c_write : OUT STD_LOGIC );
    end component;


    component layernorm_p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        cols_log : IN STD_LOGIC_VECTOR (31 downto 0);
        rows : IN STD_LOGIC_VECTOR (31 downto 0);
        addr : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ln_data_AWVALID : OUT STD_LOGIC;
        m_axi_ln_data_AWREADY : IN STD_LOGIC;
        m_axi_ln_data_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_ln_data_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ln_data_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ln_data_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ln_data_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ln_data_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ln_data_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ln_data_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ln_data_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ln_data_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ln_data_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ln_data_WVALID : OUT STD_LOGIC;
        m_axi_ln_data_WREADY : IN STD_LOGIC;
        m_axi_ln_data_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_ln_data_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ln_data_WLAST : OUT STD_LOGIC;
        m_axi_ln_data_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ln_data_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ln_data_ARVALID : OUT STD_LOGIC;
        m_axi_ln_data_ARREADY : IN STD_LOGIC;
        m_axi_ln_data_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_ln_data_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ln_data_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ln_data_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ln_data_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ln_data_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ln_data_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ln_data_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ln_data_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ln_data_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ln_data_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ln_data_RVALID : IN STD_LOGIC;
        m_axi_ln_data_RREADY : OUT STD_LOGIC;
        m_axi_ln_data_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_ln_data_RLAST : IN STD_LOGIC;
        m_axi_ln_data_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ln_data_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
        m_axi_ln_data_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ln_data_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ln_data_BVALID : IN STD_LOGIC;
        m_axi_ln_data_BREADY : OUT STD_LOGIC;
        m_axi_ln_data_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ln_data_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ln_data_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inputs : IN STD_LOGIC_VECTOR (63 downto 0);
        data_copy_a1_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        data_copy_a1_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        data_copy_a1_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        data_copy_a1_full_n : IN STD_LOGIC;
        data_copy_a1_write : OUT STD_LOGIC;
        data_copy_b2_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        data_copy_b2_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        data_copy_b2_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        data_copy_b2_full_n : IN STD_LOGIC;
        data_copy_b2_write : OUT STD_LOGIC;
        data_copy_c3_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        data_copy_c3_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        data_copy_c3_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        data_copy_c3_full_n : IN STD_LOGIC;
        data_copy_c3_write : OUT STD_LOGIC;
        rows_c19_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rows_c19_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        rows_c19_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        rows_c19_full_n : IN STD_LOGIC;
        rows_c19_write : OUT STD_LOGIC;
        cols_log_c22_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        cols_log_c22_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        cols_log_c22_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        cols_log_c22_full_n : IN STD_LOGIC;
        cols_log_c22_write : OUT STD_LOGIC );
    end component;


    component layernorm_p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        cols_log : IN STD_LOGIC_VECTOR (31 downto 0);
        rows : IN STD_LOGIC_VECTOR (31 downto 0);
        gamma_addr : IN STD_LOGIC_VECTOR (31 downto 0);
        beta_addr : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ln_paras_AWVALID : OUT STD_LOGIC;
        m_axi_ln_paras_AWREADY : IN STD_LOGIC;
        m_axi_ln_paras_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_ln_paras_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ln_paras_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ln_paras_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ln_paras_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ln_paras_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ln_paras_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ln_paras_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ln_paras_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ln_paras_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ln_paras_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ln_paras_WVALID : OUT STD_LOGIC;
        m_axi_ln_paras_WREADY : IN STD_LOGIC;
        m_axi_ln_paras_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_ln_paras_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ln_paras_WLAST : OUT STD_LOGIC;
        m_axi_ln_paras_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ln_paras_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ln_paras_ARVALID : OUT STD_LOGIC;
        m_axi_ln_paras_ARREADY : IN STD_LOGIC;
        m_axi_ln_paras_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_ln_paras_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ln_paras_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ln_paras_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ln_paras_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ln_paras_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ln_paras_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ln_paras_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ln_paras_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ln_paras_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ln_paras_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ln_paras_RVALID : IN STD_LOGIC;
        m_axi_ln_paras_RREADY : OUT STD_LOGIC;
        m_axi_ln_paras_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_ln_paras_RLAST : IN STD_LOGIC;
        m_axi_ln_paras_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ln_paras_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
        m_axi_ln_paras_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ln_paras_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ln_paras_BVALID : IN STD_LOGIC;
        m_axi_ln_paras_BREADY : OUT STD_LOGIC;
        m_axi_ln_paras_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ln_paras_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ln_paras_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inputs : IN STD_LOGIC_VECTOR (63 downto 0);
        gamma4_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        gamma4_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        gamma4_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        gamma4_full_n : IN STD_LOGIC;
        gamma4_write : OUT STD_LOGIC;
        beta5_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        beta5_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        beta5_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        beta5_full_n : IN STD_LOGIC;
        beta5_write : OUT STD_LOGIC );
    end component;


    component layernorm_p_anonymous_namespace_Mean_ap_int_8_5u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        cols_log_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        cols_log_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        cols_log_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        cols_log_empty_n : IN STD_LOGIC;
        cols_log_read : OUT STD_LOGIC;
        rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rows_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        rows_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        rows_empty_n : IN STD_LOGIC;
        rows_read : OUT STD_LOGIC;
        data_copy_a1_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        data_copy_a1_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        data_copy_a1_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        data_copy_a1_empty_n : IN STD_LOGIC;
        data_copy_a1_read : OUT STD_LOGIC;
        mean_a6_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        mean_a6_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        mean_a6_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        mean_a6_full_n : IN STD_LOGIC;
        mean_a6_write : OUT STD_LOGIC;
        mean_b7_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        mean_b7_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        mean_b7_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        mean_b7_full_n : IN STD_LOGIC;
        mean_b7_write : OUT STD_LOGIC;
        rows_c18_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rows_c18_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        rows_c18_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        rows_c18_full_n : IN STD_LOGIC;
        rows_c18_write : OUT STD_LOGIC;
        cols_log_c21_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        cols_log_c21_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        cols_log_c21_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        cols_log_c21_full_n : IN STD_LOGIC;
        cols_log_c21_write : OUT STD_LOGIC );
    end component;


    component layernorm_p_anonymous_namespace_StdDev_ap_int_8_float_5u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        cols_log_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        cols_log_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        cols_log_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        cols_log_empty_n : IN STD_LOGIC;
        cols_log_read : OUT STD_LOGIC;
        rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rows_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        rows_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        rows_empty_n : IN STD_LOGIC;
        rows_read : OUT STD_LOGIC;
        data_copy_b2_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        data_copy_b2_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        data_copy_b2_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        data_copy_b2_empty_n : IN STD_LOGIC;
        data_copy_b2_read : OUT STD_LOGIC;
        mean_a6_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        mean_a6_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        mean_a6_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        mean_a6_empty_n : IN STD_LOGIC;
        mean_a6_read : OUT STD_LOGIC;
        stddev8_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        stddev8_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        stddev8_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        stddev8_full_n : IN STD_LOGIC;
        stddev8_write : OUT STD_LOGIC;
        rows_c17_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rows_c17_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        rows_c17_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        rows_c17_full_n : IN STD_LOGIC;
        rows_c17_write : OUT STD_LOGIC;
        cols_log_c20_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        cols_log_c20_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        cols_log_c20_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        cols_log_c20_full_n : IN STD_LOGIC;
        cols_log_c20_write : OUT STD_LOGIC );
    end component;


    component layernorm_p_anonymous_namespace_Norm_ap_int_8_float_5u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        cols_log_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        cols_log_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        cols_log_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        cols_log_empty_n : IN STD_LOGIC;
        cols_log_read : OUT STD_LOGIC;
        rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rows_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        rows_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        rows_empty_n : IN STD_LOGIC;
        rows_read : OUT STD_LOGIC;
        data_copy_c3_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        data_copy_c3_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        data_copy_c3_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        data_copy_c3_empty_n : IN STD_LOGIC;
        data_copy_c3_read : OUT STD_LOGIC;
        mean_b7_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        mean_b7_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        mean_b7_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        mean_b7_empty_n : IN STD_LOGIC;
        mean_b7_read : OUT STD_LOGIC;
        stddev8_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        stddev8_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        stddev8_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        stddev8_empty_n : IN STD_LOGIC;
        stddev8_read : OUT STD_LOGIC;
        gamma4_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        gamma4_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        gamma4_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        gamma4_empty_n : IN STD_LOGIC;
        gamma4_read : OUT STD_LOGIC;
        beta5_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        beta5_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        beta5_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        beta5_empty_n : IN STD_LOGIC;
        beta5_read : OUT STD_LOGIC;
        norm9_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        norm9_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        norm9_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        norm9_full_n : IN STD_LOGIC;
        norm9_write : OUT STD_LOGIC;
        rows_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        rows_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        rows_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        rows_c_full_n : IN STD_LOGIC;
        rows_c_write : OUT STD_LOGIC;
        cols_log_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        cols_log_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        cols_log_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        cols_log_c_full_n : IN STD_LOGIC;
        cols_log_c_write : OUT STD_LOGIC );
    end component;


    component layernorm_p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        cols_log_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        cols_log_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        cols_log_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        cols_log_empty_n : IN STD_LOGIC;
        cols_log_read : OUT STD_LOGIC;
        rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        rows_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        rows_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        rows_empty_n : IN STD_LOGIC;
        rows_read : OUT STD_LOGIC;
        norm9_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        norm9_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        norm9_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        norm9_empty_n : IN STD_LOGIC;
        norm9_read : OUT STD_LOGIC;
        store_temp10_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        store_temp10_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        store_temp10_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        store_temp10_full_n : IN STD_LOGIC;
        store_temp10_write : OUT STD_LOGIC );
    end component;


    component layernorm_p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        outputs_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        outputs_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        outputs_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        outputs_empty_n : IN STD_LOGIC;
        outputs_read : OUT STD_LOGIC;
        addr_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        addr_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        addr_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        addr_empty_n : IN STD_LOGIC;
        addr_read : OUT STD_LOGIC;
        m_axi_ln_data_AWVALID : OUT STD_LOGIC;
        m_axi_ln_data_AWREADY : IN STD_LOGIC;
        m_axi_ln_data_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_ln_data_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ln_data_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ln_data_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ln_data_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ln_data_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ln_data_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ln_data_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ln_data_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ln_data_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ln_data_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ln_data_WVALID : OUT STD_LOGIC;
        m_axi_ln_data_WREADY : IN STD_LOGIC;
        m_axi_ln_data_WDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        m_axi_ln_data_WSTRB : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ln_data_WLAST : OUT STD_LOGIC;
        m_axi_ln_data_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ln_data_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ln_data_ARVALID : OUT STD_LOGIC;
        m_axi_ln_data_ARREADY : IN STD_LOGIC;
        m_axi_ln_data_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_ln_data_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ln_data_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_ln_data_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ln_data_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ln_data_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ln_data_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ln_data_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_ln_data_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ln_data_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_ln_data_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ln_data_RVALID : IN STD_LOGIC;
        m_axi_ln_data_RREADY : OUT STD_LOGIC;
        m_axi_ln_data_RDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        m_axi_ln_data_RLAST : IN STD_LOGIC;
        m_axi_ln_data_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ln_data_RFIFONUM : IN STD_LOGIC_VECTOR (12 downto 0);
        m_axi_ln_data_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ln_data_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ln_data_BVALID : IN STD_LOGIC;
        m_axi_ln_data_BREADY : OUT STD_LOGIC;
        m_axi_ln_data_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_ln_data_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_ln_data_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        store_temp10_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        store_temp10_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        store_temp10_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        store_temp10_empty_n : IN STD_LOGIC;
        store_temp10_read : OUT STD_LOGIC;
        done : OUT STD_LOGIC_VECTOR (31 downto 0);
        done_ap_vld : OUT STD_LOGIC );
    end component;


    component layernorm_fifo_w32_d7_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component layernorm_fifo_w64_d7_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component layernorm_fifo_w256_d16_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (255 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (255 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component layernorm_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component layernorm_fifo_w8_d32_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component layernorm_fifo_w32_d32_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component layernorm_start_for_p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component layernorm_start_for_p_anonymous_namespace_Mean_ap_int_8_5u_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component layernorm_start_for_p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component layernorm_start_for_p_anonymous_namespace_Norm_ap_int_8_float_5u_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component layernorm_start_for_p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component layernorm_ln_addr_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        input_data_addr : OUT STD_LOGIC_VECTOR (31 downto 0);
        gama_addr : OUT STD_LOGIC_VECTOR (31 downto 0);
        beta_addr : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_data_addr : OUT STD_LOGIC_VECTOR (31 downto 0);
        rows : OUT STD_LOGIC_VECTOR (31 downto 0);
        cols_log : OUT STD_LOGIC_VECTOR (31 downto 0);
        q_value : OUT STD_LOGIC_VECTOR (31 downto 0);
        shift_value : OUT STD_LOGIC_VECTOR (31 downto 0);
        done : IN STD_LOGIC_VECTOR (31 downto 0);
        done_ap_vld : IN STD_LOGIC;
        inputs : OUT STD_LOGIC_VECTOR (63 downto 0);
        outputs : OUT STD_LOGIC_VECTOR (63 downto 0);
        paras : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component layernorm_ln_data_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (12 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (31 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component layernorm_ln_paras_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (12 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (255 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (31 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    ln_addr_s_axi_U : component layernorm_ln_addr_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_LN_ADDR_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_LN_ADDR_DATA_WIDTH)
    port map (
        AWVALID => s_axi_ln_addr_AWVALID,
        AWREADY => s_axi_ln_addr_AWREADY,
        AWADDR => s_axi_ln_addr_AWADDR,
        WVALID => s_axi_ln_addr_WVALID,
        WREADY => s_axi_ln_addr_WREADY,
        WDATA => s_axi_ln_addr_WDATA,
        WSTRB => s_axi_ln_addr_WSTRB,
        ARVALID => s_axi_ln_addr_ARVALID,
        ARREADY => s_axi_ln_addr_ARREADY,
        ARADDR => s_axi_ln_addr_ARADDR,
        RVALID => s_axi_ln_addr_RVALID,
        RREADY => s_axi_ln_addr_RREADY,
        RDATA => s_axi_ln_addr_RDATA,
        RRESP => s_axi_ln_addr_RRESP,
        BVALID => s_axi_ln_addr_BVALID,
        BREADY => s_axi_ln_addr_BREADY,
        BRESP => s_axi_ln_addr_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        input_data_addr => input_data_addr,
        gama_addr => gama_addr,
        beta_addr => beta_addr,
        output_data_addr => output_data_addr,
        rows => rows,
        cols_log => cols_log,
        q_value => q_value,
        shift_value => shift_value,
        done => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_done,
        done_ap_vld => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_done_ap_vld,
        inputs => inputs,
        outputs => outputs,
        paras => paras,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    ln_data_m_axi_U : component layernorm_ln_data_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 37,
        MAX_READ_BURST_LENGTH => 64,
        MAX_WRITE_BURST_LENGTH => 64,
        C_M_AXI_ID_WIDTH => C_M_AXI_LN_DATA_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_LN_DATA_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_LN_DATA_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_LN_DATA_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_LN_DATA_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_LN_DATA_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_LN_DATA_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_LN_DATA_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_LN_DATA_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_LN_DATA_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_LN_DATA_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 13,
        USER_DW => 256,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 64,
        NUM_WRITE_OUTSTANDING => 1)
    port map (
        AWVALID => m_axi_ln_data_AWVALID,
        AWREADY => m_axi_ln_data_AWREADY,
        AWADDR => m_axi_ln_data_AWADDR,
        AWID => m_axi_ln_data_AWID,
        AWLEN => m_axi_ln_data_AWLEN,
        AWSIZE => m_axi_ln_data_AWSIZE,
        AWBURST => m_axi_ln_data_AWBURST,
        AWLOCK => m_axi_ln_data_AWLOCK,
        AWCACHE => m_axi_ln_data_AWCACHE,
        AWPROT => m_axi_ln_data_AWPROT,
        AWQOS => m_axi_ln_data_AWQOS,
        AWREGION => m_axi_ln_data_AWREGION,
        AWUSER => m_axi_ln_data_AWUSER,
        WVALID => m_axi_ln_data_WVALID,
        WREADY => m_axi_ln_data_WREADY,
        WDATA => m_axi_ln_data_WDATA,
        WSTRB => m_axi_ln_data_WSTRB,
        WLAST => m_axi_ln_data_WLAST,
        WID => m_axi_ln_data_WID,
        WUSER => m_axi_ln_data_WUSER,
        ARVALID => m_axi_ln_data_ARVALID,
        ARREADY => m_axi_ln_data_ARREADY,
        ARADDR => m_axi_ln_data_ARADDR,
        ARID => m_axi_ln_data_ARID,
        ARLEN => m_axi_ln_data_ARLEN,
        ARSIZE => m_axi_ln_data_ARSIZE,
        ARBURST => m_axi_ln_data_ARBURST,
        ARLOCK => m_axi_ln_data_ARLOCK,
        ARCACHE => m_axi_ln_data_ARCACHE,
        ARPROT => m_axi_ln_data_ARPROT,
        ARQOS => m_axi_ln_data_ARQOS,
        ARREGION => m_axi_ln_data_ARREGION,
        ARUSER => m_axi_ln_data_ARUSER,
        RVALID => m_axi_ln_data_RVALID,
        RREADY => m_axi_ln_data_RREADY,
        RDATA => m_axi_ln_data_RDATA,
        RLAST => m_axi_ln_data_RLAST,
        RID => m_axi_ln_data_RID,
        RUSER => m_axi_ln_data_RUSER,
        RRESP => m_axi_ln_data_RRESP,
        BVALID => m_axi_ln_data_BVALID,
        BREADY => m_axi_ln_data_BREADY,
        BRESP => m_axi_ln_data_BRESP,
        BID => m_axi_ln_data_BID,
        BUSER => m_axi_ln_data_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARVALID,
        I_ARREADY => ln_data_ARREADY,
        I_ARADDR => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARADDR,
        I_ARLEN => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARLEN,
        I_RVALID => ln_data_RVALID,
        I_RREADY => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_RREADY,
        I_RDATA => ln_data_RDATA,
        I_RFIFONUM => ln_data_RFIFONUM,
        I_AWVALID => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWVALID,
        I_AWREADY => ln_data_AWREADY,
        I_AWADDR => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWADDR,
        I_AWLEN => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWLEN,
        I_WVALID => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_WVALID,
        I_WREADY => ln_data_WREADY,
        I_WDATA => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_WDATA,
        I_WSTRB => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_WSTRB,
        I_BVALID => ln_data_BVALID,
        I_BREADY => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_BREADY);

    ln_paras_m_axi_U : component layernorm_ln_paras_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 37,
        MAX_READ_BURST_LENGTH => 64,
        MAX_WRITE_BURST_LENGTH => 64,
        C_M_AXI_ID_WIDTH => C_M_AXI_LN_PARAS_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_LN_PARAS_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_LN_PARAS_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_LN_PARAS_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_LN_PARAS_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_LN_PARAS_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_LN_PARAS_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_LN_PARAS_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_LN_PARAS_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_LN_PARAS_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_LN_PARAS_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 13,
        USER_DW => 256,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 64,
        NUM_WRITE_OUTSTANDING => 1)
    port map (
        AWVALID => m_axi_ln_paras_AWVALID,
        AWREADY => m_axi_ln_paras_AWREADY,
        AWADDR => m_axi_ln_paras_AWADDR,
        AWID => m_axi_ln_paras_AWID,
        AWLEN => m_axi_ln_paras_AWLEN,
        AWSIZE => m_axi_ln_paras_AWSIZE,
        AWBURST => m_axi_ln_paras_AWBURST,
        AWLOCK => m_axi_ln_paras_AWLOCK,
        AWCACHE => m_axi_ln_paras_AWCACHE,
        AWPROT => m_axi_ln_paras_AWPROT,
        AWQOS => m_axi_ln_paras_AWQOS,
        AWREGION => m_axi_ln_paras_AWREGION,
        AWUSER => m_axi_ln_paras_AWUSER,
        WVALID => m_axi_ln_paras_WVALID,
        WREADY => m_axi_ln_paras_WREADY,
        WDATA => m_axi_ln_paras_WDATA,
        WSTRB => m_axi_ln_paras_WSTRB,
        WLAST => m_axi_ln_paras_WLAST,
        WID => m_axi_ln_paras_WID,
        WUSER => m_axi_ln_paras_WUSER,
        ARVALID => m_axi_ln_paras_ARVALID,
        ARREADY => m_axi_ln_paras_ARREADY,
        ARADDR => m_axi_ln_paras_ARADDR,
        ARID => m_axi_ln_paras_ARID,
        ARLEN => m_axi_ln_paras_ARLEN,
        ARSIZE => m_axi_ln_paras_ARSIZE,
        ARBURST => m_axi_ln_paras_ARBURST,
        ARLOCK => m_axi_ln_paras_ARLOCK,
        ARCACHE => m_axi_ln_paras_ARCACHE,
        ARPROT => m_axi_ln_paras_ARPROT,
        ARQOS => m_axi_ln_paras_ARQOS,
        ARREGION => m_axi_ln_paras_ARREGION,
        ARUSER => m_axi_ln_paras_ARUSER,
        RVALID => m_axi_ln_paras_RVALID,
        RREADY => m_axi_ln_paras_RREADY,
        RDATA => m_axi_ln_paras_RDATA,
        RLAST => m_axi_ln_paras_RLAST,
        RID => m_axi_ln_paras_RID,
        RUSER => m_axi_ln_paras_RUSER,
        RRESP => m_axi_ln_paras_RRESP,
        BVALID => m_axi_ln_paras_BVALID,
        BREADY => m_axi_ln_paras_BREADY,
        BRESP => m_axi_ln_paras_BRESP,
        BID => m_axi_ln_paras_BID,
        BUSER => m_axi_ln_paras_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_ARVALID,
        I_ARREADY => ln_paras_ARREADY,
        I_ARADDR => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_ARADDR,
        I_ARLEN => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_ARLEN,
        I_RVALID => ln_paras_RVALID,
        I_RREADY => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_RREADY,
        I_RDATA => ln_paras_RDATA,
        I_RFIFONUM => ln_paras_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => ln_paras_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => ln_paras_WREADY,
        I_WDATA => ap_const_lv256_lc_1,
        I_WSTRB => ap_const_lv32_0,
        I_BVALID => ln_paras_BVALID,
        I_BREADY => ap_const_logic_0);

    entry_proc_U0 : component layernorm_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => entry_proc_U0_ap_start,
        start_full_n => start_for_p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_full_n,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        start_out => entry_proc_U0_start_out,
        start_write => entry_proc_U0_start_write,
        output_data_addr => output_data_addr,
        output_data_addr_c_din => entry_proc_U0_output_data_addr_c_din,
        output_data_addr_c_num_data_valid => output_data_addr_c_num_data_valid,
        output_data_addr_c_fifo_cap => output_data_addr_c_fifo_cap,
        output_data_addr_c_full_n => output_data_addr_c_full_n,
        output_data_addr_c_write => entry_proc_U0_output_data_addr_c_write,
        outputs => outputs,
        outputs_c_din => entry_proc_U0_outputs_c_din,
        outputs_c_num_data_valid => outputs_c_num_data_valid,
        outputs_c_fifo_cap => outputs_c_fifo_cap,
        outputs_c_full_n => outputs_c_full_n,
        outputs_c_write => entry_proc_U0_outputs_c_write);

    p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0 : component layernorm_p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_ap_start,
        start_full_n => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_start_full_n,
        ap_done => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_ap_done,
        ap_continue => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_ap_continue,
        ap_idle => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_ap_idle,
        ap_ready => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_ap_ready,
        start_out => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_start_out,
        start_write => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_start_write,
        cols_log => cols_log,
        rows => rows,
        addr => input_data_addr,
        m_axi_ln_data_AWVALID => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWVALID,
        m_axi_ln_data_AWREADY => ap_const_logic_0,
        m_axi_ln_data_AWADDR => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWADDR,
        m_axi_ln_data_AWID => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWID,
        m_axi_ln_data_AWLEN => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWLEN,
        m_axi_ln_data_AWSIZE => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWSIZE,
        m_axi_ln_data_AWBURST => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWBURST,
        m_axi_ln_data_AWLOCK => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWLOCK,
        m_axi_ln_data_AWCACHE => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWCACHE,
        m_axi_ln_data_AWPROT => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWPROT,
        m_axi_ln_data_AWQOS => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWQOS,
        m_axi_ln_data_AWREGION => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWREGION,
        m_axi_ln_data_AWUSER => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWUSER,
        m_axi_ln_data_WVALID => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_WVALID,
        m_axi_ln_data_WREADY => ap_const_logic_0,
        m_axi_ln_data_WDATA => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_WDATA,
        m_axi_ln_data_WSTRB => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_WSTRB,
        m_axi_ln_data_WLAST => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_WLAST,
        m_axi_ln_data_WID => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_WID,
        m_axi_ln_data_WUSER => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_WUSER,
        m_axi_ln_data_ARVALID => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARVALID,
        m_axi_ln_data_ARREADY => ln_data_ARREADY,
        m_axi_ln_data_ARADDR => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARADDR,
        m_axi_ln_data_ARID => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARID,
        m_axi_ln_data_ARLEN => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARLEN,
        m_axi_ln_data_ARSIZE => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARSIZE,
        m_axi_ln_data_ARBURST => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARBURST,
        m_axi_ln_data_ARLOCK => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARLOCK,
        m_axi_ln_data_ARCACHE => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARCACHE,
        m_axi_ln_data_ARPROT => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARPROT,
        m_axi_ln_data_ARQOS => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARQOS,
        m_axi_ln_data_ARREGION => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARREGION,
        m_axi_ln_data_ARUSER => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARUSER,
        m_axi_ln_data_RVALID => ln_data_RVALID,
        m_axi_ln_data_RREADY => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_RREADY,
        m_axi_ln_data_RDATA => ln_data_RDATA,
        m_axi_ln_data_RLAST => ln_data_RLAST,
        m_axi_ln_data_RID => ln_data_RID,
        m_axi_ln_data_RFIFONUM => ln_data_RFIFONUM,
        m_axi_ln_data_RUSER => ln_data_RUSER,
        m_axi_ln_data_RRESP => ln_data_RRESP,
        m_axi_ln_data_BVALID => ap_const_logic_0,
        m_axi_ln_data_BREADY => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_BREADY,
        m_axi_ln_data_BRESP => ap_const_lv2_0,
        m_axi_ln_data_BID => ap_const_lv1_0,
        m_axi_ln_data_BUSER => ap_const_lv1_0,
        inputs => inputs,
        data_copy_a1_din => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_data_copy_a1_din,
        data_copy_a1_num_data_valid => data_copy_a_num_data_valid,
        data_copy_a1_fifo_cap => data_copy_a_fifo_cap,
        data_copy_a1_full_n => data_copy_a_full_n,
        data_copy_a1_write => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_data_copy_a1_write,
        data_copy_b2_din => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_data_copy_b2_din,
        data_copy_b2_num_data_valid => data_copy_b_num_data_valid,
        data_copy_b2_fifo_cap => data_copy_b_fifo_cap,
        data_copy_b2_full_n => data_copy_b_full_n,
        data_copy_b2_write => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_data_copy_b2_write,
        data_copy_c3_din => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_data_copy_c3_din,
        data_copy_c3_num_data_valid => data_copy_c_num_data_valid,
        data_copy_c3_fifo_cap => data_copy_c_fifo_cap,
        data_copy_c3_full_n => data_copy_c_full_n,
        data_copy_c3_write => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_data_copy_c3_write,
        rows_c19_din => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_rows_c19_din,
        rows_c19_num_data_valid => rows_c19_num_data_valid,
        rows_c19_fifo_cap => rows_c19_fifo_cap,
        rows_c19_full_n => rows_c19_full_n,
        rows_c19_write => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_rows_c19_write,
        cols_log_c22_din => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_cols_log_c22_din,
        cols_log_c22_num_data_valid => cols_log_c22_num_data_valid,
        cols_log_c22_fifo_cap => cols_log_c22_fifo_cap,
        cols_log_c22_full_n => cols_log_c22_full_n,
        cols_log_c22_write => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_cols_log_c22_write);

    p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0 : component layernorm_p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_ap_start,
        ap_done => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_ap_done,
        ap_continue => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_ap_continue,
        ap_idle => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_ap_idle,
        ap_ready => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_ap_ready,
        cols_log => cols_log,
        rows => rows,
        gamma_addr => gama_addr,
        beta_addr => beta_addr,
        m_axi_ln_paras_AWVALID => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_AWVALID,
        m_axi_ln_paras_AWREADY => ap_const_logic_0,
        m_axi_ln_paras_AWADDR => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_AWADDR,
        m_axi_ln_paras_AWID => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_AWID,
        m_axi_ln_paras_AWLEN => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_AWLEN,
        m_axi_ln_paras_AWSIZE => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_AWSIZE,
        m_axi_ln_paras_AWBURST => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_AWBURST,
        m_axi_ln_paras_AWLOCK => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_AWLOCK,
        m_axi_ln_paras_AWCACHE => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_AWCACHE,
        m_axi_ln_paras_AWPROT => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_AWPROT,
        m_axi_ln_paras_AWQOS => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_AWQOS,
        m_axi_ln_paras_AWREGION => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_AWREGION,
        m_axi_ln_paras_AWUSER => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_AWUSER,
        m_axi_ln_paras_WVALID => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_WVALID,
        m_axi_ln_paras_WREADY => ap_const_logic_0,
        m_axi_ln_paras_WDATA => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_WDATA,
        m_axi_ln_paras_WSTRB => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_WSTRB,
        m_axi_ln_paras_WLAST => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_WLAST,
        m_axi_ln_paras_WID => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_WID,
        m_axi_ln_paras_WUSER => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_WUSER,
        m_axi_ln_paras_ARVALID => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_ARVALID,
        m_axi_ln_paras_ARREADY => ln_paras_ARREADY,
        m_axi_ln_paras_ARADDR => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_ARADDR,
        m_axi_ln_paras_ARID => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_ARID,
        m_axi_ln_paras_ARLEN => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_ARLEN,
        m_axi_ln_paras_ARSIZE => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_ARSIZE,
        m_axi_ln_paras_ARBURST => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_ARBURST,
        m_axi_ln_paras_ARLOCK => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_ARLOCK,
        m_axi_ln_paras_ARCACHE => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_ARCACHE,
        m_axi_ln_paras_ARPROT => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_ARPROT,
        m_axi_ln_paras_ARQOS => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_ARQOS,
        m_axi_ln_paras_ARREGION => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_ARREGION,
        m_axi_ln_paras_ARUSER => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_ARUSER,
        m_axi_ln_paras_RVALID => ln_paras_RVALID,
        m_axi_ln_paras_RREADY => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_RREADY,
        m_axi_ln_paras_RDATA => ln_paras_RDATA,
        m_axi_ln_paras_RLAST => ln_paras_RLAST,
        m_axi_ln_paras_RID => ln_paras_RID,
        m_axi_ln_paras_RFIFONUM => ln_paras_RFIFONUM,
        m_axi_ln_paras_RUSER => ln_paras_RUSER,
        m_axi_ln_paras_RRESP => ln_paras_RRESP,
        m_axi_ln_paras_BVALID => ap_const_logic_0,
        m_axi_ln_paras_BREADY => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_paras_BREADY,
        m_axi_ln_paras_BRESP => ap_const_lv2_0,
        m_axi_ln_paras_BID => ap_const_lv1_0,
        m_axi_ln_paras_BUSER => ap_const_lv1_0,
        inputs => paras,
        gamma4_din => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_gamma4_din,
        gamma4_num_data_valid => gamma_num_data_valid,
        gamma4_fifo_cap => gamma_fifo_cap,
        gamma4_full_n => gamma_full_n,
        gamma4_write => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_gamma4_write,
        beta5_din => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_beta5_din,
        beta5_num_data_valid => beta_num_data_valid,
        beta5_fifo_cap => beta_fifo_cap,
        beta5_full_n => beta_full_n,
        beta5_write => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_beta5_write);

    p_anonymous_namespace_Mean_ap_int_8_5u_U0 : component layernorm_p_anonymous_namespace_Mean_ap_int_8_5u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => p_anonymous_namespace_Mean_ap_int_8_5u_U0_ap_start,
        ap_done => p_anonymous_namespace_Mean_ap_int_8_5u_U0_ap_done,
        ap_continue => p_anonymous_namespace_Mean_ap_int_8_5u_U0_ap_continue,
        ap_idle => p_anonymous_namespace_Mean_ap_int_8_5u_U0_ap_idle,
        ap_ready => p_anonymous_namespace_Mean_ap_int_8_5u_U0_ap_ready,
        cols_log_dout => cols_log_c22_dout,
        cols_log_num_data_valid => cols_log_c22_num_data_valid,
        cols_log_fifo_cap => cols_log_c22_fifo_cap,
        cols_log_empty_n => cols_log_c22_empty_n,
        cols_log_read => p_anonymous_namespace_Mean_ap_int_8_5u_U0_cols_log_read,
        rows_dout => rows_c19_dout,
        rows_num_data_valid => rows_c19_num_data_valid,
        rows_fifo_cap => rows_c19_fifo_cap,
        rows_empty_n => rows_c19_empty_n,
        rows_read => p_anonymous_namespace_Mean_ap_int_8_5u_U0_rows_read,
        data_copy_a1_dout => data_copy_a_dout,
        data_copy_a1_num_data_valid => data_copy_a_num_data_valid,
        data_copy_a1_fifo_cap => data_copy_a_fifo_cap,
        data_copy_a1_empty_n => data_copy_a_empty_n,
        data_copy_a1_read => p_anonymous_namespace_Mean_ap_int_8_5u_U0_data_copy_a1_read,
        mean_a6_din => p_anonymous_namespace_Mean_ap_int_8_5u_U0_mean_a6_din,
        mean_a6_num_data_valid => mean_a_num_data_valid,
        mean_a6_fifo_cap => mean_a_fifo_cap,
        mean_a6_full_n => mean_a_full_n,
        mean_a6_write => p_anonymous_namespace_Mean_ap_int_8_5u_U0_mean_a6_write,
        mean_b7_din => p_anonymous_namespace_Mean_ap_int_8_5u_U0_mean_b7_din,
        mean_b7_num_data_valid => mean_b_num_data_valid,
        mean_b7_fifo_cap => mean_b_fifo_cap,
        mean_b7_full_n => mean_b_full_n,
        mean_b7_write => p_anonymous_namespace_Mean_ap_int_8_5u_U0_mean_b7_write,
        rows_c18_din => p_anonymous_namespace_Mean_ap_int_8_5u_U0_rows_c18_din,
        rows_c18_num_data_valid => rows_c18_num_data_valid,
        rows_c18_fifo_cap => rows_c18_fifo_cap,
        rows_c18_full_n => rows_c18_full_n,
        rows_c18_write => p_anonymous_namespace_Mean_ap_int_8_5u_U0_rows_c18_write,
        cols_log_c21_din => p_anonymous_namespace_Mean_ap_int_8_5u_U0_cols_log_c21_din,
        cols_log_c21_num_data_valid => cols_log_c21_num_data_valid,
        cols_log_c21_fifo_cap => cols_log_c21_fifo_cap,
        cols_log_c21_full_n => cols_log_c21_full_n,
        cols_log_c21_write => p_anonymous_namespace_Mean_ap_int_8_5u_U0_cols_log_c21_write);

    p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0 : component layernorm_p_anonymous_namespace_StdDev_ap_int_8_float_5u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_ap_start,
        ap_done => p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_ap_done,
        ap_continue => p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_ap_continue,
        ap_idle => p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_ap_idle,
        ap_ready => p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_ap_ready,
        cols_log_dout => cols_log_c21_dout,
        cols_log_num_data_valid => cols_log_c21_num_data_valid,
        cols_log_fifo_cap => cols_log_c21_fifo_cap,
        cols_log_empty_n => cols_log_c21_empty_n,
        cols_log_read => p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_cols_log_read,
        rows_dout => rows_c18_dout,
        rows_num_data_valid => rows_c18_num_data_valid,
        rows_fifo_cap => rows_c18_fifo_cap,
        rows_empty_n => rows_c18_empty_n,
        rows_read => p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_rows_read,
        data_copy_b2_dout => data_copy_b_dout,
        data_copy_b2_num_data_valid => data_copy_b_num_data_valid,
        data_copy_b2_fifo_cap => data_copy_b_fifo_cap,
        data_copy_b2_empty_n => data_copy_b_empty_n,
        data_copy_b2_read => p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_data_copy_b2_read,
        mean_a6_dout => mean_a_dout,
        mean_a6_num_data_valid => mean_a_num_data_valid,
        mean_a6_fifo_cap => mean_a_fifo_cap,
        mean_a6_empty_n => mean_a_empty_n,
        mean_a6_read => p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_mean_a6_read,
        stddev8_din => p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_stddev8_din,
        stddev8_num_data_valid => stddev_num_data_valid,
        stddev8_fifo_cap => stddev_fifo_cap,
        stddev8_full_n => stddev_full_n,
        stddev8_write => p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_stddev8_write,
        rows_c17_din => p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_rows_c17_din,
        rows_c17_num_data_valid => rows_c17_num_data_valid,
        rows_c17_fifo_cap => rows_c17_fifo_cap,
        rows_c17_full_n => rows_c17_full_n,
        rows_c17_write => p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_rows_c17_write,
        cols_log_c20_din => p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_cols_log_c20_din,
        cols_log_c20_num_data_valid => cols_log_c20_num_data_valid,
        cols_log_c20_fifo_cap => cols_log_c20_fifo_cap,
        cols_log_c20_full_n => cols_log_c20_full_n,
        cols_log_c20_write => p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_cols_log_c20_write);

    p_anonymous_namespace_Norm_ap_int_8_float_5u_U0 : component layernorm_p_anonymous_namespace_Norm_ap_int_8_float_5u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_ap_start,
        start_full_n => start_for_p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_full_n,
        ap_done => p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_ap_done,
        ap_continue => p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_ap_continue,
        ap_idle => p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_ap_idle,
        ap_ready => p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_ap_ready,
        start_out => p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_start_out,
        start_write => p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_start_write,
        cols_log_dout => cols_log_c20_dout,
        cols_log_num_data_valid => cols_log_c20_num_data_valid,
        cols_log_fifo_cap => cols_log_c20_fifo_cap,
        cols_log_empty_n => cols_log_c20_empty_n,
        cols_log_read => p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_cols_log_read,
        rows_dout => rows_c17_dout,
        rows_num_data_valid => rows_c17_num_data_valid,
        rows_fifo_cap => rows_c17_fifo_cap,
        rows_empty_n => rows_c17_empty_n,
        rows_read => p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_rows_read,
        data_copy_c3_dout => data_copy_c_dout,
        data_copy_c3_num_data_valid => data_copy_c_num_data_valid,
        data_copy_c3_fifo_cap => data_copy_c_fifo_cap,
        data_copy_c3_empty_n => data_copy_c_empty_n,
        data_copy_c3_read => p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_data_copy_c3_read,
        mean_b7_dout => mean_b_dout,
        mean_b7_num_data_valid => mean_b_num_data_valid,
        mean_b7_fifo_cap => mean_b_fifo_cap,
        mean_b7_empty_n => mean_b_empty_n,
        mean_b7_read => p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_mean_b7_read,
        stddev8_dout => stddev_dout,
        stddev8_num_data_valid => stddev_num_data_valid,
        stddev8_fifo_cap => stddev_fifo_cap,
        stddev8_empty_n => stddev_empty_n,
        stddev8_read => p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_stddev8_read,
        gamma4_dout => gamma_dout,
        gamma4_num_data_valid => gamma_num_data_valid,
        gamma4_fifo_cap => gamma_fifo_cap,
        gamma4_empty_n => gamma_empty_n,
        gamma4_read => p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_gamma4_read,
        beta5_dout => beta_dout,
        beta5_num_data_valid => beta_num_data_valid,
        beta5_fifo_cap => beta_fifo_cap,
        beta5_empty_n => beta_empty_n,
        beta5_read => p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_beta5_read,
        norm9_din => p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_norm9_din,
        norm9_num_data_valid => norm_num_data_valid,
        norm9_fifo_cap => norm_fifo_cap,
        norm9_full_n => norm_full_n,
        norm9_write => p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_norm9_write,
        rows_c_din => p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_rows_c_din,
        rows_c_num_data_valid => rows_c_num_data_valid,
        rows_c_fifo_cap => rows_c_fifo_cap,
        rows_c_full_n => rows_c_full_n,
        rows_c_write => p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_rows_c_write,
        cols_log_c_din => p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_cols_log_c_din,
        cols_log_c_num_data_valid => cols_log_c_num_data_valid,
        cols_log_c_fifo_cap => cols_log_c_fifo_cap,
        cols_log_c_full_n => cols_log_c_full_n,
        cols_log_c_write => p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_cols_log_c_write);

    p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0 : component layernorm_p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_ap_start,
        ap_done => p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_ap_done,
        ap_continue => p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_ap_continue,
        ap_idle => p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_ap_idle,
        ap_ready => p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_ap_ready,
        cols_log_dout => cols_log_c_dout,
        cols_log_num_data_valid => cols_log_c_num_data_valid,
        cols_log_fifo_cap => cols_log_c_fifo_cap,
        cols_log_empty_n => cols_log_c_empty_n,
        cols_log_read => p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_cols_log_read,
        rows_dout => rows_c_dout,
        rows_num_data_valid => rows_c_num_data_valid,
        rows_fifo_cap => rows_c_fifo_cap,
        rows_empty_n => rows_c_empty_n,
        rows_read => p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_rows_read,
        norm9_dout => norm_dout,
        norm9_num_data_valid => norm_num_data_valid,
        norm9_fifo_cap => norm_fifo_cap,
        norm9_empty_n => norm_empty_n,
        norm9_read => p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_norm9_read,
        store_temp10_din => p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_store_temp10_din,
        store_temp10_num_data_valid => store_temp_num_data_valid,
        store_temp10_fifo_cap => store_temp_fifo_cap,
        store_temp10_full_n => store_temp_full_n,
        store_temp10_write => p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_store_temp10_write);

    p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0 : component layernorm_p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_ap_start,
        ap_done => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_ap_done,
        ap_continue => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_ap_continue,
        ap_idle => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_ap_idle,
        ap_ready => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_ap_ready,
        outputs_dout => outputs_c_dout,
        outputs_num_data_valid => outputs_c_num_data_valid,
        outputs_fifo_cap => outputs_c_fifo_cap,
        outputs_empty_n => outputs_c_empty_n,
        outputs_read => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_outputs_read,
        addr_dout => output_data_addr_c_dout,
        addr_num_data_valid => output_data_addr_c_num_data_valid,
        addr_fifo_cap => output_data_addr_c_fifo_cap,
        addr_empty_n => output_data_addr_c_empty_n,
        addr_read => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_addr_read,
        m_axi_ln_data_AWVALID => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWVALID,
        m_axi_ln_data_AWREADY => ln_data_AWREADY,
        m_axi_ln_data_AWADDR => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWADDR,
        m_axi_ln_data_AWID => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWID,
        m_axi_ln_data_AWLEN => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWLEN,
        m_axi_ln_data_AWSIZE => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWSIZE,
        m_axi_ln_data_AWBURST => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWBURST,
        m_axi_ln_data_AWLOCK => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWLOCK,
        m_axi_ln_data_AWCACHE => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWCACHE,
        m_axi_ln_data_AWPROT => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWPROT,
        m_axi_ln_data_AWQOS => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWQOS,
        m_axi_ln_data_AWREGION => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWREGION,
        m_axi_ln_data_AWUSER => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_AWUSER,
        m_axi_ln_data_WVALID => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_WVALID,
        m_axi_ln_data_WREADY => ln_data_WREADY,
        m_axi_ln_data_WDATA => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_WDATA,
        m_axi_ln_data_WSTRB => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_WSTRB,
        m_axi_ln_data_WLAST => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_WLAST,
        m_axi_ln_data_WID => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_WID,
        m_axi_ln_data_WUSER => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_WUSER,
        m_axi_ln_data_ARVALID => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARVALID,
        m_axi_ln_data_ARREADY => ap_const_logic_0,
        m_axi_ln_data_ARADDR => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARADDR,
        m_axi_ln_data_ARID => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARID,
        m_axi_ln_data_ARLEN => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARLEN,
        m_axi_ln_data_ARSIZE => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARSIZE,
        m_axi_ln_data_ARBURST => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARBURST,
        m_axi_ln_data_ARLOCK => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARLOCK,
        m_axi_ln_data_ARCACHE => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARCACHE,
        m_axi_ln_data_ARPROT => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARPROT,
        m_axi_ln_data_ARQOS => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARQOS,
        m_axi_ln_data_ARREGION => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARREGION,
        m_axi_ln_data_ARUSER => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_ARUSER,
        m_axi_ln_data_RVALID => ap_const_logic_0,
        m_axi_ln_data_RREADY => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_RREADY,
        m_axi_ln_data_RDATA => ap_const_lv256_lc_1,
        m_axi_ln_data_RLAST => ap_const_logic_0,
        m_axi_ln_data_RID => ap_const_lv1_0,
        m_axi_ln_data_RFIFONUM => ap_const_lv13_0,
        m_axi_ln_data_RUSER => ap_const_lv1_0,
        m_axi_ln_data_RRESP => ap_const_lv2_0,
        m_axi_ln_data_BVALID => ln_data_BVALID,
        m_axi_ln_data_BREADY => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_m_axi_ln_data_BREADY,
        m_axi_ln_data_BRESP => ln_data_BRESP,
        m_axi_ln_data_BID => ln_data_BID,
        m_axi_ln_data_BUSER => ln_data_BUSER,
        store_temp10_dout => store_temp_dout,
        store_temp10_num_data_valid => store_temp_num_data_valid,
        store_temp10_fifo_cap => store_temp_fifo_cap,
        store_temp10_empty_n => store_temp_empty_n,
        store_temp10_read => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_store_temp10_read,
        done => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_done,
        done_ap_vld => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_done_ap_vld);

    output_data_addr_c_U : component layernorm_fifo_w32_d7_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_output_data_addr_c_din,
        if_full_n => output_data_addr_c_full_n,
        if_write => entry_proc_U0_output_data_addr_c_write,
        if_dout => output_data_addr_c_dout,
        if_num_data_valid => output_data_addr_c_num_data_valid,
        if_fifo_cap => output_data_addr_c_fifo_cap,
        if_empty_n => output_data_addr_c_empty_n,
        if_read => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_addr_read);

    outputs_c_U : component layernorm_fifo_w64_d7_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_outputs_c_din,
        if_full_n => outputs_c_full_n,
        if_write => entry_proc_U0_outputs_c_write,
        if_dout => outputs_c_dout,
        if_num_data_valid => outputs_c_num_data_valid,
        if_fifo_cap => outputs_c_fifo_cap,
        if_empty_n => outputs_c_empty_n,
        if_read => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_outputs_read);

    data_copy_a_U : component layernorm_fifo_w256_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_data_copy_a1_din,
        if_full_n => data_copy_a_full_n,
        if_write => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_data_copy_a1_write,
        if_dout => data_copy_a_dout,
        if_num_data_valid => data_copy_a_num_data_valid,
        if_fifo_cap => data_copy_a_fifo_cap,
        if_empty_n => data_copy_a_empty_n,
        if_read => p_anonymous_namespace_Mean_ap_int_8_5u_U0_data_copy_a1_read);

    data_copy_b_U : component layernorm_fifo_w256_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_data_copy_b2_din,
        if_full_n => data_copy_b_full_n,
        if_write => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_data_copy_b2_write,
        if_dout => data_copy_b_dout,
        if_num_data_valid => data_copy_b_num_data_valid,
        if_fifo_cap => data_copy_b_fifo_cap,
        if_empty_n => data_copy_b_empty_n,
        if_read => p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_data_copy_b2_read);

    data_copy_c_U : component layernorm_fifo_w256_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_data_copy_c3_din,
        if_full_n => data_copy_c_full_n,
        if_write => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_data_copy_c3_write,
        if_dout => data_copy_c_dout,
        if_num_data_valid => data_copy_c_num_data_valid,
        if_fifo_cap => data_copy_c_fifo_cap,
        if_empty_n => data_copy_c_empty_n,
        if_read => p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_data_copy_c3_read);

    rows_c19_U : component layernorm_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_rows_c19_din,
        if_full_n => rows_c19_full_n,
        if_write => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_rows_c19_write,
        if_dout => rows_c19_dout,
        if_num_data_valid => rows_c19_num_data_valid,
        if_fifo_cap => rows_c19_fifo_cap,
        if_empty_n => rows_c19_empty_n,
        if_read => p_anonymous_namespace_Mean_ap_int_8_5u_U0_rows_read);

    cols_log_c22_U : component layernorm_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_cols_log_c22_din,
        if_full_n => cols_log_c22_full_n,
        if_write => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_cols_log_c22_write,
        if_dout => cols_log_c22_dout,
        if_num_data_valid => cols_log_c22_num_data_valid,
        if_fifo_cap => cols_log_c22_fifo_cap,
        if_empty_n => cols_log_c22_empty_n,
        if_read => p_anonymous_namespace_Mean_ap_int_8_5u_U0_cols_log_read);

    gamma_U : component layernorm_fifo_w256_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_gamma4_din,
        if_full_n => gamma_full_n,
        if_write => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_gamma4_write,
        if_dout => gamma_dout,
        if_num_data_valid => gamma_num_data_valid,
        if_fifo_cap => gamma_fifo_cap,
        if_empty_n => gamma_empty_n,
        if_read => p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_gamma4_read);

    beta_U : component layernorm_fifo_w256_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_beta5_din,
        if_full_n => beta_full_n,
        if_write => p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_beta5_write,
        if_dout => beta_dout,
        if_num_data_valid => beta_num_data_valid,
        if_fifo_cap => beta_fifo_cap,
        if_empty_n => beta_empty_n,
        if_read => p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_beta5_read);

    mean_a_U : component layernorm_fifo_w8_d32_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => p_anonymous_namespace_Mean_ap_int_8_5u_U0_mean_a6_din,
        if_full_n => mean_a_full_n,
        if_write => p_anonymous_namespace_Mean_ap_int_8_5u_U0_mean_a6_write,
        if_dout => mean_a_dout,
        if_num_data_valid => mean_a_num_data_valid,
        if_fifo_cap => mean_a_fifo_cap,
        if_empty_n => mean_a_empty_n,
        if_read => p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_mean_a6_read);

    mean_b_U : component layernorm_fifo_w8_d32_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => p_anonymous_namespace_Mean_ap_int_8_5u_U0_mean_b7_din,
        if_full_n => mean_b_full_n,
        if_write => p_anonymous_namespace_Mean_ap_int_8_5u_U0_mean_b7_write,
        if_dout => mean_b_dout,
        if_num_data_valid => mean_b_num_data_valid,
        if_fifo_cap => mean_b_fifo_cap,
        if_empty_n => mean_b_empty_n,
        if_read => p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_mean_b7_read);

    rows_c18_U : component layernorm_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => p_anonymous_namespace_Mean_ap_int_8_5u_U0_rows_c18_din,
        if_full_n => rows_c18_full_n,
        if_write => p_anonymous_namespace_Mean_ap_int_8_5u_U0_rows_c18_write,
        if_dout => rows_c18_dout,
        if_num_data_valid => rows_c18_num_data_valid,
        if_fifo_cap => rows_c18_fifo_cap,
        if_empty_n => rows_c18_empty_n,
        if_read => p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_rows_read);

    cols_log_c21_U : component layernorm_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => p_anonymous_namespace_Mean_ap_int_8_5u_U0_cols_log_c21_din,
        if_full_n => cols_log_c21_full_n,
        if_write => p_anonymous_namespace_Mean_ap_int_8_5u_U0_cols_log_c21_write,
        if_dout => cols_log_c21_dout,
        if_num_data_valid => cols_log_c21_num_data_valid,
        if_fifo_cap => cols_log_c21_fifo_cap,
        if_empty_n => cols_log_c21_empty_n,
        if_read => p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_cols_log_read);

    stddev_U : component layernorm_fifo_w32_d32_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_stddev8_din,
        if_full_n => stddev_full_n,
        if_write => p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_stddev8_write,
        if_dout => stddev_dout,
        if_num_data_valid => stddev_num_data_valid,
        if_fifo_cap => stddev_fifo_cap,
        if_empty_n => stddev_empty_n,
        if_read => p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_stddev8_read);

    rows_c17_U : component layernorm_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_rows_c17_din,
        if_full_n => rows_c17_full_n,
        if_write => p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_rows_c17_write,
        if_dout => rows_c17_dout,
        if_num_data_valid => rows_c17_num_data_valid,
        if_fifo_cap => rows_c17_fifo_cap,
        if_empty_n => rows_c17_empty_n,
        if_read => p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_rows_read);

    cols_log_c20_U : component layernorm_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_cols_log_c20_din,
        if_full_n => cols_log_c20_full_n,
        if_write => p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_cols_log_c20_write,
        if_dout => cols_log_c20_dout,
        if_num_data_valid => cols_log_c20_num_data_valid,
        if_fifo_cap => cols_log_c20_fifo_cap,
        if_empty_n => cols_log_c20_empty_n,
        if_read => p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_cols_log_read);

    norm_U : component layernorm_fifo_w256_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_norm9_din,
        if_full_n => norm_full_n,
        if_write => p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_norm9_write,
        if_dout => norm_dout,
        if_num_data_valid => norm_num_data_valid,
        if_fifo_cap => norm_fifo_cap,
        if_empty_n => norm_empty_n,
        if_read => p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_norm9_read);

    rows_c_U : component layernorm_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_rows_c_din,
        if_full_n => rows_c_full_n,
        if_write => p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_rows_c_write,
        if_dout => rows_c_dout,
        if_num_data_valid => rows_c_num_data_valid,
        if_fifo_cap => rows_c_fifo_cap,
        if_empty_n => rows_c_empty_n,
        if_read => p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_rows_read);

    cols_log_c_U : component layernorm_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_cols_log_c_din,
        if_full_n => cols_log_c_full_n,
        if_write => p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_cols_log_c_write,
        if_dout => cols_log_c_dout,
        if_num_data_valid => cols_log_c_num_data_valid,
        if_fifo_cap => cols_log_c_fifo_cap,
        if_empty_n => cols_log_c_empty_n,
        if_read => p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_cols_log_read);

    store_temp_U : component layernorm_fifo_w256_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_store_temp10_din,
        if_full_n => store_temp_full_n,
        if_write => p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_store_temp10_write,
        if_dout => store_temp_dout,
        if_num_data_valid => store_temp_num_data_valid,
        if_fifo_cap => store_temp_fifo_cap,
        if_empty_n => store_temp_empty_n,
        if_read => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_store_temp10_read);

    start_for_p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_U : component layernorm_start_for_p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_din,
        if_full_n => start_for_p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_full_n,
        if_write => entry_proc_U0_start_write,
        if_dout => start_for_p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_dout,
        if_empty_n => start_for_p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_empty_n,
        if_read => p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_ap_ready);

    start_for_p_anonymous_namespace_Mean_ap_int_8_5u_U0_U : component layernorm_start_for_p_anonymous_namespace_Mean_ap_int_8_5u_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_p_anonymous_namespace_Mean_ap_int_8_5u_U0_din,
        if_full_n => start_for_p_anonymous_namespace_Mean_ap_int_8_5u_U0_full_n,
        if_write => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_start_write,
        if_dout => start_for_p_anonymous_namespace_Mean_ap_int_8_5u_U0_dout,
        if_empty_n => start_for_p_anonymous_namespace_Mean_ap_int_8_5u_U0_empty_n,
        if_read => p_anonymous_namespace_Mean_ap_int_8_5u_U0_ap_ready);

    start_for_p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_U : component layernorm_start_for_p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_din,
        if_full_n => start_for_p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_full_n,
        if_write => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_start_write,
        if_dout => start_for_p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_dout,
        if_empty_n => start_for_p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_empty_n,
        if_read => p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_ap_ready);

    start_for_p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_U : component layernorm_start_for_p_anonymous_namespace_Norm_ap_int_8_float_5u_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_din,
        if_full_n => start_for_p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_full_n,
        if_write => p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_start_write,
        if_dout => start_for_p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_dout,
        if_empty_n => start_for_p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_empty_n,
        if_read => p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_ap_ready);

    start_for_p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_U : component layernorm_start_for_p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_din,
        if_full_n => start_for_p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_full_n,
        if_write => p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_start_write,
        if_dout => start_for_p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_dout,
        if_empty_n => start_for_p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_empty_n,
        if_read => p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_ap_ready);





    ap_sync_reg_entry_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_ap_ready <= ap_sync_p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_ap_ready <= ap_sync_p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    ap_done <= p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_ap_done;
    ap_idle <= (p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_ap_idle and p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_ap_idle and p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_ap_idle and p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_ap_idle and p_anonymous_namespace_Mean_ap_int_8_5u_U0_ap_idle and p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_ap_idle and p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_ap_idle and entry_proc_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_entry_proc_U0_ap_ready <= (entry_proc_U0_ap_ready or ap_sync_reg_entry_proc_U0_ap_ready);
    ap_sync_p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_ap_ready <= (p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_ap_ready or ap_sync_reg_p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_ap_ready);
    ap_sync_p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_ap_ready <= (p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_ap_ready or ap_sync_reg_p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_ap_ready);
    ap_sync_ready <= (ap_sync_p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_ap_ready and ap_sync_p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_ap_ready and ap_sync_entry_proc_U0_ap_ready);
    entry_proc_U0_ap_continue <= ap_const_logic_1;
    entry_proc_U0_ap_start <= ((ap_sync_reg_entry_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    ln_data_BID <= ap_const_lv1_0;
    ln_data_BRESP <= ap_const_lv2_0;
    ln_data_BUSER <= ap_const_lv1_0;
    ln_data_RID <= ap_const_lv1_0;
    ln_data_RLAST <= ap_const_logic_0;
    ln_data_RRESP <= ap_const_lv2_0;
    ln_data_RUSER <= ap_const_lv1_0;
    ln_paras_RID <= ap_const_lv1_0;
    ln_paras_RLAST <= ap_const_logic_0;
    ln_paras_RRESP <= ap_const_lv2_0;
    ln_paras_RUSER <= ap_const_lv1_0;
    p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_ap_continue <= ap_const_logic_1;
    p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_ap_start <= ((ap_sync_reg_p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_ap_ready xor ap_const_logic_1) and ap_start);
    p_anonymous_namespace_DataMover_A_ap_int_8_ap_uint_256_5u_U0_start_full_n <= (start_for_p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_full_n and start_for_p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_full_n and start_for_p_anonymous_namespace_Mean_ap_int_8_5u_U0_full_n);
    p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_ap_continue <= ap_const_logic_1;
    p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_ap_start <= ((ap_sync_reg_p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_U0_ap_ready xor ap_const_logic_1) and ap_start);
    p_anonymous_namespace_Mean_ap_int_8_5u_U0_ap_continue <= ap_const_logic_1;
    p_anonymous_namespace_Mean_ap_int_8_5u_U0_ap_start <= start_for_p_anonymous_namespace_Mean_ap_int_8_5u_U0_empty_n;
    p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_ap_continue <= ap_const_logic_1;
    p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_ap_start <= start_for_p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_empty_n;
    p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_ap_continue <= ap_const_logic_1;
    p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_ap_start <= start_for_p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_empty_n;
    p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_ap_continue <= ap_const_logic_1;
    p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_ap_start <= start_for_p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_empty_n;
    p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_ap_continue <= ap_const_logic_1;
    p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_ap_start <= start_for_p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_empty_n;
    start_for_p_anonymous_namespace_Mean_ap_int_8_5u_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_p_anonymous_namespace_Norm_ap_int_8_float_5u_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_p_anonymous_namespace_StdDev_ap_int_8_float_5u_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
