// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module layernorm_p_anonymous_namespace_DataMover_A_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_45_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_copy_a1_din,
        data_copy_a1_num_data_valid,
        data_copy_a1_fifo_cap,
        data_copy_a1_full_n,
        data_copy_a1_write,
        data_copy_c3_din,
        data_copy_c3_num_data_valid,
        data_copy_c3_fifo_cap,
        data_copy_c3_full_n,
        data_copy_c3_write,
        data_copy_b2_din,
        data_copy_b2_num_data_valid,
        data_copy_b2_fifo_cap,
        data_copy_b2_full_n,
        data_copy_b2_write,
        ram_V_address0,
        ram_V_ce0,
        ram_V_q0,
        ram_depth_1
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [255:0] data_copy_a1_din;
input  [4:0] data_copy_a1_num_data_valid;
input  [4:0] data_copy_a1_fifo_cap;
input   data_copy_a1_full_n;
output   data_copy_a1_write;
output  [255:0] data_copy_c3_din;
input  [4:0] data_copy_c3_num_data_valid;
input  [4:0] data_copy_c3_fifo_cap;
input   data_copy_c3_full_n;
output   data_copy_c3_write;
output  [255:0] data_copy_b2_din;
input  [4:0] data_copy_b2_num_data_valid;
input  [4:0] data_copy_b2_fifo_cap;
input   data_copy_b2_full_n;
output   data_copy_b2_write;
output  [8:0] ram_V_address0;
output   ram_V_ce0;
input  [255:0] ram_V_q0;
input  [26:0] ram_depth_1;

reg ap_idle;
reg data_copy_a1_write;
reg data_copy_c3_write;
reg data_copy_b2_write;
reg[8:0] ram_V_address0;
reg ram_V_ce0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
reg   [0:0] stream_c_done_reg_153;
reg   [0:0] or_ln47_reg_384;
reg    ap_predicate_op55_write_state3;
reg    ap_block_state3_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_subdone;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    data_copy_c3_blk_n;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg   [0:0] tmp_1_reg_407;
reg    data_copy_b2_blk_n;
wire    ap_block_pp0_stage0;
reg   [0:0] or_ln57_reg_393;
reg    data_copy_a1_blk_n;
wire    ap_block_pp0_stage2;
reg   [0:0] stream_c_done_2_reg_165;
wire   [31:0] ram_depth_1_cast_fu_178_p1;
reg   [31:0] ram_depth_1_cast_reg_377;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_predicate_op71_write_state4;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] or_ln47_fu_219_p2;
wire    ap_block_state2_pp0_stage1_iter0;
reg    ap_predicate_op79_write_state5;
reg    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
reg   [0:0] ap_phi_mux_stream_c_done_phi_fu_157_p4;
wire   [0:0] or_ln57_fu_271_p2;
reg   [31:0] stream_c_addr_1_reg_397;
reg    ap_block_pp0_stage2_11001;
wire   [0:0] tmp_1_nbwritereq_fu_99_p3;
wire   [0:0] stream_c_done_1_fu_326_p2;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage1_subdone;
wire    ap_loop_init;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] ap_phi_reg_pp0_iter0_stream_c_done_2_reg_165;
reg   [0:0] ap_phi_reg_pp0_iter1_stream_c_done_2_reg_165;
wire   [63:0] zext_ln49_fu_231_p1;
wire   [63:0] zext_ln59_fu_294_p1;
wire   [63:0] zext_ln69_fu_336_p1;
reg   [0:0] stream_b_done_fu_50;
wire   [0:0] stream_b_done_1_fu_305_p2;
wire   [0:0] or_ln57_1_fu_277_p2;
reg   [0:0] stream_a_done_fu_54;
wire   [0:0] stream_a_done_1_fu_242_p2;
wire   [0:0] or_ln47_1_fu_225_p2;
reg   [31:0] stream_c_addr_fu_58;
wire   [31:0] stream_c_addr_2_fu_320_p2;
reg   [31:0] stream_b_addr_fu_62;
wire   [31:0] stream_b_addr_2_fu_299_p2;
reg   [31:0] stream_a_addr_fu_66;
wire   [31:0] stream_a_addr_2_fu_236_p2;
reg    ap_block_pp0_stage2_01001;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp0_stage1_01001;
wire   [0:0] xor_ln47_fu_213_p0;
wire   [0:0] xor_ln47_fu_213_p2;
wire   [0:0] or_ln47_1_fu_225_p1;
wire   [0:0] xor_ln57_fu_265_p0;
wire   [0:0] xor_ln57_fu_265_p2;
wire   [0:0] or_ln57_1_fu_277_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_195;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

layernorm_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_exit_pp0_iter0_stage2) | ((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_195)) begin
        if (((stream_c_done_reg_153 == 1'd0) & (tmp_1_nbwritereq_fu_99_p3 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_stream_c_done_2_reg_165 <= 1'd0;
        end else if (((stream_c_done_reg_153 == 1'd0) & (tmp_1_nbwritereq_fu_99_p3 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_stream_c_done_2_reg_165 <= stream_c_done_1_fu_326_p2;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_stream_c_done_2_reg_165 <= ap_phi_reg_pp0_iter0_stream_c_done_2_reg_165;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        stream_a_addr_fu_66 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_phi_mux_stream_c_done_phi_fu_157_p4 == 1'd0) & (or_ln47_fu_219_p2 == 1'd0))) begin
        stream_a_addr_fu_66 <= stream_a_addr_2_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        stream_a_done_fu_54 <= 1'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_phi_mux_stream_c_done_phi_fu_157_p4 == 1'd0) & (or_ln47_fu_219_p2 == 1'd1))) begin
        stream_a_done_fu_54 <= or_ln47_1_fu_225_p2;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_phi_mux_stream_c_done_phi_fu_157_p4 == 1'd0) & (or_ln47_fu_219_p2 == 1'd0))) begin
        stream_a_done_fu_54 <= stream_a_done_1_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        stream_b_addr_fu_62 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (stream_c_done_reg_153 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (or_ln57_reg_393 == 1'd0))) begin
        stream_b_addr_fu_62 <= stream_b_addr_2_fu_299_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        stream_b_done_fu_50 <= 1'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (or_ln57_fu_271_p2 == 1'd1) & (ap_phi_mux_stream_c_done_phi_fu_157_p4 == 1'd0))) begin
        stream_b_done_fu_50 <= or_ln57_1_fu_277_p2;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (stream_c_done_reg_153 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (or_ln57_reg_393 == 1'd0))) begin
        stream_b_done_fu_50 <= stream_b_done_1_fu_305_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        stream_c_addr_fu_58 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (stream_c_done_reg_153 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (tmp_1_nbwritereq_fu_99_p3 == 1'd1))) begin
        stream_c_addr_fu_58 <= stream_c_addr_2_fu_320_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        stream_c_done_reg_153 <= 1'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (stream_c_done_reg_153 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        stream_c_done_reg_153 <= stream_c_done_2_reg_165;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_phi_mux_stream_c_done_phi_fu_157_p4 == 1'd0))) begin
        or_ln47_reg_384 <= or_ln47_fu_219_p2;
        or_ln57_reg_393 <= or_ln57_fu_271_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ram_depth_1_cast_reg_377[26 : 0] <= ram_depth_1_cast_fu_178_p1[26 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        stream_c_addr_1_reg_397 <= stream_c_addr_fu_58;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_c_done_2_reg_165 <= ap_phi_reg_pp0_iter1_stream_c_done_2_reg_165;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (stream_c_done_reg_153 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_1_reg_407 <= data_copy_c3_full_n;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (stream_c_done_reg_153 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (stream_c_done_reg_153 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_stream_c_done_phi_fu_157_p4 = stream_c_done_2_reg_165;
    end else begin
        ap_phi_mux_stream_c_done_phi_fu_157_p4 = stream_c_done_reg_153;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_predicate_op55_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        data_copy_a1_blk_n = data_copy_a1_full_n;
    end else begin
        data_copy_a1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_predicate_op55_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        data_copy_a1_write = 1'b1;
    end else begin
        data_copy_a1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (stream_c_done_reg_153 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (or_ln57_reg_393 == 1'd0))) begin
        data_copy_b2_blk_n = data_copy_b2_full_n;
    end else begin
        data_copy_b2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op71_write_state4 == 1'b1))) begin
        data_copy_b2_write = 1'b1;
    end else begin
        data_copy_b2_write = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_reg_407 == 1'd1) & (1'b0 == ap_block_pp0_stage1) & (stream_c_done_reg_153 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        data_copy_c3_blk_n = data_copy_c3_full_n;
    end else begin
        data_copy_c3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_predicate_op79_write_state5 == 1'b1))) begin
        data_copy_c3_write = 1'b1;
    end else begin
        data_copy_c3_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ram_V_address0 = zext_ln69_fu_336_p1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ram_V_address0 = zext_ln59_fu_294_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ram_V_address0 = zext_ln49_fu_231_p1;
    end else begin
        ram_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ram_V_ce0 = 1'b1;
    end else begin
        ram_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((data_copy_b2_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op71_write_state4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((data_copy_b2_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op71_write_state4 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((data_copy_b2_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op71_write_state4 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((data_copy_c3_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op79_write_state5 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((data_copy_c3_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op79_write_state5 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((data_copy_c3_full_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_predicate_op79_write_state5 == 1'b1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_01001 = ((ap_predicate_op55_write_state3 == 1'b1) & (data_copy_a1_full_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_predicate_op55_write_state3 == 1'b1) & (data_copy_a1_full_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_predicate_op55_write_state3 == 1'b1) & (data_copy_a1_full_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage2_iter0 = ((ap_predicate_op55_write_state3 == 1'b1) & (data_copy_a1_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((data_copy_b2_full_n == 1'b0) & (ap_predicate_op71_write_state4 == 1'b1));
end

always @ (*) begin
    ap_block_state5_pp0_stage1_iter1 = ((data_copy_c3_full_n == 1'b0) & (ap_predicate_op79_write_state5 == 1'b1));
end

always @ (*) begin
    ap_condition_195 = ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign ap_phi_reg_pp0_iter0_stream_c_done_2_reg_165 = 'bx;

always @ (*) begin
    ap_predicate_op55_write_state3 = ((or_ln47_reg_384 == 1'd0) & (stream_c_done_reg_153 == 1'd0));
end

always @ (*) begin
    ap_predicate_op71_write_state4 = ((stream_c_done_reg_153 == 1'd0) & (or_ln57_reg_393 == 1'd0));
end

always @ (*) begin
    ap_predicate_op79_write_state5 = ((tmp_1_reg_407 == 1'd1) & (stream_c_done_reg_153 == 1'd0));
end

assign data_copy_a1_din = ram_V_q0;

assign data_copy_b2_din = ram_V_q0;

assign data_copy_c3_din = ram_V_q0;

assign or_ln47_1_fu_225_p1 = data_copy_a1_full_n;

assign or_ln47_1_fu_225_p2 = (stream_a_done_fu_54 | or_ln47_1_fu_225_p1);

assign or_ln47_fu_219_p2 = (xor_ln47_fu_213_p2 | stream_a_done_fu_54);

assign or_ln57_1_fu_277_p1 = data_copy_b2_full_n;

assign or_ln57_1_fu_277_p2 = (stream_b_done_fu_50 | or_ln57_1_fu_277_p1);

assign or_ln57_fu_271_p2 = (xor_ln57_fu_265_p2 | stream_b_done_fu_50);

assign ram_depth_1_cast_fu_178_p1 = ram_depth_1;

assign stream_a_addr_2_fu_236_p2 = (stream_a_addr_fu_66 + 32'd1);

assign stream_a_done_1_fu_242_p2 = ((stream_a_addr_2_fu_236_p2 == ram_depth_1_cast_reg_377) ? 1'b1 : 1'b0);

assign stream_b_addr_2_fu_299_p2 = (stream_b_addr_fu_62 + 32'd1);

assign stream_b_done_1_fu_305_p2 = ((stream_b_addr_2_fu_299_p2 == ram_depth_1_cast_reg_377) ? 1'b1 : 1'b0);

assign stream_c_addr_2_fu_320_p2 = (stream_c_addr_fu_58 + 32'd1);

assign stream_c_done_1_fu_326_p2 = ((stream_c_addr_2_fu_320_p2 == ram_depth_1_cast_reg_377) ? 1'b1 : 1'b0);

assign tmp_1_nbwritereq_fu_99_p3 = data_copy_c3_full_n;

assign xor_ln47_fu_213_p0 = data_copy_a1_full_n;

assign xor_ln47_fu_213_p2 = (xor_ln47_fu_213_p0 ^ 1'd1);

assign xor_ln57_fu_265_p0 = data_copy_b2_full_n;

assign xor_ln57_fu_265_p2 = (xor_ln57_fu_265_p0 ^ 1'd1);

assign zext_ln49_fu_231_p1 = stream_a_addr_fu_66;

assign zext_ln59_fu_294_p1 = stream_b_addr_fu_62;

assign zext_ln69_fu_336_p1 = stream_c_addr_1_reg_397;

always @ (posedge ap_clk) begin
    ram_depth_1_cast_reg_377[31:27] <= 5'b00000;
end

endmodule //layernorm_p_anonymous_namespace_DataMover_A_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_45_3
