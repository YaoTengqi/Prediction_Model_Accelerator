// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module layernorm_p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_Pipeline_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_ln_paras_AWVALID,
        m_axi_ln_paras_AWREADY,
        m_axi_ln_paras_AWADDR,
        m_axi_ln_paras_AWID,
        m_axi_ln_paras_AWLEN,
        m_axi_ln_paras_AWSIZE,
        m_axi_ln_paras_AWBURST,
        m_axi_ln_paras_AWLOCK,
        m_axi_ln_paras_AWCACHE,
        m_axi_ln_paras_AWPROT,
        m_axi_ln_paras_AWQOS,
        m_axi_ln_paras_AWREGION,
        m_axi_ln_paras_AWUSER,
        m_axi_ln_paras_WVALID,
        m_axi_ln_paras_WREADY,
        m_axi_ln_paras_WDATA,
        m_axi_ln_paras_WSTRB,
        m_axi_ln_paras_WLAST,
        m_axi_ln_paras_WID,
        m_axi_ln_paras_WUSER,
        m_axi_ln_paras_ARVALID,
        m_axi_ln_paras_ARREADY,
        m_axi_ln_paras_ARADDR,
        m_axi_ln_paras_ARID,
        m_axi_ln_paras_ARLEN,
        m_axi_ln_paras_ARSIZE,
        m_axi_ln_paras_ARBURST,
        m_axi_ln_paras_ARLOCK,
        m_axi_ln_paras_ARCACHE,
        m_axi_ln_paras_ARPROT,
        m_axi_ln_paras_ARQOS,
        m_axi_ln_paras_ARREGION,
        m_axi_ln_paras_ARUSER,
        m_axi_ln_paras_RVALID,
        m_axi_ln_paras_RREADY,
        m_axi_ln_paras_RDATA,
        m_axi_ln_paras_RLAST,
        m_axi_ln_paras_RID,
        m_axi_ln_paras_RFIFONUM,
        m_axi_ln_paras_RUSER,
        m_axi_ln_paras_RRESP,
        m_axi_ln_paras_BVALID,
        m_axi_ln_paras_BREADY,
        m_axi_ln_paras_BRESP,
        m_axi_ln_paras_BID,
        m_axi_ln_paras_BUSER,
        p_cast9_cast,
        beta_ram_address0,
        beta_ram_ce0,
        beta_ram_we0,
        beta_ram_d0,
        lshr_ln
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_ln_paras_AWVALID;
input   m_axi_ln_paras_AWREADY;
output  [63:0] m_axi_ln_paras_AWADDR;
output  [0:0] m_axi_ln_paras_AWID;
output  [31:0] m_axi_ln_paras_AWLEN;
output  [2:0] m_axi_ln_paras_AWSIZE;
output  [1:0] m_axi_ln_paras_AWBURST;
output  [1:0] m_axi_ln_paras_AWLOCK;
output  [3:0] m_axi_ln_paras_AWCACHE;
output  [2:0] m_axi_ln_paras_AWPROT;
output  [3:0] m_axi_ln_paras_AWQOS;
output  [3:0] m_axi_ln_paras_AWREGION;
output  [0:0] m_axi_ln_paras_AWUSER;
output   m_axi_ln_paras_WVALID;
input   m_axi_ln_paras_WREADY;
output  [255:0] m_axi_ln_paras_WDATA;
output  [31:0] m_axi_ln_paras_WSTRB;
output   m_axi_ln_paras_WLAST;
output  [0:0] m_axi_ln_paras_WID;
output  [0:0] m_axi_ln_paras_WUSER;
output   m_axi_ln_paras_ARVALID;
input   m_axi_ln_paras_ARREADY;
output  [63:0] m_axi_ln_paras_ARADDR;
output  [0:0] m_axi_ln_paras_ARID;
output  [31:0] m_axi_ln_paras_ARLEN;
output  [2:0] m_axi_ln_paras_ARSIZE;
output  [1:0] m_axi_ln_paras_ARBURST;
output  [1:0] m_axi_ln_paras_ARLOCK;
output  [3:0] m_axi_ln_paras_ARCACHE;
output  [2:0] m_axi_ln_paras_ARPROT;
output  [3:0] m_axi_ln_paras_ARQOS;
output  [3:0] m_axi_ln_paras_ARREGION;
output  [0:0] m_axi_ln_paras_ARUSER;
input   m_axi_ln_paras_RVALID;
output   m_axi_ln_paras_RREADY;
input  [255:0] m_axi_ln_paras_RDATA;
input   m_axi_ln_paras_RLAST;
input  [0:0] m_axi_ln_paras_RID;
input  [12:0] m_axi_ln_paras_RFIFONUM;
input  [0:0] m_axi_ln_paras_RUSER;
input  [1:0] m_axi_ln_paras_RRESP;
input   m_axi_ln_paras_BVALID;
output   m_axi_ln_paras_BREADY;
input  [1:0] m_axi_ln_paras_BRESP;
input  [0:0] m_axi_ln_paras_BID;
input  [0:0] m_axi_ln_paras_BUSER;
input  [58:0] p_cast9_cast;
output  [8:0] beta_ram_address0;
output   beta_ram_ce0;
output  [31:0] beta_ram_we0;
output  [255:0] beta_ram_d0;
input  [26:0] lshr_ln;

reg ap_idle;
reg m_axi_ln_paras_RREADY;
reg beta_ram_ce0;
reg[31:0] beta_ram_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] exitcond7_fu_120_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    ln_paras_blk_n_R;
wire    ap_block_pp0_stage0;
reg   [26:0] loop_index_load_reg_142;
reg    ap_block_pp0_stage0_11001;
reg   [255:0] ln_paras_addr_read_reg_147;
wire   [63:0] loop_index_cast_fu_131_p1;
reg   [26:0] loop_index_fu_62;
wire   [26:0] empty_fu_114_p2;
wire    ap_loop_init;
reg   [26:0] ap_sig_allocacmp_loop_index_load;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

layernorm_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((exitcond7_fu_120_p2 == 1'd0) & (ap_start_int == 1'b1))) begin
            loop_index_fu_62 <= empty_fu_114_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            loop_index_fu_62 <= 27'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ln_paras_addr_read_reg_147 <= m_axi_ln_paras_RDATA;
        loop_index_load_reg_142 <= ap_sig_allocacmp_loop_index_load;
    end
end

always @ (*) begin
    if (((exitcond7_fu_120_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_loop_index_load = 27'd0;
    end else begin
        ap_sig_allocacmp_loop_index_load = loop_index_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        beta_ram_ce0 = 1'b1;
    end else begin
        beta_ram_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        beta_ram_we0 = 32'd4294967295;
    end else begin
        beta_ram_we0 = 32'd0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ln_paras_blk_n_R = m_axi_ln_paras_RVALID;
    end else begin
        ln_paras_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_ln_paras_RREADY = 1'b1;
    end else begin
        m_axi_ln_paras_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_ln_paras_RVALID == 1'b0) & (ap_start_int == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_ln_paras_RVALID == 1'b0) & (ap_start_int == 1'b1));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (m_axi_ln_paras_RVALID == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign beta_ram_address0 = loop_index_cast_fu_131_p1;

assign beta_ram_d0 = ln_paras_addr_read_reg_147;

assign empty_fu_114_p2 = (ap_sig_allocacmp_loop_index_load + 27'd1);

assign exitcond7_fu_120_p2 = ((empty_fu_114_p2 == lshr_ln) ? 1'b1 : 1'b0);

assign loop_index_cast_fu_131_p1 = loop_index_load_reg_142;

assign m_axi_ln_paras_ARADDR = 64'd0;

assign m_axi_ln_paras_ARBURST = 2'd0;

assign m_axi_ln_paras_ARCACHE = 4'd0;

assign m_axi_ln_paras_ARID = 1'd0;

assign m_axi_ln_paras_ARLEN = 32'd0;

assign m_axi_ln_paras_ARLOCK = 2'd0;

assign m_axi_ln_paras_ARPROT = 3'd0;

assign m_axi_ln_paras_ARQOS = 4'd0;

assign m_axi_ln_paras_ARREGION = 4'd0;

assign m_axi_ln_paras_ARSIZE = 3'd0;

assign m_axi_ln_paras_ARUSER = 1'd0;

assign m_axi_ln_paras_ARVALID = 1'b0;

assign m_axi_ln_paras_AWADDR = 64'd0;

assign m_axi_ln_paras_AWBURST = 2'd0;

assign m_axi_ln_paras_AWCACHE = 4'd0;

assign m_axi_ln_paras_AWID = 1'd0;

assign m_axi_ln_paras_AWLEN = 32'd0;

assign m_axi_ln_paras_AWLOCK = 2'd0;

assign m_axi_ln_paras_AWPROT = 3'd0;

assign m_axi_ln_paras_AWQOS = 4'd0;

assign m_axi_ln_paras_AWREGION = 4'd0;

assign m_axi_ln_paras_AWSIZE = 3'd0;

assign m_axi_ln_paras_AWUSER = 1'd0;

assign m_axi_ln_paras_AWVALID = 1'b0;

assign m_axi_ln_paras_BREADY = 1'b0;

assign m_axi_ln_paras_WDATA = 256'd0;

assign m_axi_ln_paras_WID = 1'd0;

assign m_axi_ln_paras_WLAST = 1'b0;

assign m_axi_ln_paras_WSTRB = 32'd0;

assign m_axi_ln_paras_WUSER = 1'd0;

assign m_axi_ln_paras_WVALID = 1'b0;

endmodule //layernorm_p_anonymous_namespace_DataMover_B_ap_int_8_ap_uint_256_5u_Pipeline_3
