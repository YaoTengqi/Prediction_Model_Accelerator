// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module layernorm_p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        outputs_dout,
        outputs_num_data_valid,
        outputs_fifo_cap,
        outputs_empty_n,
        outputs_read,
        addr_dout,
        addr_num_data_valid,
        addr_fifo_cap,
        addr_empty_n,
        addr_read,
        m_axi_ln_data_AWVALID,
        m_axi_ln_data_AWREADY,
        m_axi_ln_data_AWADDR,
        m_axi_ln_data_AWID,
        m_axi_ln_data_AWLEN,
        m_axi_ln_data_AWSIZE,
        m_axi_ln_data_AWBURST,
        m_axi_ln_data_AWLOCK,
        m_axi_ln_data_AWCACHE,
        m_axi_ln_data_AWPROT,
        m_axi_ln_data_AWQOS,
        m_axi_ln_data_AWREGION,
        m_axi_ln_data_AWUSER,
        m_axi_ln_data_WVALID,
        m_axi_ln_data_WREADY,
        m_axi_ln_data_WDATA,
        m_axi_ln_data_WSTRB,
        m_axi_ln_data_WLAST,
        m_axi_ln_data_WID,
        m_axi_ln_data_WUSER,
        m_axi_ln_data_ARVALID,
        m_axi_ln_data_ARREADY,
        m_axi_ln_data_ARADDR,
        m_axi_ln_data_ARID,
        m_axi_ln_data_ARLEN,
        m_axi_ln_data_ARSIZE,
        m_axi_ln_data_ARBURST,
        m_axi_ln_data_ARLOCK,
        m_axi_ln_data_ARCACHE,
        m_axi_ln_data_ARPROT,
        m_axi_ln_data_ARQOS,
        m_axi_ln_data_ARREGION,
        m_axi_ln_data_ARUSER,
        m_axi_ln_data_RVALID,
        m_axi_ln_data_RREADY,
        m_axi_ln_data_RDATA,
        m_axi_ln_data_RLAST,
        m_axi_ln_data_RID,
        m_axi_ln_data_RFIFONUM,
        m_axi_ln_data_RUSER,
        m_axi_ln_data_RRESP,
        m_axi_ln_data_BVALID,
        m_axi_ln_data_BREADY,
        m_axi_ln_data_BRESP,
        m_axi_ln_data_BID,
        m_axi_ln_data_BUSER,
        store_temp10_dout,
        store_temp10_num_data_valid,
        store_temp10_fifo_cap,
        store_temp10_empty_n,
        store_temp10_read,
        done,
        done_ap_vld
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] outputs_dout;
input  [3:0] outputs_num_data_valid;
input  [3:0] outputs_fifo_cap;
input   outputs_empty_n;
output   outputs_read;
input  [31:0] addr_dout;
input  [3:0] addr_num_data_valid;
input  [3:0] addr_fifo_cap;
input   addr_empty_n;
output   addr_read;
output   m_axi_ln_data_AWVALID;
input   m_axi_ln_data_AWREADY;
output  [63:0] m_axi_ln_data_AWADDR;
output  [0:0] m_axi_ln_data_AWID;
output  [31:0] m_axi_ln_data_AWLEN;
output  [2:0] m_axi_ln_data_AWSIZE;
output  [1:0] m_axi_ln_data_AWBURST;
output  [1:0] m_axi_ln_data_AWLOCK;
output  [3:0] m_axi_ln_data_AWCACHE;
output  [2:0] m_axi_ln_data_AWPROT;
output  [3:0] m_axi_ln_data_AWQOS;
output  [3:0] m_axi_ln_data_AWREGION;
output  [0:0] m_axi_ln_data_AWUSER;
output   m_axi_ln_data_WVALID;
input   m_axi_ln_data_WREADY;
output  [255:0] m_axi_ln_data_WDATA;
output  [31:0] m_axi_ln_data_WSTRB;
output   m_axi_ln_data_WLAST;
output  [0:0] m_axi_ln_data_WID;
output  [0:0] m_axi_ln_data_WUSER;
output   m_axi_ln_data_ARVALID;
input   m_axi_ln_data_ARREADY;
output  [63:0] m_axi_ln_data_ARADDR;
output  [0:0] m_axi_ln_data_ARID;
output  [31:0] m_axi_ln_data_ARLEN;
output  [2:0] m_axi_ln_data_ARSIZE;
output  [1:0] m_axi_ln_data_ARBURST;
output  [1:0] m_axi_ln_data_ARLOCK;
output  [3:0] m_axi_ln_data_ARCACHE;
output  [2:0] m_axi_ln_data_ARPROT;
output  [3:0] m_axi_ln_data_ARQOS;
output  [3:0] m_axi_ln_data_ARREGION;
output  [0:0] m_axi_ln_data_ARUSER;
input   m_axi_ln_data_RVALID;
output   m_axi_ln_data_RREADY;
input  [255:0] m_axi_ln_data_RDATA;
input   m_axi_ln_data_RLAST;
input  [0:0] m_axi_ln_data_RID;
input  [12:0] m_axi_ln_data_RFIFONUM;
input  [0:0] m_axi_ln_data_RUSER;
input  [1:0] m_axi_ln_data_RRESP;
input   m_axi_ln_data_BVALID;
output   m_axi_ln_data_BREADY;
input  [1:0] m_axi_ln_data_BRESP;
input  [0:0] m_axi_ln_data_BID;
input  [0:0] m_axi_ln_data_BUSER;
input  [255:0] store_temp10_dout;
input  [4:0] store_temp10_num_data_valid;
input  [4:0] store_temp10_fifo_cap;
input   store_temp10_empty_n;
output   store_temp10_read;
output  [31:0] done;
output   done_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg outputs_read;
reg addr_read;
reg m_axi_ln_data_AWVALID;
reg m_axi_ln_data_WVALID;
reg m_axi_ln_data_BREADY;
reg store_temp10_read;
reg[31:0] done;
reg done_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln293_fu_204_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg   [0:0] ap_phi_mux_do_init_phi_fu_146_p6;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg   [0:0] do_init_reg_142;
reg    ap_block_state4_io;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
wire    ap_block_state19_pp0_stage0_iter17;
wire    ap_block_state20_pp0_stage0_iter18;
wire    ap_block_state21_pp0_stage0_iter19;
wire    ap_block_state22_pp0_stage0_iter20;
wire    ap_block_state23_pp0_stage0_iter21;
wire    ap_block_state24_pp0_stage0_iter22;
wire    ap_block_state25_pp0_stage0_iter23;
wire    ap_block_state26_pp0_stage0_iter24;
wire    ap_block_state27_pp0_stage0_iter25;
wire    ap_block_state28_pp0_stage0_iter26;
wire    ap_block_state29_pp0_stage0_iter27;
wire    ap_block_state30_pp0_stage0_iter28;
wire    ap_block_state31_pp0_stage0_iter29;
wire    ap_block_state32_pp0_stage0_iter30;
wire    ap_block_state33_pp0_stage0_iter31;
wire    ap_block_state34_pp0_stage0_iter32;
wire    ap_block_state35_pp0_stage0_iter33;
wire    ap_block_state36_pp0_stage0_iter34;
wire    ap_block_state37_pp0_stage0_iter35;
wire    ap_block_state38_pp0_stage0_iter36;
wire    ap_block_state39_pp0_stage0_iter37;
wire    ap_block_state40_pp0_stage0_iter38;
reg   [0:0] icmp_ln293_reg_272;
reg   [0:0] icmp_ln293_reg_272_pp0_iter38_reg;
reg    ap_block_state41_pp0_stage0_iter39;
reg    ap_enable_reg_pp0_iter39;
reg    ap_block_pp0_stage0_11001;
reg    addr_blk_n;
wire    ap_block_pp0_stage0;
reg    ln_data_blk_n_W;
reg    ln_data_blk_n_B;
reg    ln_data_blk_n_AW;
reg    outputs_blk_n;
reg    store_temp10_blk_n;
reg   [8:0] j1_reg_158;
reg   [63:0] ln_data_addr_rewind_idx_reg_172;
reg   [63:0] ln_data_addr_phi_idx_reg_186;
wire   [8:0] j_fu_198_p2;
reg   [8:0] j_reg_267;
reg   [0:0] icmp_ln293_reg_272_pp0_iter1_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter2_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter3_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter4_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter5_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter6_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter7_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter8_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter9_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter10_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter11_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter12_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter13_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter14_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter15_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter16_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter17_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter18_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter19_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter20_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter21_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter22_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter23_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter24_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter25_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter26_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter27_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter28_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter29_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter30_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter31_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter32_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter33_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter34_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter35_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter36_reg;
reg   [0:0] icmp_ln293_reg_272_pp0_iter37_reg;
wire  signed [63:0] sext_ln293_fu_248_p1;
reg  signed [63:0] sext_ln293_reg_276;
reg   [255:0] l_x_reg_282;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
reg    ap_enable_reg_pp0_iter37;
reg    ap_enable_reg_pp0_iter38;
reg   [8:0] ap_phi_mux_j1_phi_fu_162_p6;
reg   [63:0] ap_phi_mux_ln_data_addr_rewind_idx_phi_fu_176_p6;
wire   [63:0] ap_phi_reg_pp0_iter0_ln_data_addr_phi_idx_reg_186;
reg   [63:0] ap_phi_reg_pp0_iter1_ln_data_addr_phi_idx_reg_186;
reg   [63:0] ap_phi_reg_pp0_iter2_ln_data_addr_phi_idx_reg_186;
reg    ap_block_pp0_stage0_01001;
reg   [31:0] done_preg;
wire   [26:0] tmp_fu_210_p4;
wire   [31:0] and_ln_fu_220_p3;
wire   [63:0] zext_ln293_fu_228_p1;
wire   [63:0] add_ln293_fu_232_p2;
wire   [58:0] trunc_ln_fu_238_p4;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_idle_pp0_0to38;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_201;
reg    ap_condition_472;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter39 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 ap_enable_reg_pp0_iter37 = 1'b0;
#0 ap_enable_reg_pp0_iter38 = 1'b0;
#0 done_preg = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter39 == 1'b1) & (icmp_ln293_reg_272_pp0_iter38_reg == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter39 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                done_preg[0] <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter39 == 1'b1) & (icmp_ln293_reg_272_pp0_iter38_reg == 1'd1))) begin
                        done_preg[0] <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_472)) begin
        if ((ap_phi_mux_do_init_phi_fu_146_p6 == 1'd1)) begin
            ap_phi_reg_pp0_iter2_ln_data_addr_phi_idx_reg_186 <= sext_ln293_fu_248_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_ln_data_addr_phi_idx_reg_186 <= ap_phi_reg_pp0_iter1_ln_data_addr_phi_idx_reg_186;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln293_reg_272_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        do_init_reg_142 <= 1'd0;
    end else if ((((icmp_ln293_reg_272_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        do_init_reg_142 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln293_reg_272 == 1'd0))) begin
        j1_reg_158 <= j_reg_267;
    end else if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln293_reg_272 == 1'd1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        j1_reg_158 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if ((do_init_reg_142 == 1'd0)) begin
            ln_data_addr_phi_idx_reg_186 <= ap_phi_mux_ln_data_addr_rewind_idx_phi_fu_176_p6;
        end else if ((1'b1 == 1'b1)) begin
            ln_data_addr_phi_idx_reg_186 <= ap_phi_reg_pp0_iter2_ln_data_addr_phi_idx_reg_186;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln293_reg_272_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ln_data_addr_rewind_idx_reg_172 <= ln_data_addr_phi_idx_reg_186;
    end else if ((((icmp_ln293_reg_272_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        ln_data_addr_rewind_idx_reg_172 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter1_ln_data_addr_phi_idx_reg_186 <= ap_phi_reg_pp0_iter0_ln_data_addr_phi_idx_reg_186;
        j_reg_267 <= j_fu_198_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln293_reg_272 <= icmp_ln293_fu_204_p2;
        icmp_ln293_reg_272_pp0_iter1_reg <= icmp_ln293_reg_272;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln293_reg_272_pp0_iter10_reg <= icmp_ln293_reg_272_pp0_iter9_reg;
        icmp_ln293_reg_272_pp0_iter11_reg <= icmp_ln293_reg_272_pp0_iter10_reg;
        icmp_ln293_reg_272_pp0_iter12_reg <= icmp_ln293_reg_272_pp0_iter11_reg;
        icmp_ln293_reg_272_pp0_iter13_reg <= icmp_ln293_reg_272_pp0_iter12_reg;
        icmp_ln293_reg_272_pp0_iter14_reg <= icmp_ln293_reg_272_pp0_iter13_reg;
        icmp_ln293_reg_272_pp0_iter15_reg <= icmp_ln293_reg_272_pp0_iter14_reg;
        icmp_ln293_reg_272_pp0_iter16_reg <= icmp_ln293_reg_272_pp0_iter15_reg;
        icmp_ln293_reg_272_pp0_iter17_reg <= icmp_ln293_reg_272_pp0_iter16_reg;
        icmp_ln293_reg_272_pp0_iter18_reg <= icmp_ln293_reg_272_pp0_iter17_reg;
        icmp_ln293_reg_272_pp0_iter19_reg <= icmp_ln293_reg_272_pp0_iter18_reg;
        icmp_ln293_reg_272_pp0_iter20_reg <= icmp_ln293_reg_272_pp0_iter19_reg;
        icmp_ln293_reg_272_pp0_iter21_reg <= icmp_ln293_reg_272_pp0_iter20_reg;
        icmp_ln293_reg_272_pp0_iter22_reg <= icmp_ln293_reg_272_pp0_iter21_reg;
        icmp_ln293_reg_272_pp0_iter23_reg <= icmp_ln293_reg_272_pp0_iter22_reg;
        icmp_ln293_reg_272_pp0_iter24_reg <= icmp_ln293_reg_272_pp0_iter23_reg;
        icmp_ln293_reg_272_pp0_iter25_reg <= icmp_ln293_reg_272_pp0_iter24_reg;
        icmp_ln293_reg_272_pp0_iter26_reg <= icmp_ln293_reg_272_pp0_iter25_reg;
        icmp_ln293_reg_272_pp0_iter27_reg <= icmp_ln293_reg_272_pp0_iter26_reg;
        icmp_ln293_reg_272_pp0_iter28_reg <= icmp_ln293_reg_272_pp0_iter27_reg;
        icmp_ln293_reg_272_pp0_iter29_reg <= icmp_ln293_reg_272_pp0_iter28_reg;
        icmp_ln293_reg_272_pp0_iter2_reg <= icmp_ln293_reg_272_pp0_iter1_reg;
        icmp_ln293_reg_272_pp0_iter30_reg <= icmp_ln293_reg_272_pp0_iter29_reg;
        icmp_ln293_reg_272_pp0_iter31_reg <= icmp_ln293_reg_272_pp0_iter30_reg;
        icmp_ln293_reg_272_pp0_iter32_reg <= icmp_ln293_reg_272_pp0_iter31_reg;
        icmp_ln293_reg_272_pp0_iter33_reg <= icmp_ln293_reg_272_pp0_iter32_reg;
        icmp_ln293_reg_272_pp0_iter34_reg <= icmp_ln293_reg_272_pp0_iter33_reg;
        icmp_ln293_reg_272_pp0_iter35_reg <= icmp_ln293_reg_272_pp0_iter34_reg;
        icmp_ln293_reg_272_pp0_iter36_reg <= icmp_ln293_reg_272_pp0_iter35_reg;
        icmp_ln293_reg_272_pp0_iter37_reg <= icmp_ln293_reg_272_pp0_iter36_reg;
        icmp_ln293_reg_272_pp0_iter38_reg <= icmp_ln293_reg_272_pp0_iter37_reg;
        icmp_ln293_reg_272_pp0_iter3_reg <= icmp_ln293_reg_272_pp0_iter2_reg;
        icmp_ln293_reg_272_pp0_iter4_reg <= icmp_ln293_reg_272_pp0_iter3_reg;
        icmp_ln293_reg_272_pp0_iter5_reg <= icmp_ln293_reg_272_pp0_iter4_reg;
        icmp_ln293_reg_272_pp0_iter6_reg <= icmp_ln293_reg_272_pp0_iter5_reg;
        icmp_ln293_reg_272_pp0_iter7_reg <= icmp_ln293_reg_272_pp0_iter6_reg;
        icmp_ln293_reg_272_pp0_iter8_reg <= icmp_ln293_reg_272_pp0_iter7_reg;
        icmp_ln293_reg_272_pp0_iter9_reg <= icmp_ln293_reg_272_pp0_iter8_reg;
        l_x_reg_282 <= store_temp10_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_do_init_phi_fu_146_p6 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sext_ln293_reg_276 <= sext_ln293_fu_248_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_phi_mux_do_init_phi_fu_146_p6 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        addr_blk_n = addr_empty_n;
    end else begin
        addr_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_phi_mux_do_init_phi_fu_146_p6 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        addr_read = 1'b1;
    end else begin
        addr_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter39 == 1'b1) & (icmp_ln293_reg_272_pp0_iter38_reg == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b0) & (ap_enable_reg_pp0_iter37 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter39 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b0) & (ap_enable_reg_pp0_iter37 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0_0to38 = 1'b1;
    end else begin
        ap_idle_pp0_0to38 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if ((icmp_ln293_reg_272_pp0_iter1_reg == 1'd1)) begin
            ap_phi_mux_do_init_phi_fu_146_p6 = 1'd1;
        end else if ((icmp_ln293_reg_272_pp0_iter1_reg == 1'd0)) begin
            ap_phi_mux_do_init_phi_fu_146_p6 = 1'd0;
        end else begin
            ap_phi_mux_do_init_phi_fu_146_p6 = do_init_reg_142;
        end
    end else begin
        ap_phi_mux_do_init_phi_fu_146_p6 = do_init_reg_142;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_201)) begin
        if ((icmp_ln293_reg_272 == 1'd1)) begin
            ap_phi_mux_j1_phi_fu_162_p6 = 9'd0;
        end else if ((icmp_ln293_reg_272 == 1'd0)) begin
            ap_phi_mux_j1_phi_fu_162_p6 = j_reg_267;
        end else begin
            ap_phi_mux_j1_phi_fu_162_p6 = j1_reg_158;
        end
    end else begin
        ap_phi_mux_j1_phi_fu_162_p6 = j1_reg_158;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        if ((icmp_ln293_reg_272_pp0_iter2_reg == 1'd1)) begin
            ap_phi_mux_ln_data_addr_rewind_idx_phi_fu_176_p6 = 64'd0;
        end else if ((icmp_ln293_reg_272_pp0_iter2_reg == 1'd0)) begin
            ap_phi_mux_ln_data_addr_rewind_idx_phi_fu_176_p6 = ln_data_addr_phi_idx_reg_186;
        end else begin
            ap_phi_mux_ln_data_addr_rewind_idx_phi_fu_176_p6 = ln_data_addr_rewind_idx_reg_172;
        end
    end else begin
        ap_phi_mux_ln_data_addr_rewind_idx_phi_fu_176_p6 = ln_data_addr_rewind_idx_reg_172;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln293_fu_204_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to38 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter39 == 1'b1) & (icmp_ln293_reg_272_pp0_iter38_reg == 1'd1))) begin
        done = 32'd1;
    end else begin
        done = done_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter39 == 1'b1) & (icmp_ln293_reg_272_pp0_iter38_reg == 1'd1))) begin
        done_ap_vld = 1'b1;
    end else begin
        done_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (do_init_reg_142 == 1'd1))) begin
        ln_data_blk_n_AW = m_axi_ln_data_AWREADY;
    end else begin
        ln_data_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter39 == 1'b1) & (icmp_ln293_reg_272_pp0_iter38_reg == 1'd1))) begin
        ln_data_blk_n_B = m_axi_ln_data_BVALID;
    end else begin
        ln_data_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ln_data_blk_n_W = m_axi_ln_data_WREADY;
    end else begin
        ln_data_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (do_init_reg_142 == 1'd1))) begin
        m_axi_ln_data_AWVALID = 1'b1;
    end else begin
        m_axi_ln_data_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter39 == 1'b1) & (icmp_ln293_reg_272_pp0_iter38_reg == 1'd1))) begin
        m_axi_ln_data_BREADY = 1'b1;
    end else begin
        m_axi_ln_data_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        m_axi_ln_data_WVALID = 1'b1;
    end else begin
        m_axi_ln_data_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_phi_mux_do_init_phi_fu_146_p6 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        outputs_blk_n = outputs_empty_n;
    end else begin
        outputs_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (ap_phi_mux_do_init_phi_fu_146_p6 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        outputs_read = 1'b1;
    end else begin
        outputs_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        store_temp10_blk_n = store_temp10_empty_n;
    end else begin
        store_temp10_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        store_temp10_read = 1'b1;
    end else begin
        store_temp10_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_reset_idle_pp0 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln293_fu_232_p2 = (outputs_dout + zext_ln293_fu_228_p1);

assign and_ln_fu_220_p3 = {{tmp_fu_210_p4}, {5'd0}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((ap_phi_mux_do_init_phi_fu_146_p6 == 1'd1) & (1'b0 == addr_empty_n)) | ((ap_phi_mux_do_init_phi_fu_146_p6 == 1'd1) & (outputs_empty_n == 1'b0)))) | ((ap_enable_reg_pp0_iter39 == 1'b1) & (icmp_ln293_reg_272_pp0_iter38_reg == 1'd1) & (m_axi_ln_data_BVALID == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (store_temp10_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((ap_phi_mux_do_init_phi_fu_146_p6 == 1'd1) & (1'b0 == addr_empty_n)) | ((ap_phi_mux_do_init_phi_fu_146_p6 == 1'd1) & (outputs_empty_n == 1'b0)))) | ((ap_enable_reg_pp0_iter39 == 1'b1) & (icmp_ln293_reg_272_pp0_iter38_reg == 1'd1) & (m_axi_ln_data_BVALID == 1'b0)) | ((m_axi_ln_data_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state4_io) | (store_temp10_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((ap_phi_mux_do_init_phi_fu_146_p6 == 1'd1) & (1'b0 == addr_empty_n)) | ((ap_phi_mux_do_init_phi_fu_146_p6 == 1'd1) & (outputs_empty_n == 1'b0)))) | ((ap_enable_reg_pp0_iter39 == 1'b1) & (icmp_ln293_reg_272_pp0_iter38_reg == 1'd1) & (m_axi_ln_data_BVALID == 1'b0)) | ((m_axi_ln_data_WREADY == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state4_io) | (store_temp10_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter37 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((ap_phi_mux_do_init_phi_fu_146_p6 == 1'd1) & (1'b0 == addr_empty_n)) | ((ap_phi_mux_do_init_phi_fu_146_p6 == 1'd1) & (outputs_empty_n == 1'b0)));
end

assign ap_block_state40_pp0_stage0_iter38 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state41_pp0_stage0_iter39 = ((icmp_ln293_reg_272_pp0_iter38_reg == 1'd1) & (m_axi_ln_data_BVALID == 1'b0));
end

always @ (*) begin
    ap_block_state4_io = ((m_axi_ln_data_AWREADY == 1'b0) & (do_init_reg_142 == 1'd1));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = (store_temp10_empty_n == 1'b0);
end

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_201 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0));
end

always @ (*) begin
    ap_condition_472 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_phi_reg_pp0_iter0_ln_data_addr_phi_idx_reg_186 = 'bx;

assign icmp_ln293_fu_204_p2 = ((ap_phi_mux_j1_phi_fu_162_p6 == 9'd511) ? 1'b1 : 1'b0);

assign j_fu_198_p2 = (ap_phi_mux_j1_phi_fu_162_p6 + 9'd1);

assign m_axi_ln_data_ARADDR = 64'd0;

assign m_axi_ln_data_ARBURST = 2'd0;

assign m_axi_ln_data_ARCACHE = 4'd0;

assign m_axi_ln_data_ARID = 1'd0;

assign m_axi_ln_data_ARLEN = 32'd0;

assign m_axi_ln_data_ARLOCK = 2'd0;

assign m_axi_ln_data_ARPROT = 3'd0;

assign m_axi_ln_data_ARQOS = 4'd0;

assign m_axi_ln_data_ARREGION = 4'd0;

assign m_axi_ln_data_ARSIZE = 3'd0;

assign m_axi_ln_data_ARUSER = 1'd0;

assign m_axi_ln_data_ARVALID = 1'b0;

assign m_axi_ln_data_AWADDR = sext_ln293_reg_276;

assign m_axi_ln_data_AWBURST = 2'd0;

assign m_axi_ln_data_AWCACHE = 4'd0;

assign m_axi_ln_data_AWID = 1'd0;

assign m_axi_ln_data_AWLEN = 32'd512;

assign m_axi_ln_data_AWLOCK = 2'd0;

assign m_axi_ln_data_AWPROT = 3'd0;

assign m_axi_ln_data_AWQOS = 4'd0;

assign m_axi_ln_data_AWREGION = 4'd0;

assign m_axi_ln_data_AWSIZE = 3'd0;

assign m_axi_ln_data_AWUSER = 1'd0;

assign m_axi_ln_data_RREADY = 1'b0;

assign m_axi_ln_data_WDATA = l_x_reg_282;

assign m_axi_ln_data_WID = 1'd0;

assign m_axi_ln_data_WLAST = 1'b0;

assign m_axi_ln_data_WSTRB = 32'd4294967295;

assign m_axi_ln_data_WUSER = 1'd0;

assign sext_ln293_fu_248_p1 = $signed(trunc_ln_fu_238_p4);

assign tmp_fu_210_p4 = {{addr_dout[31:5]}};

assign trunc_ln_fu_238_p4 = {{add_ln293_fu_232_p2[63:5]}};

assign zext_ln293_fu_228_p1 = and_ln_fu_220_p3;

always @ (posedge ap_clk) begin
    done_preg[31:1] <= 31'b0000000000000000000000000000000;
end

endmodule //layernorm_p_anonymous_namespace_Store_ap_int_8_ap_uint_256_5u_s
