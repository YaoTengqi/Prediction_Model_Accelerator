-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity layernorm_p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cols_log_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    cols_log_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    cols_log_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    cols_log_empty_n : IN STD_LOGIC;
    cols_log_read : OUT STD_LOGIC;
    rows_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    rows_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    rows_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    rows_empty_n : IN STD_LOGIC;
    rows_read : OUT STD_LOGIC;
    norm9_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    norm9_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    norm9_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    norm9_empty_n : IN STD_LOGIC;
    norm9_read : OUT STD_LOGIC;
    store_temp10_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    store_temp10_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    store_temp10_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    store_temp10_full_n : IN STD_LOGIC;
    store_temp10_write : OUT STD_LOGIC );
end;


architecture behav of layernorm_p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv59_0 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv27_1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_const_lv59_1 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cols_log_blk_n : STD_LOGIC;
    signal rows_blk_n : STD_LOGIC;
    signal norm9_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln26715_reg_103 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26715_reg_103_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i14_reg_113 : STD_LOGIC_VECTOR (26 downto 0);
    signal indvar_flatten12_reg_124 : STD_LOGIC_VECTOR (58 downto 0);
    signal j_116_reg_135 : STD_LOGIC_VECTOR (31 downto 0);
    signal j13_reg_146 : STD_LOGIC_VECTOR (31 downto 0);
    signal rows_read_reg_271 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_164_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_reg_276 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln_reg_281 : STD_LOGIC_VECTOR (26 downto 0);
    signal bound_fu_190_p2 : STD_LOGIC_VECTOR (58 downto 0);
    signal bound_reg_288 : STD_LOGIC_VECTOR (58 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln267_1_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln265_1_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_219_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal i_reg_307 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal add_ln265_fu_225_p2 : STD_LOGIC_VECTOR (58 downto 0);
    signal add_ln265_reg_312 : STD_LOGIC_VECTOR (58 downto 0);
    signal icmp_ln267_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln267_reg_317 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln265_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln265_reg_322 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln265_reg_322_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln265_reg_322_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_241_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_reg_326 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal j_fu_253_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_336 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ram_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal ram_V_ce0 : STD_LOGIC;
    signal ram_V_we0 : STD_LOGIC;
    signal ram_V_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_ap_start : STD_LOGIC;
    signal grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_ap_done : STD_LOGIC;
    signal grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_ap_idle : STD_LOGIC;
    signal grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_ap_ready : STD_LOGIC;
    signal grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_store_temp10_din : STD_LOGIC_VECTOR (255 downto 0);
    signal grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_store_temp10_write : STD_LOGIC;
    signal grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_ram_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_ram_V_ce0 : STD_LOGIC;
    signal ap_phi_mux_icmp_ln26715_phi_fu_106_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_i14_phi_fu_117_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_phi_mux_indvar_flatten12_phi_fu_128_p4 : STD_LOGIC_VECTOR (58 downto 0);
    signal ap_phi_mux_j_116_phi_fu_139_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_j13_phi_fu_150_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal zext_ln271_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal cols_fu_168_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_190_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound_fu_190_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal select_ln265_fu_207_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal zext_ln271_fu_259_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_263_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_263_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_263_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_263_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_190_p00 : STD_LOGIC_VECTOR (58 downto 0);
    signal bound_fu_190_p10 : STD_LOGIC_VECTOR (58 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component layernorm_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        store_temp10_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        store_temp10_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        store_temp10_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        store_temp10_full_n : IN STD_LOGIC;
        store_temp10_write : OUT STD_LOGIC;
        ram_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ram_V_ce0 : OUT STD_LOGIC;
        ram_V_q0 : IN STD_LOGIC_VECTOR (255 downto 0) );
    end component;


    component layernorm_mul_32ns_27ns_59_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (26 downto 0);
        dout : OUT STD_LOGIC_VECTOR (58 downto 0) );
    end component;


    component layernorm_mac_muladd_9s_9s_9ns_9_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component layernorm_p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_s_ram_V_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (255 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;



begin
    ram_V_U : component layernorm_p_anonymous_namespace_Store_temp_ap_int_8_ap_uint_256_5u_s_ram_V_RAM_AUTO_1R1W
    generic map (
        DataWidth => 256,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ram_V_address0,
        ce0 => ram_V_ce0,
        we0 => ram_V_we0,
        d0 => norm9_dout,
        q0 => ram_V_q0);

    grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157 : component layernorm_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_ap_start,
        ap_done => grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_ap_done,
        ap_idle => grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_ap_idle,
        ap_ready => grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_ap_ready,
        store_temp10_din => grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_store_temp10_din,
        store_temp10_num_data_valid => ap_const_lv5_0,
        store_temp10_fifo_cap => ap_const_lv5_0,
        store_temp10_full_n => store_temp10_full_n,
        store_temp10_write => grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_store_temp10_write,
        ram_V_address0 => grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_ram_V_address0,
        ram_V_ce0 => grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_ram_V_ce0,
        ram_V_q0 => ram_V_q0);

    mul_32ns_27ns_59_1_1_U264 : component layernorm_mul_32ns_27ns_59_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 27,
        dout_WIDTH => 59)
    port map (
        din0 => bound_fu_190_p0,
        din1 => bound_fu_190_p1,
        dout => bound_fu_190_p2);

    mac_muladd_9s_9s_9ns_9_4_1_U265 : component layernorm_mac_muladd_9s_9s_9ns_9_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_263_p0,
        din1 => empty_reg_276,
        din2 => grp_fu_263_p2,
        ce => grp_fu_263_ce,
        dout => grp_fu_263_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_ap_done = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln265_1_fu_201_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln265_1_fu_201_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_ap_ready = ap_const_logic_1)) then 
                    grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i14_reg_113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln265_1_fu_201_p2 = ap_const_lv1_0))) then 
                i14_reg_113 <= ap_const_lv27_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln265_reg_322 = ap_const_lv1_0))) then 
                i14_reg_113 <= i_reg_307;
            end if; 
        end if;
    end process;

    icmp_ln26715_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln265_1_fu_201_p2 = ap_const_lv1_0))) then 
                icmp_ln26715_reg_103 <= icmp_ln267_1_fu_196_p2;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln265_reg_322 = ap_const_lv1_0))) then 
                icmp_ln26715_reg_103 <= icmp_ln267_reg_317;
            end if; 
        end if;
    end process;

    indvar_flatten12_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln265_1_fu_201_p2 = ap_const_lv1_0))) then 
                indvar_flatten12_reg_124 <= ap_const_lv59_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln265_reg_322 = ap_const_lv1_0))) then 
                indvar_flatten12_reg_124 <= add_ln265_reg_312;
            end if; 
        end if;
    end process;

    j13_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln265_1_fu_201_p2 = ap_const_lv1_0))) then 
                j13_reg_146 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln265_reg_322_pp0_iter2_reg = ap_const_lv1_0))) then 
                j13_reg_146 <= j_2_reg_326;
            end if; 
        end if;
    end process;

    j_116_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln265_1_fu_201_p2 = ap_const_lv1_0))) then 
                j_116_reg_135 <= ap_const_lv32_1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln265_reg_322_pp0_iter2_reg = ap_const_lv1_0))) then 
                j_116_reg_135 <= j_reg_336;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln265_reg_312 <= add_ln265_fu_225_p2;
                i_reg_307 <= i_fu_219_p2;
                icmp_ln267_reg_317 <= icmp_ln267_fu_231_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                bound_reg_288 <= bound_fu_190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                empty_reg_276 <= empty_fu_164_p1;
                rows_read_reg_271 <= rows_dout;
                trunc_ln_reg_281 <= cols_fu_168_p2(31 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln265_reg_322 <= icmp_ln265_fu_236_p2;
                icmp_ln265_reg_322_pp0_iter1_reg <= icmp_ln265_reg_322;
                icmp_ln26715_reg_103_pp0_iter1_reg <= icmp_ln26715_reg_103;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln265_reg_322_pp0_iter2_reg <= icmp_ln265_reg_322_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                j_2_reg_326 <= j_2_fu_241_p3;
                j_reg_336 <= j_fu_253_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, cols_log_empty_n, rows_empty_n, ap_enable_reg_pp0_iter3, ap_CS_fsm_state2, icmp_ln265_1_fu_201_p2, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_ap_done, ap_CS_fsm_state8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((rows_empty_n = ap_const_logic_0) or (cols_log_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln265_1_fu_201_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln265_fu_225_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten12_phi_fu_128_p4) + unsigned(ap_const_lv59_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state7 <= ap_CS_fsm(3);
    ap_CS_fsm_state8 <= ap_CS_fsm(4);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, cols_log_empty_n, rows_empty_n)
    begin
        if (((rows_empty_n = ap_const_logic_0) or (cols_log_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_ap_done)
    begin
        if ((grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(norm9_empty_n, ap_enable_reg_pp0_iter3)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (norm9_empty_n = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(norm9_empty_n, ap_enable_reg_pp0_iter3)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (norm9_empty_n = ap_const_logic_0));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, cols_log_empty_n, rows_empty_n)
    begin
                ap_block_state1 <= ((rows_empty_n = ap_const_logic_0) or (cols_log_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter3_assign_proc : process(norm9_empty_n)
    begin
                ap_block_state6_pp0_stage0_iter3 <= (norm9_empty_n = ap_const_logic_0);
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln265_fu_236_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln265_fu_236_p2 = ap_const_lv1_1))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_ap_done, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i14_phi_fu_117_p4_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp0_stage0, i14_reg_113, i_reg_307, icmp_ln265_reg_322, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln265_reg_322 = ap_const_lv1_0))) then 
            ap_phi_mux_i14_phi_fu_117_p4 <= i_reg_307;
        else 
            ap_phi_mux_i14_phi_fu_117_p4 <= i14_reg_113;
        end if; 
    end process;


    ap_phi_mux_icmp_ln26715_phi_fu_106_p4_assign_proc : process(ap_block_pp0_stage0, icmp_ln26715_reg_103, ap_CS_fsm_pp0_stage0, icmp_ln267_reg_317, icmp_ln265_reg_322, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln265_reg_322 = ap_const_lv1_0))) then 
            ap_phi_mux_icmp_ln26715_phi_fu_106_p4 <= icmp_ln267_reg_317;
        else 
            ap_phi_mux_icmp_ln26715_phi_fu_106_p4 <= icmp_ln26715_reg_103;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten12_phi_fu_128_p4_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp0_stage0, indvar_flatten12_reg_124, add_ln265_reg_312, icmp_ln265_reg_322, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln265_reg_322 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten12_phi_fu_128_p4 <= add_ln265_reg_312;
        else 
            ap_phi_mux_indvar_flatten12_phi_fu_128_p4 <= indvar_flatten12_reg_124;
        end if; 
    end process;


    ap_phi_mux_j13_phi_fu_150_p4_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, j13_reg_146, icmp_ln265_reg_322_pp0_iter2_reg, j_2_reg_326)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln265_reg_322_pp0_iter2_reg = ap_const_lv1_0))) then 
            ap_phi_mux_j13_phi_fu_150_p4 <= j_2_reg_326;
        else 
            ap_phi_mux_j13_phi_fu_150_p4 <= j13_reg_146;
        end if; 
    end process;


    ap_phi_mux_j_116_phi_fu_139_p4_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, j_116_reg_135, icmp_ln265_reg_322_pp0_iter2_reg, j_reg_336)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln265_reg_322_pp0_iter2_reg = ap_const_lv1_0))) then 
            ap_phi_mux_j_116_phi_fu_139_p4 <= j_reg_336;
        else 
            ap_phi_mux_j_116_phi_fu_139_p4 <= j_116_reg_135;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_ap_done, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound_fu_190_p0 <= bound_fu_190_p00(32 - 1 downto 0);
    bound_fu_190_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rows_read_reg_271),59));
    bound_fu_190_p1 <= bound_fu_190_p10(27 - 1 downto 0);
    bound_fu_190_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln_reg_281),59));
    cols_fu_168_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & cols_log_dout(31-1 downto 0)))));

    cols_log_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cols_log_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cols_log_blk_n <= cols_log_empty_n;
        else 
            cols_log_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    cols_log_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cols_log_empty_n, rows_empty_n)
    begin
        if ((not(((rows_empty_n = ap_const_logic_0) or (cols_log_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            cols_log_read <= ap_const_logic_1;
        else 
            cols_log_read <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_164_p1 <= rows_dout(9 - 1 downto 0);

    grp_fu_263_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_263_ce <= ap_const_logic_1;
        else 
            grp_fu_263_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_263_p0 <= select_ln265_fu_207_p3(9 - 1 downto 0);
    grp_fu_263_p2 <= j_2_fu_241_p3(9 - 1 downto 0);
    grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_ap_start <= grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_ap_start_reg;
    i_fu_219_p2 <= std_logic_vector(unsigned(select_ln265_fu_207_p3) + unsigned(ap_const_lv27_1));
    icmp_ln265_1_fu_201_p2 <= "1" when (bound_fu_190_p2 = ap_const_lv59_0) else "0";
    icmp_ln265_fu_236_p2 <= "1" when (add_ln265_fu_225_p2 = bound_reg_288) else "0";
    icmp_ln267_1_fu_196_p2 <= "1" when (trunc_ln_reg_281 = ap_const_lv27_0) else "0";
    icmp_ln267_fu_231_p2 <= "1" when (i_fu_219_p2 = trunc_ln_reg_281) else "0";
    j_2_fu_241_p3 <= 
        ap_phi_mux_j_116_phi_fu_139_p4 when (icmp_ln26715_reg_103_pp0_iter1_reg(0) = '1') else 
        ap_phi_mux_j13_phi_fu_150_p4;
    j_fu_253_p2 <= std_logic_vector(unsigned(j_2_fu_241_p3) + unsigned(ap_const_lv32_1));

    norm9_blk_n_assign_proc : process(norm9_empty_n, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            norm9_blk_n <= norm9_empty_n;
        else 
            norm9_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    norm9_read_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            norm9_read <= ap_const_logic_1;
        else 
            norm9_read <= ap_const_logic_0;
        end if; 
    end process;


    ram_V_address0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_ram_V_address0, ap_CS_fsm_state8, zext_ln271_fu_259_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ram_V_address0 <= zext_ln271_fu_259_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ram_V_address0 <= grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_ram_V_address0;
        else 
            ram_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    ram_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_ram_V_ce0, ap_CS_fsm_state8)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ram_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ram_V_ce0 <= grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_ram_V_ce0;
        else 
            ram_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ram_V_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ram_V_we0 <= ap_const_logic_1;
        else 
            ram_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rows_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, rows_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_blk_n <= rows_empty_n;
        else 
            rows_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    rows_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, cols_log_empty_n, rows_empty_n)
    begin
        if ((not(((rows_empty_n = ap_const_logic_0) or (cols_log_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            rows_read <= ap_const_logic_1;
        else 
            rows_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln265_fu_207_p3 <= 
        ap_const_lv27_0 when (ap_phi_mux_icmp_ln26715_phi_fu_106_p4(0) = '1') else 
        ap_phi_mux_i14_phi_fu_117_p4;
    store_temp10_din <= grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_store_temp10_din;

    store_temp10_write_assign_proc : process(grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_store_temp10_write, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            store_temp10_write <= grp_p_anonymous_namespace_Store_temp_ap_int_ap_uint_5u_Pipeline_VITIS_LOOP_275_3_fu_157_store_temp10_write;
        else 
            store_temp10_write <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln271_fu_259_p0 <= grp_fu_263_p3;
    zext_ln271_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln271_fu_259_p0),64));
end behav;
