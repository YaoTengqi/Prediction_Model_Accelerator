// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module layernorm_p_anonymous_namespace_StdDev_ap_int_8_float_5u_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        cols_log_dout,
        cols_log_num_data_valid,
        cols_log_fifo_cap,
        cols_log_empty_n,
        cols_log_read,
        rows_dout,
        rows_num_data_valid,
        rows_fifo_cap,
        rows_empty_n,
        rows_read,
        data_copy_b2_dout,
        data_copy_b2_num_data_valid,
        data_copy_b2_fifo_cap,
        data_copy_b2_empty_n,
        data_copy_b2_read,
        mean_a6_dout,
        mean_a6_num_data_valid,
        mean_a6_fifo_cap,
        mean_a6_empty_n,
        mean_a6_read,
        stddev8_din,
        stddev8_num_data_valid,
        stddev8_fifo_cap,
        stddev8_full_n,
        stddev8_write,
        rows_c17_din,
        rows_c17_num_data_valid,
        rows_c17_fifo_cap,
        rows_c17_full_n,
        rows_c17_write,
        cols_log_c20_din,
        cols_log_c20_num_data_valid,
        cols_log_c20_fifo_cap,
        cols_log_c20_full_n,
        cols_log_c20_write
);

parameter    ap_ST_fsm_state1 = 61'd1;
parameter    ap_ST_fsm_state2 = 61'd2;
parameter    ap_ST_fsm_state3 = 61'd4;
parameter    ap_ST_fsm_state4 = 61'd8;
parameter    ap_ST_fsm_state5 = 61'd16;
parameter    ap_ST_fsm_state6 = 61'd32;
parameter    ap_ST_fsm_pp0_stage0 = 61'd64;
parameter    ap_ST_fsm_state12 = 61'd128;
parameter    ap_ST_fsm_state13 = 61'd256;
parameter    ap_ST_fsm_state14 = 61'd512;
parameter    ap_ST_fsm_state15 = 61'd1024;
parameter    ap_ST_fsm_state16 = 61'd2048;
parameter    ap_ST_fsm_state17 = 61'd4096;
parameter    ap_ST_fsm_state18 = 61'd8192;
parameter    ap_ST_fsm_state19 = 61'd16384;
parameter    ap_ST_fsm_state20 = 61'd32768;
parameter    ap_ST_fsm_state21 = 61'd65536;
parameter    ap_ST_fsm_state22 = 61'd131072;
parameter    ap_ST_fsm_state23 = 61'd262144;
parameter    ap_ST_fsm_state24 = 61'd524288;
parameter    ap_ST_fsm_state25 = 61'd1048576;
parameter    ap_ST_fsm_state26 = 61'd2097152;
parameter    ap_ST_fsm_state27 = 61'd4194304;
parameter    ap_ST_fsm_state28 = 61'd8388608;
parameter    ap_ST_fsm_state29 = 61'd16777216;
parameter    ap_ST_fsm_state30 = 61'd33554432;
parameter    ap_ST_fsm_state31 = 61'd67108864;
parameter    ap_ST_fsm_state32 = 61'd134217728;
parameter    ap_ST_fsm_state33 = 61'd268435456;
parameter    ap_ST_fsm_state34 = 61'd536870912;
parameter    ap_ST_fsm_state35 = 61'd1073741824;
parameter    ap_ST_fsm_state36 = 61'd2147483648;
parameter    ap_ST_fsm_state37 = 61'd4294967296;
parameter    ap_ST_fsm_state38 = 61'd8589934592;
parameter    ap_ST_fsm_state39 = 61'd17179869184;
parameter    ap_ST_fsm_state40 = 61'd34359738368;
parameter    ap_ST_fsm_state41 = 61'd68719476736;
parameter    ap_ST_fsm_state42 = 61'd137438953472;
parameter    ap_ST_fsm_state43 = 61'd274877906944;
parameter    ap_ST_fsm_state44 = 61'd549755813888;
parameter    ap_ST_fsm_state45 = 61'd1099511627776;
parameter    ap_ST_fsm_state46 = 61'd2199023255552;
parameter    ap_ST_fsm_state47 = 61'd4398046511104;
parameter    ap_ST_fsm_state48 = 61'd8796093022208;
parameter    ap_ST_fsm_state49 = 61'd17592186044416;
parameter    ap_ST_fsm_state50 = 61'd35184372088832;
parameter    ap_ST_fsm_state51 = 61'd70368744177664;
parameter    ap_ST_fsm_state52 = 61'd140737488355328;
parameter    ap_ST_fsm_state53 = 61'd281474976710656;
parameter    ap_ST_fsm_state54 = 61'd562949953421312;
parameter    ap_ST_fsm_state55 = 61'd1125899906842624;
parameter    ap_ST_fsm_state56 = 61'd2251799813685248;
parameter    ap_ST_fsm_state57 = 61'd4503599627370496;
parameter    ap_ST_fsm_state58 = 61'd9007199254740992;
parameter    ap_ST_fsm_state59 = 61'd18014398509481984;
parameter    ap_ST_fsm_state60 = 61'd36028797018963968;
parameter    ap_ST_fsm_state61 = 61'd72057594037927936;
parameter    ap_ST_fsm_state62 = 61'd144115188075855872;
parameter    ap_ST_fsm_state63 = 61'd288230376151711744;
parameter    ap_ST_fsm_state64 = 61'd576460752303423488;
parameter    ap_ST_fsm_state65 = 61'd1152921504606846976;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] cols_log_dout;
input  [1:0] cols_log_num_data_valid;
input  [1:0] cols_log_fifo_cap;
input   cols_log_empty_n;
output   cols_log_read;
input  [31:0] rows_dout;
input  [1:0] rows_num_data_valid;
input  [1:0] rows_fifo_cap;
input   rows_empty_n;
output   rows_read;
input  [255:0] data_copy_b2_dout;
input  [4:0] data_copy_b2_num_data_valid;
input  [4:0] data_copy_b2_fifo_cap;
input   data_copy_b2_empty_n;
output   data_copy_b2_read;
input  [7:0] mean_a6_dout;
input  [5:0] mean_a6_num_data_valid;
input  [5:0] mean_a6_fifo_cap;
input   mean_a6_empty_n;
output   mean_a6_read;
output  [31:0] stddev8_din;
input  [5:0] stddev8_num_data_valid;
input  [5:0] stddev8_fifo_cap;
input   stddev8_full_n;
output   stddev8_write;
output  [31:0] rows_c17_din;
input  [1:0] rows_c17_num_data_valid;
input  [1:0] rows_c17_fifo_cap;
input   rows_c17_full_n;
output   rows_c17_write;
output  [31:0] cols_log_c20_din;
input  [1:0] cols_log_c20_num_data_valid;
input  [1:0] cols_log_c20_fifo_cap;
input   cols_log_c20_full_n;
output   cols_log_c20_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg cols_log_read;
reg rows_read;
reg data_copy_b2_read;
reg mean_a6_read;
reg stddev8_write;
reg rows_c17_write;
reg cols_log_c20_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [60:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    cols_log_blk_n;
reg    rows_blk_n;
reg    data_copy_b2_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    mean_a6_blk_n;
wire    ap_CS_fsm_state6;
reg    stddev8_blk_n;
wire    ap_CS_fsm_state65;
reg   [0:0] icmp_ln160_1_reg_1250;
reg    rows_c17_blk_n;
reg    cols_log_c20_blk_n;
reg   [26:0] j4_reg_256;
reg   [31:0] diff_sum2_reg_267;
reg   [31:0] cols_log_read_reg_1223;
reg   [31:0] rows_read_reg_1228;
wire   [31:0] cols_fu_314_p2;
wire    ap_CS_fsm_state2;
reg   [26:0] trunc_ln_reg_1239;
wire   [63:0] grp_fu_302_p1;
reg   [63:0] temp1_reg_1245;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln160_1_fu_330_p2;
reg   [7:0] mean_a6_read_reg_1254;
wire   [0:0] icmp_ln165_1_fu_335_p2;
reg   [0:0] icmp_ln165_1_reg_1259;
wire   [31:0] k_fu_340_p2;
reg   [31:0] k_reg_1263;
reg  signed [7:0] l_val_V_1_reg_1269;
reg    ap_block_state7_pp0_stage0_iter0;
wire    ap_block_state8_pp0_stage0_iter1;
wire    ap_block_state9_pp0_stage0_iter2;
wire    ap_block_state10_pp0_stage0_iter3;
wire    ap_block_state11_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
reg  signed [7:0] l_val_V_3_reg_1274;
reg  signed [7:0] l_val_V_5_reg_1279;
reg  signed [7:0] l_val_V_7_reg_1284;
reg  signed [7:0] l_val_V_9_reg_1289;
reg  signed [7:0] l_val_V_11_reg_1294;
reg  signed [7:0] l_val_V_13_reg_1299;
reg  signed [7:0] l_val_V_15_reg_1304;
reg  signed [7:0] l_val_V_17_reg_1309;
reg  signed [7:0] l_val_V_19_reg_1314;
reg  signed [7:0] l_val_V_21_reg_1319;
reg  signed [7:0] l_val_V_23_reg_1324;
reg  signed [7:0] l_val_V_25_reg_1329;
reg  signed [7:0] l_val_V_27_reg_1334;
reg  signed [7:0] l_val_V_29_reg_1339;
reg  signed [7:0] l_val_V_31_reg_1344;
wire  signed [8:0] sext_ln1496_1_fu_664_p1;
reg  signed [8:0] sext_ln1496_1_reg_1349;
wire   [26:0] j_fu_727_p2;
reg   [26:0] j_reg_1369;
wire   [0:0] icmp_ln165_fu_733_p2;
reg   [0:0] icmp_ln165_reg_1374;
reg   [0:0] icmp_ln165_reg_1374_pp0_iter1_reg;
reg   [0:0] icmp_ln165_reg_1374_pp0_iter2_reg;
reg   [0:0] icmp_ln165_reg_1374_pp0_iter3_reg;
wire  signed [17:0] grp_fu_999_p2;
reg    ap_enable_reg_pp0_iter3;
wire  signed [17:0] grp_fu_1005_p2;
wire  signed [17:0] grp_fu_1011_p2;
wire  signed [17:0] grp_fu_1017_p2;
wire  signed [17:0] grp_fu_1023_p2;
wire  signed [17:0] grp_fu_1029_p2;
wire  signed [17:0] grp_fu_1035_p2;
wire  signed [17:0] grp_fu_1041_p2;
wire  signed [17:0] grp_fu_1047_p2;
wire  signed [17:0] grp_fu_1053_p2;
wire  signed [17:0] grp_fu_1059_p2;
wire  signed [17:0] grp_fu_1065_p2;
wire  signed [17:0] grp_fu_1071_p2;
wire  signed [17:0] grp_fu_1077_p2;
wire  signed [17:0] grp_fu_1083_p2;
wire  signed [17:0] grp_fu_1089_p2;
wire   [31:0] diff_sum_fu_984_p2;
reg   [31:0] diff_sum_reg_1458;
reg    ap_enable_reg_pp0_iter4;
wire   [0:0] icmp_ln160_fu_990_p2;
reg   [0:0] icmp_ln160_reg_1464;
wire    ap_CS_fsm_state12;
wire   [63:0] grp_fu_305_p1;
reg   [63:0] conv_reg_1468;
wire    ap_CS_fsm_state15;
wire   [63:0] grp_fu_298_p2;
reg   [63:0] div_reg_1473;
wire    ap_CS_fsm_state37;
wire   [63:0] grp_fu_293_p2;
reg   [63:0] temp_reg_1478;
wire    ap_CS_fsm_state42;
wire   [63:0] grp_fu_309_p2;
reg   [63:0] tmp_reg_1483;
wire    ap_CS_fsm_state63;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg   [31:0] k6_reg_245;
reg    ap_block_state65;
reg   [26:0] ap_phi_mux_j4_phi_fu_260_p4;
reg   [31:0] ap_phi_mux_diff_sum3_phi_fu_282_p4;
reg   [31:0] diff_sum3_reg_278;
reg    ap_block_state1;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state43;
wire  signed [7:0] l_val_V_fu_346_p1;
wire  signed [7:0] l_val_V_2_fu_360_p4;
wire  signed [7:0] l_val_V_4_fu_380_p4;
wire  signed [7:0] l_val_V_6_fu_400_p4;
wire  signed [7:0] l_val_V_8_fu_420_p4;
wire  signed [7:0] l_val_V_10_fu_440_p4;
wire  signed [7:0] l_val_V_12_fu_460_p4;
wire  signed [7:0] l_val_V_14_fu_480_p4;
wire  signed [7:0] l_val_V_16_fu_500_p4;
wire  signed [7:0] l_val_V_18_fu_520_p4;
wire  signed [7:0] l_val_V_20_fu_540_p4;
wire  signed [7:0] l_val_V_22_fu_560_p4;
wire  signed [7:0] l_val_V_24_fu_580_p4;
wire  signed [7:0] l_val_V_26_fu_600_p4;
wire  signed [7:0] l_val_V_28_fu_620_p4;
wire  signed [7:0] l_val_V_30_fu_640_p4;
wire  signed [17:0] grp_fu_1095_p3;
wire  signed [17:0] grp_fu_1103_p3;
wire  signed [18:0] sext_ln173_1_fu_789_p1;
wire  signed [18:0] sext_ln173_fu_786_p1;
wire   [18:0] add_ln173_2_fu_792_p2;
wire  signed [17:0] grp_fu_1111_p3;
wire  signed [17:0] grp_fu_1119_p3;
wire  signed [18:0] sext_ln173_4_fu_805_p1;
wire  signed [18:0] sext_ln173_3_fu_802_p1;
wire   [18:0] add_ln173_5_fu_808_p2;
wire  signed [19:0] sext_ln173_5_fu_814_p1;
wire  signed [19:0] sext_ln173_2_fu_798_p1;
wire   [19:0] add_ln173_6_fu_818_p2;
wire  signed [17:0] grp_fu_1127_p3;
wire  signed [17:0] grp_fu_1135_p3;
wire  signed [18:0] sext_ln173_8_fu_831_p1;
wire  signed [18:0] sext_ln173_7_fu_828_p1;
wire   [18:0] add_ln173_9_fu_834_p2;
wire  signed [17:0] grp_fu_1143_p3;
wire  signed [17:0] grp_fu_1151_p3;
wire  signed [18:0] sext_ln173_11_fu_847_p1;
wire  signed [18:0] sext_ln173_10_fu_844_p1;
wire   [18:0] add_ln173_12_fu_850_p2;
wire  signed [19:0] sext_ln173_12_fu_856_p1;
wire  signed [19:0] sext_ln173_9_fu_840_p1;
wire   [19:0] add_ln173_13_fu_860_p2;
wire  signed [20:0] sext_ln173_13_fu_866_p1;
wire  signed [20:0] sext_ln173_6_fu_824_p1;
wire   [20:0] add_ln173_14_fu_870_p2;
wire  signed [17:0] grp_fu_1159_p3;
wire  signed [17:0] grp_fu_1167_p3;
wire  signed [18:0] sext_ln173_16_fu_883_p1;
wire  signed [18:0] sext_ln173_15_fu_880_p1;
wire   [18:0] add_ln173_17_fu_886_p2;
wire  signed [17:0] grp_fu_1175_p3;
wire  signed [17:0] grp_fu_1183_p3;
wire  signed [18:0] sext_ln173_19_fu_899_p1;
wire  signed [18:0] sext_ln173_18_fu_896_p1;
wire   [18:0] add_ln173_20_fu_902_p2;
wire  signed [19:0] sext_ln173_20_fu_908_p1;
wire  signed [19:0] sext_ln173_17_fu_892_p1;
wire   [19:0] add_ln173_21_fu_912_p2;
wire  signed [17:0] grp_fu_1191_p3;
wire  signed [17:0] grp_fu_1199_p3;
wire  signed [18:0] sext_ln173_23_fu_925_p1;
wire  signed [18:0] sext_ln173_22_fu_922_p1;
wire   [18:0] add_ln173_24_fu_928_p2;
wire  signed [17:0] grp_fu_1207_p3;
wire  signed [17:0] grp_fu_1215_p3;
wire  signed [18:0] sext_ln173_26_fu_941_p1;
wire  signed [18:0] sext_ln173_25_fu_938_p1;
wire   [18:0] add_ln173_27_fu_944_p2;
wire  signed [19:0] sext_ln173_27_fu_950_p1;
wire  signed [19:0] sext_ln173_24_fu_934_p1;
wire   [19:0] add_ln173_28_fu_954_p2;
wire  signed [20:0] sext_ln173_28_fu_960_p1;
wire  signed [20:0] sext_ln173_21_fu_918_p1;
wire   [20:0] add_ln173_29_fu_964_p2;
wire  signed [21:0] sext_ln173_29_fu_970_p1;
wire  signed [21:0] sext_ln173_14_fu_876_p1;
wire   [21:0] add_ln173_30_fu_974_p2;
wire  signed [31:0] sext_ln173_30_fu_980_p1;
wire   [31:0] grp_fu_290_p1;
wire  signed [7:0] grp_fu_999_p1;
wire  signed [7:0] grp_fu_1005_p1;
wire  signed [7:0] grp_fu_1011_p1;
wire  signed [7:0] grp_fu_1017_p1;
wire  signed [7:0] grp_fu_1023_p1;
wire  signed [7:0] grp_fu_1029_p1;
wire  signed [7:0] grp_fu_1035_p1;
wire  signed [7:0] grp_fu_1041_p1;
wire  signed [7:0] grp_fu_1047_p1;
wire  signed [7:0] grp_fu_1053_p1;
wire  signed [7:0] grp_fu_1059_p1;
wire  signed [7:0] grp_fu_1065_p1;
wire  signed [7:0] grp_fu_1071_p1;
wire  signed [7:0] grp_fu_1077_p1;
wire  signed [7:0] grp_fu_1083_p1;
wire  signed [7:0] grp_fu_1089_p1;
wire  signed [7:0] grp_fu_1095_p1;
wire  signed [7:0] grp_fu_1103_p1;
wire  signed [7:0] grp_fu_1111_p1;
wire  signed [7:0] grp_fu_1119_p1;
wire  signed [7:0] grp_fu_1127_p1;
wire  signed [7:0] grp_fu_1135_p1;
wire  signed [7:0] grp_fu_1143_p1;
wire  signed [7:0] grp_fu_1151_p1;
wire  signed [7:0] grp_fu_1159_p1;
wire  signed [7:0] grp_fu_1167_p1;
wire  signed [7:0] grp_fu_1175_p1;
wire  signed [7:0] grp_fu_1183_p1;
wire  signed [7:0] grp_fu_1191_p1;
wire  signed [7:0] grp_fu_1199_p1;
wire  signed [7:0] grp_fu_1207_p1;
wire  signed [7:0] grp_fu_1215_p1;
reg    grp_fu_290_ce;
reg    grp_fu_999_ce;
reg    grp_fu_1005_ce;
reg    grp_fu_1011_ce;
reg    grp_fu_1017_ce;
reg    grp_fu_1023_ce;
reg    grp_fu_1029_ce;
reg    grp_fu_1035_ce;
reg    grp_fu_1041_ce;
reg    grp_fu_1047_ce;
reg    grp_fu_1053_ce;
reg    grp_fu_1059_ce;
reg    grp_fu_1065_ce;
reg    grp_fu_1071_ce;
reg    grp_fu_1077_ce;
reg    grp_fu_1083_ce;
reg    grp_fu_1089_ce;
reg    grp_fu_1095_ce;
reg    grp_fu_1103_ce;
reg    grp_fu_1111_ce;
reg    grp_fu_1119_ce;
reg    grp_fu_1127_ce;
reg    grp_fu_1135_ce;
reg    grp_fu_1143_ce;
reg    grp_fu_1151_ce;
reg    grp_fu_1159_ce;
reg    grp_fu_1167_ce;
reg    grp_fu_1175_ce;
reg    grp_fu_1183_ce;
reg    grp_fu_1191_ce;
reg    grp_fu_1199_ce;
reg    grp_fu_1207_ce;
reg    grp_fu_1215_ce;
reg   [60:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
reg    ap_ST_fsm_state65_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 61'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

layernorm_fptrunc_64ns_32_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
fptrunc_64ns_32_2_no_dsp_1_U67(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_reg_1483),
    .ce(grp_fu_290_ce),
    .dout(grp_fu_290_p1)
);

layernorm_dadd_64ns_64ns_64_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dadd_64ns_64ns_64_5_full_dsp_1_U68(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(div_reg_1473),
    .din1(64'd4532020583461814272),
    .ce(1'b1),
    .dout(grp_fu_293_p2)
);

layernorm_ddiv_64ns_64ns_64_22_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 22 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ddiv_64ns_64ns_64_22_no_dsp_1_U69(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_reg_1468),
    .din1(temp1_reg_1245),
    .ce(1'b1),
    .dout(grp_fu_298_p2)
);

layernorm_uitodp_32ns_64_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
uitodp_32ns_64_4_no_dsp_1_U70(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(cols_fu_314_p2),
    .ce(1'b1),
    .dout(grp_fu_302_p1)
);

layernorm_sitodp_32ns_64_4_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
sitodp_32ns_64_4_no_dsp_1_U71(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_diff_sum3_phi_fu_282_p4),
    .ce(1'b1),
    .dout(grp_fu_305_p1)
);

layernorm_dsqrt_64ns_64ns_64_21_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 21 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dsqrt_64ns_64ns_64_21_no_dsp_1_U72(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(64'd0),
    .din1(temp_reg_1478),
    .ce(1'b1),
    .dout(grp_fu_309_p2)
);

layernorm_am_submul_8s_8s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
am_submul_8s_8s_18_4_1_U73(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(l_val_V_fu_346_p1),
    .din1(grp_fu_999_p1),
    .ce(grp_fu_999_ce),
    .dout(grp_fu_999_p2)
);

layernorm_am_submul_8s_8s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
am_submul_8s_8s_18_4_1_U74(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(l_val_V_2_fu_360_p4),
    .din1(grp_fu_1005_p1),
    .ce(grp_fu_1005_ce),
    .dout(grp_fu_1005_p2)
);

layernorm_am_submul_8s_8s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
am_submul_8s_8s_18_4_1_U75(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(l_val_V_4_fu_380_p4),
    .din1(grp_fu_1011_p1),
    .ce(grp_fu_1011_ce),
    .dout(grp_fu_1011_p2)
);

layernorm_am_submul_8s_8s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
am_submul_8s_8s_18_4_1_U76(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(l_val_V_6_fu_400_p4),
    .din1(grp_fu_1017_p1),
    .ce(grp_fu_1017_ce),
    .dout(grp_fu_1017_p2)
);

layernorm_am_submul_8s_8s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
am_submul_8s_8s_18_4_1_U77(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(l_val_V_8_fu_420_p4),
    .din1(grp_fu_1023_p1),
    .ce(grp_fu_1023_ce),
    .dout(grp_fu_1023_p2)
);

layernorm_am_submul_8s_8s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
am_submul_8s_8s_18_4_1_U78(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(l_val_V_10_fu_440_p4),
    .din1(grp_fu_1029_p1),
    .ce(grp_fu_1029_ce),
    .dout(grp_fu_1029_p2)
);

layernorm_am_submul_8s_8s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
am_submul_8s_8s_18_4_1_U79(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(l_val_V_12_fu_460_p4),
    .din1(grp_fu_1035_p1),
    .ce(grp_fu_1035_ce),
    .dout(grp_fu_1035_p2)
);

layernorm_am_submul_8s_8s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
am_submul_8s_8s_18_4_1_U80(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(l_val_V_14_fu_480_p4),
    .din1(grp_fu_1041_p1),
    .ce(grp_fu_1041_ce),
    .dout(grp_fu_1041_p2)
);

layernorm_am_submul_8s_8s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
am_submul_8s_8s_18_4_1_U81(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(l_val_V_16_fu_500_p4),
    .din1(grp_fu_1047_p1),
    .ce(grp_fu_1047_ce),
    .dout(grp_fu_1047_p2)
);

layernorm_am_submul_8s_8s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
am_submul_8s_8s_18_4_1_U82(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(l_val_V_18_fu_520_p4),
    .din1(grp_fu_1053_p1),
    .ce(grp_fu_1053_ce),
    .dout(grp_fu_1053_p2)
);

layernorm_am_submul_8s_8s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
am_submul_8s_8s_18_4_1_U83(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(l_val_V_20_fu_540_p4),
    .din1(grp_fu_1059_p1),
    .ce(grp_fu_1059_ce),
    .dout(grp_fu_1059_p2)
);

layernorm_am_submul_8s_8s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
am_submul_8s_8s_18_4_1_U84(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(l_val_V_22_fu_560_p4),
    .din1(grp_fu_1065_p1),
    .ce(grp_fu_1065_ce),
    .dout(grp_fu_1065_p2)
);

layernorm_am_submul_8s_8s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
am_submul_8s_8s_18_4_1_U85(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(l_val_V_24_fu_580_p4),
    .din1(grp_fu_1071_p1),
    .ce(grp_fu_1071_ce),
    .dout(grp_fu_1071_p2)
);

layernorm_am_submul_8s_8s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
am_submul_8s_8s_18_4_1_U86(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(l_val_V_26_fu_600_p4),
    .din1(grp_fu_1077_p1),
    .ce(grp_fu_1077_ce),
    .dout(grp_fu_1077_p2)
);

layernorm_am_submul_8s_8s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
am_submul_8s_8s_18_4_1_U87(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(l_val_V_28_fu_620_p4),
    .din1(grp_fu_1083_p1),
    .ce(grp_fu_1083_ce),
    .dout(grp_fu_1083_p2)
);

layernorm_am_submul_8s_8s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
am_submul_8s_8s_18_4_1_U88(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(l_val_V_30_fu_640_p4),
    .din1(grp_fu_1089_p1),
    .ce(grp_fu_1089_ce),
    .dout(grp_fu_1089_p2)
);

layernorm_ama_submuladd_8s_8s_18s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
ama_submuladd_8s_8s_18s_18_4_1_U89(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(l_val_V_1_reg_1269),
    .din1(grp_fu_1095_p1),
    .din2(grp_fu_999_p2),
    .ce(grp_fu_1095_ce),
    .dout(grp_fu_1095_p3)
);

layernorm_ama_submuladd_8s_8s_18s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
ama_submuladd_8s_8s_18s_18_4_1_U90(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(l_val_V_3_reg_1274),
    .din1(grp_fu_1103_p1),
    .din2(grp_fu_1005_p2),
    .ce(grp_fu_1103_ce),
    .dout(grp_fu_1103_p3)
);

layernorm_ama_submuladd_8s_8s_18s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
ama_submuladd_8s_8s_18s_18_4_1_U91(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(l_val_V_5_reg_1279),
    .din1(grp_fu_1111_p1),
    .din2(grp_fu_1011_p2),
    .ce(grp_fu_1111_ce),
    .dout(grp_fu_1111_p3)
);

layernorm_ama_submuladd_8s_8s_18s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
ama_submuladd_8s_8s_18s_18_4_1_U92(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(l_val_V_7_reg_1284),
    .din1(grp_fu_1119_p1),
    .din2(grp_fu_1017_p2),
    .ce(grp_fu_1119_ce),
    .dout(grp_fu_1119_p3)
);

layernorm_ama_submuladd_8s_8s_18s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
ama_submuladd_8s_8s_18s_18_4_1_U93(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(l_val_V_9_reg_1289),
    .din1(grp_fu_1127_p1),
    .din2(grp_fu_1023_p2),
    .ce(grp_fu_1127_ce),
    .dout(grp_fu_1127_p3)
);

layernorm_ama_submuladd_8s_8s_18s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
ama_submuladd_8s_8s_18s_18_4_1_U94(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(l_val_V_11_reg_1294),
    .din1(grp_fu_1135_p1),
    .din2(grp_fu_1029_p2),
    .ce(grp_fu_1135_ce),
    .dout(grp_fu_1135_p3)
);

layernorm_ama_submuladd_8s_8s_18s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
ama_submuladd_8s_8s_18s_18_4_1_U95(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(l_val_V_13_reg_1299),
    .din1(grp_fu_1143_p1),
    .din2(grp_fu_1035_p2),
    .ce(grp_fu_1143_ce),
    .dout(grp_fu_1143_p3)
);

layernorm_ama_submuladd_8s_8s_18s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
ama_submuladd_8s_8s_18s_18_4_1_U96(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(l_val_V_15_reg_1304),
    .din1(grp_fu_1151_p1),
    .din2(grp_fu_1041_p2),
    .ce(grp_fu_1151_ce),
    .dout(grp_fu_1151_p3)
);

layernorm_ama_submuladd_8s_8s_18s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
ama_submuladd_8s_8s_18s_18_4_1_U97(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(l_val_V_17_reg_1309),
    .din1(grp_fu_1159_p1),
    .din2(grp_fu_1047_p2),
    .ce(grp_fu_1159_ce),
    .dout(grp_fu_1159_p3)
);

layernorm_ama_submuladd_8s_8s_18s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
ama_submuladd_8s_8s_18s_18_4_1_U98(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(l_val_V_19_reg_1314),
    .din1(grp_fu_1167_p1),
    .din2(grp_fu_1053_p2),
    .ce(grp_fu_1167_ce),
    .dout(grp_fu_1167_p3)
);

layernorm_ama_submuladd_8s_8s_18s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
ama_submuladd_8s_8s_18s_18_4_1_U99(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(l_val_V_21_reg_1319),
    .din1(grp_fu_1175_p1),
    .din2(grp_fu_1059_p2),
    .ce(grp_fu_1175_ce),
    .dout(grp_fu_1175_p3)
);

layernorm_ama_submuladd_8s_8s_18s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
ama_submuladd_8s_8s_18s_18_4_1_U100(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(l_val_V_23_reg_1324),
    .din1(grp_fu_1183_p1),
    .din2(grp_fu_1065_p2),
    .ce(grp_fu_1183_ce),
    .dout(grp_fu_1183_p3)
);

layernorm_ama_submuladd_8s_8s_18s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
ama_submuladd_8s_8s_18s_18_4_1_U101(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(l_val_V_25_reg_1329),
    .din1(grp_fu_1191_p1),
    .din2(grp_fu_1071_p2),
    .ce(grp_fu_1191_ce),
    .dout(grp_fu_1191_p3)
);

layernorm_ama_submuladd_8s_8s_18s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
ama_submuladd_8s_8s_18s_18_4_1_U102(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(l_val_V_27_reg_1334),
    .din1(grp_fu_1199_p1),
    .din2(grp_fu_1077_p2),
    .ce(grp_fu_1199_ce),
    .dout(grp_fu_1199_p3)
);

layernorm_ama_submuladd_8s_8s_18s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
ama_submuladd_8s_8s_18s_18_4_1_U103(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(l_val_V_29_reg_1339),
    .din1(grp_fu_1207_p1),
    .din2(grp_fu_1083_p2),
    .ce(grp_fu_1207_ce),
    .dout(grp_fu_1207_p3)
);

layernorm_ama_submuladd_8s_8s_18s_18_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
ama_submuladd_8s_8s_18s_18_4_1_U104(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(l_val_V_31_reg_1344),
    .din1(grp_fu_1215_p1),
    .din2(grp_fu_1089_p2),
    .ce(grp_fu_1215_ce),
    .dout(grp_fu_1215_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((icmp_ln160_1_reg_1250 == 1'd0) & (stddev8_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state65) & ((icmp_ln160_reg_1464 == 1'd1) | (icmp_ln160_1_reg_1250 == 1'd1)))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln165_1_fu_335_p2 == 1'd0) & (mean_a6_empty_n == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln165_1_fu_335_p2 == 1'd0) & (mean_a6_empty_n == 1'b1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln165_1_fu_335_p2 == 1'd0) & (mean_a6_empty_n == 1'b1))) begin
        diff_sum2_reg_267 <= 32'd0;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln165_reg_1374_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        diff_sum2_reg_267 <= diff_sum_fu_984_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln165_1_reg_1259 == 1'd0))) begin
        diff_sum3_reg_278 <= diff_sum_reg_1458;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln165_1_fu_335_p2 == 1'd1) & (mean_a6_empty_n == 1'b1))) begin
        diff_sum3_reg_278 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln165_1_fu_335_p2 == 1'd0) & (mean_a6_empty_n == 1'b1))) begin
        j4_reg_256 <= 27'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln165_reg_1374 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j4_reg_256 <= j_reg_1369;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln160_1_fu_330_p2 == 1'd0))) begin
        k6_reg_245 <= 32'd0;
    end else if ((~((icmp_ln160_1_reg_1250 == 1'd0) & (stddev8_full_n == 1'b0)) & (icmp_ln160_reg_1464 == 1'd0) & (1'b1 == ap_CS_fsm_state65) & (icmp_ln160_1_reg_1250 == 1'd0))) begin
        k6_reg_245 <= k_reg_1263;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        cols_log_read_reg_1223 <= cols_log_dout;
        rows_read_reg_1228 <= rows_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        conv_reg_1468 <= grp_fu_305_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        diff_sum_reg_1458 <= diff_sum_fu_984_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        div_reg_1473 <= grp_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        icmp_ln160_1_reg_1250 <= icmp_ln160_1_fu_330_p2;
        temp1_reg_1245 <= grp_fu_302_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        icmp_ln160_reg_1464 <= icmp_ln160_fu_990_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        icmp_ln165_1_reg_1259 <= icmp_ln165_1_fu_335_p2;
        mean_a6_read_reg_1254 <= mean_a6_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln165_reg_1374 <= icmp_ln165_fu_733_p2;
        icmp_ln165_reg_1374_pp0_iter1_reg <= icmp_ln165_reg_1374;
        l_val_V_11_reg_1294 <= {{data_copy_b2_dout[95:88]}};
        l_val_V_13_reg_1299 <= {{data_copy_b2_dout[111:104]}};
        l_val_V_15_reg_1304 <= {{data_copy_b2_dout[127:120]}};
        l_val_V_17_reg_1309 <= {{data_copy_b2_dout[143:136]}};
        l_val_V_19_reg_1314 <= {{data_copy_b2_dout[159:152]}};
        l_val_V_1_reg_1269 <= {{data_copy_b2_dout[15:8]}};
        l_val_V_21_reg_1319 <= {{data_copy_b2_dout[175:168]}};
        l_val_V_23_reg_1324 <= {{data_copy_b2_dout[191:184]}};
        l_val_V_25_reg_1329 <= {{data_copy_b2_dout[207:200]}};
        l_val_V_27_reg_1334 <= {{data_copy_b2_dout[223:216]}};
        l_val_V_29_reg_1339 <= {{data_copy_b2_dout[239:232]}};
        l_val_V_31_reg_1344 <= {{data_copy_b2_dout[255:248]}};
        l_val_V_3_reg_1274 <= {{data_copy_b2_dout[31:24]}};
        l_val_V_5_reg_1279 <= {{data_copy_b2_dout[47:40]}};
        l_val_V_7_reg_1284 <= {{data_copy_b2_dout[63:56]}};
        l_val_V_9_reg_1289 <= {{data_copy_b2_dout[79:72]}};
        sext_ln1496_1_reg_1349 <= sext_ln1496_1_fu_664_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln165_reg_1374_pp0_iter2_reg <= icmp_ln165_reg_1374_pp0_iter1_reg;
        icmp_ln165_reg_1374_pp0_iter3_reg <= icmp_ln165_reg_1374_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        j_reg_1369 <= j_fu_727_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (mean_a6_empty_n == 1'b1))) begin
        k_reg_1263 <= k_fu_340_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        temp_reg_1478 <= grp_fu_293_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        tmp_reg_1483 <= grp_fu_309_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        trunc_ln_reg_1239 <= {{cols_fu_314_p2[31:5]}};
    end
end

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if (((rows_empty_n == 1'b0) | (cols_log_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (cols_log_c20_full_n == 1'b0) | (rows_c17_full_n == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln160_1_reg_1250 == 1'd0) & (stddev8_full_n == 1'b0))) begin
        ap_ST_fsm_state65_blk = 1'b1;
    end else begin
        ap_ST_fsm_state65_blk = 1'b0;
    end
end

always @ (*) begin
    if ((mean_a6_empty_n == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln165_fu_733_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln160_1_reg_1250 == 1'd0) & (stddev8_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state65) & ((icmp_ln160_reg_1464 == 1'd1) | (icmp_ln160_1_reg_1250 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln165_1_reg_1259 == 1'd0))) begin
        ap_phi_mux_diff_sum3_phi_fu_282_p4 = diff_sum_reg_1458;
    end else begin
        ap_phi_mux_diff_sum3_phi_fu_282_p4 = diff_sum3_reg_278;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln165_reg_1374 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_j4_phi_fu_260_p4 = j_reg_1369;
    end else begin
        ap_phi_mux_j4_phi_fu_260_p4 = j4_reg_256;
    end
end

always @ (*) begin
    if ((~((icmp_ln160_1_reg_1250 == 1'd0) & (stddev8_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state65) & ((icmp_ln160_reg_1464 == 1'd1) | (icmp_ln160_1_reg_1250 == 1'd1)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_log_blk_n = cols_log_empty_n;
    end else begin
        cols_log_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_log_c20_blk_n = cols_log_c20_full_n;
    end else begin
        cols_log_c20_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((rows_empty_n == 1'b0) | (cols_log_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (cols_log_c20_full_n == 1'b0) | (rows_c17_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_log_c20_write = 1'b1;
    end else begin
        cols_log_c20_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((rows_empty_n == 1'b0) | (cols_log_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (cols_log_c20_full_n == 1'b0) | (rows_c17_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_log_read = 1'b1;
    end else begin
        cols_log_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        data_copy_b2_blk_n = data_copy_b2_empty_n;
    end else begin
        data_copy_b2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        data_copy_b2_read = 1'b1;
    end else begin
        data_copy_b2_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1005_ce = 1'b1;
    end else begin
        grp_fu_1005_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1011_ce = 1'b1;
    end else begin
        grp_fu_1011_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1017_ce = 1'b1;
    end else begin
        grp_fu_1017_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1023_ce = 1'b1;
    end else begin
        grp_fu_1023_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1029_ce = 1'b1;
    end else begin
        grp_fu_1029_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1035_ce = 1'b1;
    end else begin
        grp_fu_1035_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1041_ce = 1'b1;
    end else begin
        grp_fu_1041_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1047_ce = 1'b1;
    end else begin
        grp_fu_1047_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1053_ce = 1'b1;
    end else begin
        grp_fu_1053_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1059_ce = 1'b1;
    end else begin
        grp_fu_1059_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1065_ce = 1'b1;
    end else begin
        grp_fu_1065_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1071_ce = 1'b1;
    end else begin
        grp_fu_1071_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1077_ce = 1'b1;
    end else begin
        grp_fu_1077_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1083_ce = 1'b1;
    end else begin
        grp_fu_1083_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1089_ce = 1'b1;
    end else begin
        grp_fu_1089_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1095_ce = 1'b1;
    end else begin
        grp_fu_1095_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1103_ce = 1'b1;
    end else begin
        grp_fu_1103_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1111_ce = 1'b1;
    end else begin
        grp_fu_1111_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1119_ce = 1'b1;
    end else begin
        grp_fu_1119_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1127_ce = 1'b1;
    end else begin
        grp_fu_1127_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1135_ce = 1'b1;
    end else begin
        grp_fu_1135_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1143_ce = 1'b1;
    end else begin
        grp_fu_1143_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1151_ce = 1'b1;
    end else begin
        grp_fu_1151_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1159_ce = 1'b1;
    end else begin
        grp_fu_1159_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1167_ce = 1'b1;
    end else begin
        grp_fu_1167_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1175_ce = 1'b1;
    end else begin
        grp_fu_1175_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1183_ce = 1'b1;
    end else begin
        grp_fu_1183_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1191_ce = 1'b1;
    end else begin
        grp_fu_1191_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1199_ce = 1'b1;
    end else begin
        grp_fu_1199_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1207_ce = 1'b1;
    end else begin
        grp_fu_1207_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_1215_ce = 1'b1;
    end else begin
        grp_fu_1215_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state64) | (~((icmp_ln160_1_reg_1250 == 1'd0) & (stddev8_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state65)))) begin
        grp_fu_290_ce = 1'b1;
    end else begin
        grp_fu_290_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_999_ce = 1'b1;
    end else begin
        grp_fu_999_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mean_a6_blk_n = mean_a6_empty_n;
    end else begin
        mean_a6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (mean_a6_empty_n == 1'b1))) begin
        mean_a6_read = 1'b1;
    end else begin
        mean_a6_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_blk_n = rows_empty_n;
    end else begin
        rows_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_c17_blk_n = rows_c17_full_n;
    end else begin
        rows_c17_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((rows_empty_n == 1'b0) | (cols_log_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (cols_log_c20_full_n == 1'b0) | (rows_c17_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_c17_write = 1'b1;
    end else begin
        rows_c17_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((rows_empty_n == 1'b0) | (cols_log_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (cols_log_c20_full_n == 1'b0) | (rows_c17_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_read = 1'b1;
    end else begin
        rows_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state65) & (icmp_ln160_1_reg_1250 == 1'd0))) begin
        stddev8_blk_n = stddev8_full_n;
    end else begin
        stddev8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln160_1_reg_1250 == 1'd0) & (stddev8_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state65) & (icmp_ln160_1_reg_1250 == 1'd0))) begin
        stddev8_write = 1'b1;
    end else begin
        stddev8_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((rows_empty_n == 1'b0) | (cols_log_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (cols_log_c20_full_n == 1'b0) | (rows_c17_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln160_1_fu_330_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln165_1_fu_335_p2 == 1'd0) & (mean_a6_empty_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln165_1_fu_335_p2 == 1'd1) & (mean_a6_empty_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            if ((~((icmp_ln160_1_reg_1250 == 1'd0) & (stddev8_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state65) & ((icmp_ln160_reg_1464 == 1'd1) | (icmp_ln160_1_reg_1250 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((icmp_ln160_1_reg_1250 == 1'd0) & (stddev8_full_n == 1'b0)) & (icmp_ln160_reg_1464 == 1'd0) & (1'b1 == ap_CS_fsm_state65) & (icmp_ln160_1_reg_1250 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state65;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln173_12_fu_850_p2 = ($signed(sext_ln173_11_fu_847_p1) + $signed(sext_ln173_10_fu_844_p1));

assign add_ln173_13_fu_860_p2 = ($signed(sext_ln173_12_fu_856_p1) + $signed(sext_ln173_9_fu_840_p1));

assign add_ln173_14_fu_870_p2 = ($signed(sext_ln173_13_fu_866_p1) + $signed(sext_ln173_6_fu_824_p1));

assign add_ln173_17_fu_886_p2 = ($signed(sext_ln173_16_fu_883_p1) + $signed(sext_ln173_15_fu_880_p1));

assign add_ln173_20_fu_902_p2 = ($signed(sext_ln173_19_fu_899_p1) + $signed(sext_ln173_18_fu_896_p1));

assign add_ln173_21_fu_912_p2 = ($signed(sext_ln173_20_fu_908_p1) + $signed(sext_ln173_17_fu_892_p1));

assign add_ln173_24_fu_928_p2 = ($signed(sext_ln173_23_fu_925_p1) + $signed(sext_ln173_22_fu_922_p1));

assign add_ln173_27_fu_944_p2 = ($signed(sext_ln173_26_fu_941_p1) + $signed(sext_ln173_25_fu_938_p1));

assign add_ln173_28_fu_954_p2 = ($signed(sext_ln173_27_fu_950_p1) + $signed(sext_ln173_24_fu_934_p1));

assign add_ln173_29_fu_964_p2 = ($signed(sext_ln173_28_fu_960_p1) + $signed(sext_ln173_21_fu_918_p1));

assign add_ln173_2_fu_792_p2 = ($signed(sext_ln173_1_fu_789_p1) + $signed(sext_ln173_fu_786_p1));

assign add_ln173_30_fu_974_p2 = ($signed(sext_ln173_29_fu_970_p1) + $signed(sext_ln173_14_fu_876_p1));

assign add_ln173_5_fu_808_p2 = ($signed(sext_ln173_4_fu_805_p1) + $signed(sext_ln173_3_fu_802_p1));

assign add_ln173_6_fu_818_p2 = ($signed(sext_ln173_5_fu_814_p1) + $signed(sext_ln173_2_fu_798_p1));

assign add_ln173_9_fu_834_p2 = ($signed(sext_ln173_8_fu_831_p1) + $signed(sext_ln173_7_fu_828_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd60];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((data_copy_b2_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((data_copy_b2_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((rows_empty_n == 1'b0) | (cols_log_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (cols_log_c20_full_n == 1'b0) | (rows_c17_full_n == 1'b0));
end

assign ap_block_state10_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state65 = ((icmp_ln160_1_reg_1250 == 1'd0) & (stddev8_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state7_pp0_stage0_iter0 = (data_copy_b2_empty_n == 1'b0);
end

assign ap_block_state8_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign cols_fu_314_p2 = 32'd1 << cols_log_read_reg_1223;

assign cols_log_c20_din = cols_log_dout;

assign diff_sum_fu_984_p2 = ($signed(diff_sum2_reg_267) + $signed(sext_ln173_30_fu_980_p1));

assign grp_fu_1005_p1 = sext_ln1496_1_fu_664_p1;

assign grp_fu_1011_p1 = sext_ln1496_1_fu_664_p1;

assign grp_fu_1017_p1 = sext_ln1496_1_fu_664_p1;

assign grp_fu_1023_p1 = sext_ln1496_1_fu_664_p1;

assign grp_fu_1029_p1 = sext_ln1496_1_fu_664_p1;

assign grp_fu_1035_p1 = sext_ln1496_1_fu_664_p1;

assign grp_fu_1041_p1 = sext_ln1496_1_fu_664_p1;

assign grp_fu_1047_p1 = sext_ln1496_1_fu_664_p1;

assign grp_fu_1053_p1 = sext_ln1496_1_fu_664_p1;

assign grp_fu_1059_p1 = sext_ln1496_1_fu_664_p1;

assign grp_fu_1065_p1 = sext_ln1496_1_fu_664_p1;

assign grp_fu_1071_p1 = sext_ln1496_1_fu_664_p1;

assign grp_fu_1077_p1 = sext_ln1496_1_fu_664_p1;

assign grp_fu_1083_p1 = sext_ln1496_1_fu_664_p1;

assign grp_fu_1089_p1 = sext_ln1496_1_fu_664_p1;

assign grp_fu_1095_p1 = sext_ln1496_1_reg_1349;

assign grp_fu_1103_p1 = sext_ln1496_1_reg_1349;

assign grp_fu_1111_p1 = sext_ln1496_1_reg_1349;

assign grp_fu_1119_p1 = sext_ln1496_1_reg_1349;

assign grp_fu_1127_p1 = sext_ln1496_1_reg_1349;

assign grp_fu_1135_p1 = sext_ln1496_1_reg_1349;

assign grp_fu_1143_p1 = sext_ln1496_1_reg_1349;

assign grp_fu_1151_p1 = sext_ln1496_1_reg_1349;

assign grp_fu_1159_p1 = sext_ln1496_1_reg_1349;

assign grp_fu_1167_p1 = sext_ln1496_1_reg_1349;

assign grp_fu_1175_p1 = sext_ln1496_1_reg_1349;

assign grp_fu_1183_p1 = sext_ln1496_1_reg_1349;

assign grp_fu_1191_p1 = sext_ln1496_1_reg_1349;

assign grp_fu_1199_p1 = sext_ln1496_1_reg_1349;

assign grp_fu_1207_p1 = sext_ln1496_1_reg_1349;

assign grp_fu_1215_p1 = sext_ln1496_1_reg_1349;

assign grp_fu_999_p1 = sext_ln1496_1_fu_664_p1;

assign icmp_ln160_1_fu_330_p2 = ((rows_read_reg_1228 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln160_fu_990_p2 = ((k_reg_1263 == rows_read_reg_1228) ? 1'b1 : 1'b0);

assign icmp_ln165_1_fu_335_p2 = ((trunc_ln_reg_1239 == 27'd0) ? 1'b1 : 1'b0);

assign icmp_ln165_fu_733_p2 = ((j_fu_727_p2 == trunc_ln_reg_1239) ? 1'b1 : 1'b0);

assign j_fu_727_p2 = (ap_phi_mux_j4_phi_fu_260_p4 + 27'd1);

assign k_fu_340_p2 = (k6_reg_245 + 32'd1);

assign l_val_V_10_fu_440_p4 = {{data_copy_b2_dout[87:80]}};

assign l_val_V_12_fu_460_p4 = {{data_copy_b2_dout[103:96]}};

assign l_val_V_14_fu_480_p4 = {{data_copy_b2_dout[119:112]}};

assign l_val_V_16_fu_500_p4 = {{data_copy_b2_dout[135:128]}};

assign l_val_V_18_fu_520_p4 = {{data_copy_b2_dout[151:144]}};

assign l_val_V_20_fu_540_p4 = {{data_copy_b2_dout[167:160]}};

assign l_val_V_22_fu_560_p4 = {{data_copy_b2_dout[183:176]}};

assign l_val_V_24_fu_580_p4 = {{data_copy_b2_dout[199:192]}};

assign l_val_V_26_fu_600_p4 = {{data_copy_b2_dout[215:208]}};

assign l_val_V_28_fu_620_p4 = {{data_copy_b2_dout[231:224]}};

assign l_val_V_2_fu_360_p4 = {{data_copy_b2_dout[23:16]}};

assign l_val_V_30_fu_640_p4 = {{data_copy_b2_dout[247:240]}};

assign l_val_V_4_fu_380_p4 = {{data_copy_b2_dout[39:32]}};

assign l_val_V_6_fu_400_p4 = {{data_copy_b2_dout[55:48]}};

assign l_val_V_8_fu_420_p4 = {{data_copy_b2_dout[71:64]}};

assign l_val_V_fu_346_p1 = data_copy_b2_dout[7:0];

assign rows_c17_din = rows_dout;

assign sext_ln1496_1_fu_664_p1 = $signed(mean_a6_read_reg_1254);

assign sext_ln173_10_fu_844_p1 = grp_fu_1143_p3;

assign sext_ln173_11_fu_847_p1 = grp_fu_1151_p3;

assign sext_ln173_12_fu_856_p1 = $signed(add_ln173_12_fu_850_p2);

assign sext_ln173_13_fu_866_p1 = $signed(add_ln173_13_fu_860_p2);

assign sext_ln173_14_fu_876_p1 = $signed(add_ln173_14_fu_870_p2);

assign sext_ln173_15_fu_880_p1 = grp_fu_1159_p3;

assign sext_ln173_16_fu_883_p1 = grp_fu_1167_p3;

assign sext_ln173_17_fu_892_p1 = $signed(add_ln173_17_fu_886_p2);

assign sext_ln173_18_fu_896_p1 = grp_fu_1175_p3;

assign sext_ln173_19_fu_899_p1 = grp_fu_1183_p3;

assign sext_ln173_1_fu_789_p1 = grp_fu_1103_p3;

assign sext_ln173_20_fu_908_p1 = $signed(add_ln173_20_fu_902_p2);

assign sext_ln173_21_fu_918_p1 = $signed(add_ln173_21_fu_912_p2);

assign sext_ln173_22_fu_922_p1 = grp_fu_1191_p3;

assign sext_ln173_23_fu_925_p1 = grp_fu_1199_p3;

assign sext_ln173_24_fu_934_p1 = $signed(add_ln173_24_fu_928_p2);

assign sext_ln173_25_fu_938_p1 = grp_fu_1207_p3;

assign sext_ln173_26_fu_941_p1 = grp_fu_1215_p3;

assign sext_ln173_27_fu_950_p1 = $signed(add_ln173_27_fu_944_p2);

assign sext_ln173_28_fu_960_p1 = $signed(add_ln173_28_fu_954_p2);

assign sext_ln173_29_fu_970_p1 = $signed(add_ln173_29_fu_964_p2);

assign sext_ln173_2_fu_798_p1 = $signed(add_ln173_2_fu_792_p2);

assign sext_ln173_30_fu_980_p1 = $signed(add_ln173_30_fu_974_p2);

assign sext_ln173_3_fu_802_p1 = grp_fu_1111_p3;

assign sext_ln173_4_fu_805_p1 = grp_fu_1119_p3;

assign sext_ln173_5_fu_814_p1 = $signed(add_ln173_5_fu_808_p2);

assign sext_ln173_6_fu_824_p1 = $signed(add_ln173_6_fu_818_p2);

assign sext_ln173_7_fu_828_p1 = grp_fu_1127_p3;

assign sext_ln173_8_fu_831_p1 = grp_fu_1135_p3;

assign sext_ln173_9_fu_840_p1 = $signed(add_ln173_9_fu_834_p2);

assign sext_ln173_fu_786_p1 = grp_fu_1095_p3;

assign stddev8_din = grp_fu_290_p1;

endmodule //layernorm_p_anonymous_namespace_StdDev_ap_int_8_float_5u_s
